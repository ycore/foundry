{
  "version": 3,
  "sources": ["../../src/auth/auth.config.ts", "../../src/auth/auth.context.ts", "../../src/auth/components/profile-page.tsx", "../../../../node_modules/clsx/dist/clsx.mjs", "../../src/auth/services/webauthn-credential.ts", "../../src/auth/components/webauthn-client.ts", "../../src/auth/components/signin-page.tsx", "../../src/auth/services/webauthn.ts", "../../src/auth/auth.constants.ts", "../../src/auth/components/signup-page.tsx", "../../src/auth/components/VerifyForm.tsx", "../../src/auth/services/auth.validation.ts"],
  "sourcesContent": [
    "import type { AuthConfig, AuthRoutes } from './@types/auth.config.types';\n\nexport const defaultAuthRoutes: AuthRoutes = {\n  signup: '/auth/signup',\n  signin: '/auth/signin',\n  signout: '/auth/signout',\n  signedin: '/',\n  signedout: '/',\n  verify: '/auth/verify',\n};\n\nexport const defaultAuthConfig: AuthConfig = {\n  routes: defaultAuthRoutes,\n  session: {\n    kvBinding: 'UNCONFIGURED',\n    secretKey: 'UNCONFIGURED',\n    cookie: {\n      name: '__auth_session',\n      httpOnly: true,\n      maxAge: 60 * 60 * 24 * 30,\n      path: '/',\n      sameSite: 'lax',\n      secure: 'auto', // Will be determined by environment\n    },\n  },\n  webauthn: {\n    rpName: 'React Router Cloudflare App',\n    challengeSessionKey: 'challenge',\n    requireUserVerification: true, // More secure\n  },\n  verification: {\n    digits: 6,\n    period: 60 * 8, // 8 minutes in seconds\n    maxAttempts: 3,\n    window: 1, // Â±30 seconds\n    requireEmailVerification: false,\n    resendCooldown: 60, // seconds\n  },\n};\n",
    "import { createContext, type RouterContextProvider } from 'react-router';\nimport type { AuthConfig } from './@types/auth.config.types';\nimport type { User } from './schema';\n\n/**\n * Context for storing auth configuration\n */\nexport const authConfigContext = createContext<AuthConfig | null>(null);\n\n/**\n * Get auth configuration from context\n */\nexport function getAuthConfig(context: Readonly<RouterContextProvider>): AuthConfig | null {\n  return context.get(authConfigContext);\n}\n\n/**\n * Set auth configuration in context\n */\nexport function setAuthConfig(context: Readonly<RouterContextProvider>, config: AuthConfig): void {\n  context.set(authConfigContext, config);\n}\n\n// Auth Session Context - stores authenticated user\nexport const authUserContext = createContext<User | null>(null);\n\n// Helper to check if user is authenticated\nexport function isAuthenticated(context: Readonly<RouterContextProvider>): boolean {\n  return context.get(authUserContext) !== null;\n}\n\n// Helper to get current user from context\nexport function getUser(context: Readonly<RouterContextProvider>): User | null {\n  return context.get(authUserContext);\n}\n",
    "import { DateFormat } from '@ycore/componentry/impetus/intl';\nimport { AlertDialog, Badge, Button, Card, Input, Label, Link, Separator, Spinner } from '@ycore/componentry/vibrant';\nimport { useSecureFetcher } from '@ycore/foundry/secure';\nimport clsx from 'clsx';\nimport { useEffect, useRef, useState } from 'react';\nimport { Form } from 'react-router';\n\nimport type { AuthenticatorsCardProps, ProfileCardProps, ProfilePageProps } from '../@types/auth.component.types';\nimport { convertServerOptionsToWebAuthn } from '../services/webauthn-credential';\nimport { isWebAuthnSupported, startRegistration } from './webauthn-client';\n\nexport function ProfileCard({ user, signoutUrl, verifyUrl }: ProfileCardProps) {\n  return (\n    <Card>\n      <Card.Header>\n        <Card.Title className=\"flex items-center gap-2\">\n          <div className=\"flex h-10 w-10 items-center justify-center rounded-full bg-primary text-primary-foreground\">{user?.displayName?.charAt(0)?.toUpperCase() || user?.email?.charAt(0)?.toUpperCase() || '?'}</div>\n          <div>\n            <h3 className=\"font-semibold text-lg\">{user?.displayName || 'Profile'}</h3>\n            <p className=\"text-muted-foreground text-sm\">{user?.email}</p>\n          </div>\n        </Card.Title>\n      </Card.Header>\n\n      <Card.Content className=\"space-y-6\">\n        <div className=\"grid gap-4\">\n          {user?.createdAt && (\n            <div className=\"space-y-2\">\n              <Label className=\"text-muted-foreground text-sm\">Since</Label>\n              <p className=\"text-sm\">\n                <DateFormat.Long date={user.createdAt} />\n              </p>\n            </div>\n          )}\n        </div>\n      </Card.Content>\n\n      <Separator />\n\n      <Card.Footer className=\"flex justify-between pt-6\">\n        <div className=\"flex gap-2\">\n          {user?.emailVerified ? (\n            <Badge variant=\"secondary\">Verified Account</Badge>\n          ) : (\n            <Button asChild variant=\"default\" size=\"sm\" className=\"bg-amber-600 hover:bg-amber-700\">\n              <Link href={verifyUrl}>Verify Email</Link>\n            </Button>\n          )}\n        </div>\n        <Form method=\"post\" action={signoutUrl}>\n          <Button type=\"submit\" variant=\"destructive\" size=\"sm\">\n            Sign Out\n          </Button>\n        </Form>\n      </Card.Footer>\n    </Card>\n  );\n}\n\nexport function AuthenticatorsCard({ authenticators }: AuthenticatorsCardProps) {\n  const addFetcher = useSecureFetcher();\n  const renameFetcher = useSecureFetcher();\n  const deleteFetcher = useSecureFetcher();\n  const optionsFetcher = useSecureFetcher();\n\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [editingName, setEditingName] = useState('');\n  const [pendingAction, setPendingAction] = useState<{ type: 'add'; authenticatorId?: string } | null>(null);\n  const [isRegistering, setIsRegistering] = useState(false);\n  const [webAuthnError, setWebAuthnError] = useState<string | null>(null);\n  const [isClient, setIsClient] = useState(false);\n  const [processedFetcherId, setProcessedFetcherId] = useState<string | null>(null);\n\n  // Form refs for programmatic submission after WebAuthn\n  const abortControllerRef = useRef<AbortController | null>(null);\n  const freshCsrfTokenRef = useRef<string | null>(null);\n\n  // Handle WebAuthn registration flow for add\n  useEffect(() => {\n    // Handle options response (data is returned directly, not wrapped in success/data)\n    // Prevent duplicate processing by checking if we've already processed this data\n    const currentFetcherId = optionsFetcher.state + JSON.stringify(optionsFetcher.data);\n    if (optionsFetcher.data && pendingAction && processedFetcherId !== currentFetcherId) {\n      setProcessedFetcherId(currentFetcherId);\n      const performWebAuthnRegistration = async () => {\n        try {\n          setIsRegistering(true);\n          setWebAuthnError(null);\n\n          // Create AbortController for this operation\n          abortControllerRef.current = new AbortController();\n\n          const responseData = optionsFetcher.data as { challenge?: string; options?: any; csrfToken?: string };\n\n          // Validate response structure\n          if (!responseData || !responseData.challenge || !responseData.options) {\n            console.error('Invalid options response structure:', responseData);\n            throw new Error('Invalid response from server. Please try again.');\n          }\n\n          const { challenge, options, csrfToken: freshCsrfToken } = responseData;\n\n          // Store the fresh CSRF token if provided\n          if (freshCsrfToken) {\n            freshCsrfTokenRef.current = freshCsrfToken;\n          }\n\n          // Convert server options to WebAuthn API format\n          let webAuthnOptions: PublicKeyCredentialCreationOptions;\n          try {\n            webAuthnOptions = convertServerOptionsToWebAuthn(options, challenge);\n          } catch (conversionError) {\n            console.error('Options conversion failed:', conversionError);\n            throw new Error('Failed to process registration options. Please try again.');\n          }\n\n          // Create timeout promise\n          const timeoutPromise = new Promise<never>((_, reject) => {\n            const timeoutId = setTimeout(() => {\n              reject(new Error('Registration timed out. Please try again.'));\n            }, 60000);\n\n            // Clear timeout if aborted\n            abortControllerRef.current?.signal.addEventListener('abort', () => {\n              clearTimeout(timeoutId);\n            });\n          });\n\n          // Race between WebAuthn registration and timeout\n          const credential = await Promise.race([startRegistration(webAuthnOptions), timeoutPromise]);\n\n          // Check if still mounted and not aborted\n          if (abortControllerRef.current?.signal.aborted) {\n            return;\n          }\n\n          // Submit based on action type\n          const formData = new FormData();\n          if (pendingAction.type === 'add') {\n            formData.append('intent', 'add-passkey');\n            formData.append('challenge', challenge);\n            formData.append('credentialData', JSON.stringify(credential));\n\n            // Use the fresh CSRF token from the response if available\n            if (freshCsrfTokenRef.current) {\n              formData.append('csrf_token', freshCsrfTokenRef.current);\n            }\n\n            addFetcher.submitSecure(formData, { method: 'post', action: '/auth/profile' });\n          }\n\n          setPendingAction(null);\n          setIsRegistering(false);\n        } catch (error) {\n          // Check if component is still mounted and operation wasn't aborted\n          if (abortControllerRef.current?.signal.aborted) {\n            return;\n          }\n\n          setIsRegistering(false);\n          setPendingAction(null);\n\n          // Provide more specific error messages\n          let errorMessage = 'Registration failed';\n          if (error instanceof Error) {\n            if (error.message.includes('cancelled')) {\n              errorMessage = 'Registration was cancelled. Please try again when ready.';\n            } else if (error.message.includes('timed out')) {\n              errorMessage = error.message;\n            } else if (error.message.includes('already registered')) {\n              errorMessage = 'This authenticator is already registered.';\n            } else {\n              errorMessage = error.message;\n            }\n          }\n          setWebAuthnError(errorMessage);\n        }\n      };\n\n      performWebAuthnRegistration();\n    }\n  }, [optionsFetcher.data, optionsFetcher.state, pendingAction, processedFetcherId, addFetcher]);\n\n  // Cleanup abort controller on unmount\n  useEffect(() => {\n    return () => {\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n    };\n  }, []);\n\n  // Set client state after hydration\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  // Monitor add fetcher state changes\n  useEffect(() => {\n    if (addFetcher.data && addFetcher.state === 'idle') {\n      setWebAuthnError(null);\n      setIsRegistering(false);\n    }\n\n    // Check for errors\n    if (addFetcher.state === 'idle' && addFetcher.data) {\n      const data = addFetcher.data as { success?: boolean; error?: { message?: string } };\n      if (data.success === false) {\n        setWebAuthnError(data.error?.message || 'Failed to add passkey');\n        setIsRegistering(false);\n      }\n    }\n  }, [addFetcher.data, addFetcher.state]);\n\n  const handleAddPasskey = () => {\n    // Clear any previous errors\n    setWebAuthnError(null);\n\n    if (!isWebAuthnSupported()) {\n      setWebAuthnError('WebAuthn is not supported on this device');\n      return;\n    }\n\n    setPendingAction({ type: 'add' });\n\n    // Request registration options from server (server has correct RP ID logic)\n    const formData = new FormData();\n    formData.append('intent', 'add-passkey-options');\n    optionsFetcher.submitSecure(formData, { method: 'post', action: '/auth/profile' });\n  };\n\n  const handleStartEdit = (authenticator: (typeof authenticators)[0]) => {\n    setEditingId(authenticator.id);\n    setEditingName(authenticator.name || '');\n  };\n\n  const handleSaveEdit = () => {\n    if (!editingId) return;\n\n    const formData = new FormData();\n    formData.append('intent', 'rename-passkey');\n    formData.append('authenticatorId', editingId);\n    formData.append('name', editingName.trim());\n\n    renameFetcher.submitSecure(formData, { method: 'post', action: '/auth/profile' });\n\n    setEditingId(null);\n    setEditingName('');\n  };\n\n  const handleCancelEdit = () => {\n    setEditingId(null);\n    setEditingName('');\n  };\n\n  const handleDeletePasskey = (authenticatorId: string) => {\n    const formData = new FormData();\n    formData.append('intent', 'delete-passkey');\n    formData.append('authenticatorId', authenticatorId);\n\n    deleteFetcher.submitSecure(formData, { method: 'post', action: '/auth/profile' });\n  };\n\n  // Determine loading states\n  const isAddingPasskey = addFetcher.state === 'submitting' || isRegistering || (optionsFetcher.state !== 'idle' && pendingAction?.type === 'add');\n\n  const isRenamingPasskey = renameFetcher.state === 'submitting';\n  const isDeletingPasskey = (id: string) => deleteFetcher.state === 'submitting' && deleteFetcher.formData?.get('authenticatorId') === id;\n\n  return (\n    <Card>\n      <Card.Header>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <Card.Title className=\"flex items-center gap-2\">Passkeys</Card.Title>\n            <Card.Description>Security keys and devices used to sign in to your account</Card.Description>\n          </div>\n          <Button onClick={handleAddPasskey} disabled={isAddingPasskey || authenticators.length >= 10 || (isClient && !isWebAuthnSupported())} size=\"sm\">\n            <Spinner className={clsx('mr-1 size-4', !isAddingPasskey && 'hidden')} />\n            {isAddingPasskey ? (isRegistering ? 'Setting up...' : 'Adding...') : 'Add Passkey'}\n          </Button>\n        </div>\n      </Card.Header>\n\n      <Card.Content>\n        {/* WebAuthn error display */}\n        {webAuthnError && (\n          <div className=\"mb-4 rounded-lg border border-red-200 bg-red-50 p-3\">\n            <p className=\"font-medium text-red-800 text-sm\">Registration Failed</p>\n            <p className=\"mt-1 text-red-600 text-xs\">{webAuthnError}</p>\n          </div>\n        )}\n\n        {/* Registration in progress indicator */}\n        {isRegistering && (\n          <div className=\"mb-4 rounded-lg border border-blue-200 bg-blue-50 p-3 text-blue-700 text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <Spinner className=\"size-4\" />\n              <span>Please set up your authenticator...</span>\n            </div>\n            <p className=\"mt-1 text-xs\">Follow the prompts to create a passkey on your device.</p>\n          </div>\n        )}\n\n        {authenticators.length === 0 ? (\n          <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n            <h4 className=\"mb-2 font-medium text-muted-foreground\">No passkeys registered</h4>\n            <p className=\"max-w-sm text-muted-foreground text-sm\">Add a security key or biometric device to secure your account</p>\n          </div>\n        ) : (\n          <div className=\"space-y-3\">\n            {authenticators.map(auth => (\n              <div key={auth.id} className=\"rounded-lg border p-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      {editingId === auth.id ? (\n                        <div className=\"flex items-center gap-2\">\n                          <Input value={editingName} onChange={(e: React.ChangeEvent<HTMLInputElement>) => setEditingName(e.target.value)} className=\"h-8 w-48\" placeholder=\"Enter passkey name\" />\n                          <Button size=\"sm\" onClick={handleSaveEdit} disabled={isRenamingPasskey}>\n                            {isRenamingPasskey ? 'Saving...' : 'Save'}\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" onClick={handleCancelEdit}>\n                            Cancel\n                          </Button>\n                        </div>\n                      ) : (\n                        <>\n                          <h4 className=\"font-medium text-sm\">{auth.name}</h4>\n                          <span className=\"text-muted-foreground text-xs\">â¢</span>\n                          <p className=\"text-muted-foreground text-xs uppercase\">{auth.credentialDeviceType}</p>\n                          {auth.credentialBackedUp && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              Synced\n                            </Badge>\n                          )}\n                        </>\n                      )}\n                    </div>\n\n                    {editingId !== auth.id && (\n                      <div className=\"flex items-center gap-1\">\n                        <Button size=\"sm\" variant=\"ghost\" onClick={() => handleStartEdit(auth)} className=\"h-8 px-2\">\n                          Edit\n                        </Button>\n                        <AlertDialog>\n                          <AlertDialog.Trigger asChild>\n                            <Button size=\"sm\" variant=\"ghost\" className=\"h-8 px-2 text-destructive hover:text-destructive\" disabled={authenticators.length <= 1 || isDeletingPasskey(auth.id)}>\n                              {isDeletingPasskey(auth.id) ? 'Deleting...' : 'Delete'}\n                            </Button>\n                          </AlertDialog.Trigger>\n                          <AlertDialog.Content>\n                            <AlertDialog.Header>\n                              <AlertDialog.Title>Delete Passkey</AlertDialog.Title>\n                              <AlertDialog.Description asChild>\n                                <div>\n                                  <p>Are you sure you want to delete \"{auth.name}\"? This action cannot be undone.</p>\n                                  {authenticators.length <= 1 && <p className=\"mt-2 text-destructive text-sm\">You cannot delete your last passkey as it would lock you out of your account.</p>}\n                                </div>\n                              </AlertDialog.Description>\n                            </AlertDialog.Header>\n                            <AlertDialog.Footer>\n                              <AlertDialog.Cancel>Cancel</AlertDialog.Cancel>\n                              <AlertDialog.Action onClick={() => handleDeletePasskey(auth.id)} className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\">\n                                Delete Passkey\n                              </AlertDialog.Action>\n                            </AlertDialog.Footer>\n                          </AlertDialog.Content>\n                        </AlertDialog>\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"flex flex-wrap gap-1\">\n                    {auth.transports.map(transport => (\n                      <Badge key={transport} variant=\"secondary\" className=\"text-xs\">\n                        {transport.toUpperCase()}\n                      </Badge>\n                    ))}\n                  </div>\n\n                  <div className=\"flex justify-between text-muted-foreground text-xs\">\n                    <span className=\"flex items-center gap-1\">\n                      <Label>Added:</Label>\n                      <DateFormat.Medium date={auth.createdAt} />\n                    </span>\n                    {auth.lastUsedAt ? (\n                      <span className=\"flex items-center gap-1\">\n                        <Label>Last used:</Label>\n                        <DateFormat.Medium date={auth.lastUsedAt} />\n                      </span>\n                    ) : (\n                      <span>Never used</span>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {authenticators.length >= 10 && (\n          <div className=\"mt-4 rounded-lg bg-muted p-3\">\n            <p className=\"text-muted-foreground text-sm\">You have reached the maximum limit of 10 passkeys. Delete an existing passkey to add a new one.</p>\n          </div>\n        )}\n      </Card.Content>\n    </Card>\n  );\n}\n\nexport function ProfilePage({ children }: ProfilePageProps) {\n  return (\n    <div className=\"mx-auto max-w-2xl px-4 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"font-bold text-2xl tracking-tight\">Account Settings</h1>\n        <p className=\"text-muted-foreground\">Manage your account information and security settings</p>\n      </div>\n\n      <div className=\"space-y-6\">{children}</div>\n    </div>\n  );\n}\n",
    "function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f)}else for(f in e)e[f]&&(n&&(n+=\" \"),n+=f);return n}export function clsx(){for(var e,t,f=0,n=\"\",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;",
    "import { decodeBase64url } from '@oslojs/encoding';\n\n/**\n * Helper function to convert serialized ArrayBuffer back to ArrayBuffer\n *\n * Handles multiple input formats:\n * - Native ArrayBuffer (passthrough)\n * - Serialized object format: {\"0\": byte, \"1\": byte, ...}\n * - Base64url encoded string\n */\nexport function arrayBufferFromObject(obj: any): ArrayBuffer {\n  if (obj instanceof ArrayBuffer) {\n    return obj;\n  }\n\n  // Handle serialized ArrayBuffer format: {\"0\": byte, \"1\": byte, ...}\n  if (typeof obj === 'object' && obj !== null) {\n    const keys = Object.keys(obj);\n    // Check if it looks like a serialized ArrayBuffer (numeric keys)\n    if (keys.length > 0 && keys.every(key => /^\\d+$/.test(key))) {\n      const bytes = Object.values(obj) as number[];\n      const uint8Array = new Uint8Array(bytes);\n      // Create a new ArrayBuffer and copy the data to ensure it's an ArrayBuffer, not SharedArrayBuffer\n      const buffer = new ArrayBuffer(uint8Array.length);\n      new Uint8Array(buffer).set(uint8Array);\n      return buffer;\n    }\n  }\n\n  // If it's a string, assume it's base64url encoded\n  if (typeof obj === 'string') {\n    const uint8Array = decodeBase64url(obj);\n    const buffer = new ArrayBuffer(uint8Array.length);\n    new Uint8Array(buffer).set(uint8Array);\n    return buffer;\n  }\n\n  // If conversion fails, create empty buffer (will handle below)\n  return new ArrayBuffer(0);\n}\n\n/**\n * Convert server-generated WebAuthn options to browser-compatible format\n *\n * Key transformations:\n * - Reconstructs ArrayBuffer from base64url challenge string\n * - Converts user.id from serialized to ArrayBuffer\n * - Processes excludeCredentials with proper ArrayBuffer IDs\n */\nexport function convertServerOptionsToWebAuthn(serverOptions: any, challengeString: string): PublicKeyCredentialCreationOptions {\n  // Use the challenge string from the response root, not from options\n  const challengeUint8Array = decodeBase64url(challengeString);\n  const challengeBuffer = new ArrayBuffer(challengeUint8Array.length);\n  new Uint8Array(challengeBuffer).set(challengeUint8Array);\n\n  return {\n    ...serverOptions,\n    challenge: challengeBuffer,\n    user: {\n      ...serverOptions.user,\n      id: arrayBufferFromObject(serverOptions.user.id),\n    },\n    excludeCredentials:\n      serverOptions.excludeCredentials?.map((cred: any) => ({\n        ...cred,\n        id: arrayBufferFromObject(cred.id),\n      })) || [],\n  };\n}\n\n/**\n * Convert WebAuthn credential from browser to server-compatible format\n *\n * Transforms credential data from browser's binary ArrayBuffer format\n * into a JSON-serializable format suitable for server processing and\n * database storage.\n */\nexport function convertWebAuthnCredentialToStorage(credential: {\n  id: string;\n  rawId: string;\n  response: {\n    attestationObject: string;\n    clientDataJSON: string;\n    transports?: string[];\n  };\n  authenticatorAttachment?: string | null;\n}): {\n  id: string;\n  rawId: ArrayBufferLike;\n  response: {\n    attestationObject: ArrayBufferLike;\n    clientDataJSON: ArrayBufferLike;\n    transports?: AuthenticatorTransport[];\n  };\n  type: 'public-key';\n  authenticatorAttachment?: AuthenticatorAttachment | null;\n} {\n  // Convert base64url strings to ArrayBuffers\n  const rawIdUint8Array = decodeBase64url(credential.rawId);\n  const rawIdBuffer = new ArrayBuffer(rawIdUint8Array.length);\n  new Uint8Array(rawIdBuffer).set(rawIdUint8Array);\n\n  const attestationUint8Array = decodeBase64url(credential.response.attestationObject);\n  const attestationBuffer = new ArrayBuffer(attestationUint8Array.length);\n  new Uint8Array(attestationBuffer).set(attestationUint8Array);\n\n  const clientDataUint8Array = decodeBase64url(credential.response.clientDataJSON);\n  const clientDataBuffer = new ArrayBuffer(clientDataUint8Array.length);\n  new Uint8Array(clientDataBuffer).set(clientDataUint8Array);\n\n  return {\n    id: credential.id,\n    rawId: rawIdBuffer as ArrayBufferLike,\n    response: {\n      attestationObject: attestationBuffer as ArrayBufferLike,\n      clientDataJSON: clientDataBuffer as ArrayBufferLike,\n      transports: credential.response?.transports as AuthenticatorTransport[] | undefined,\n    },\n    type: 'public-key' as const,\n    authenticatorAttachment: credential.authenticatorAttachment as AuthenticatorAttachment | null | undefined,\n  };\n}\n",
    "import { encodeBase64url } from '@oslojs/encoding';\n\nimport type { WebAuthnCredentialResponse } from '../@types/auth.component.types';\n\n/**\n * WebAuthn error messages mapped by error name\n * Following functional programming pattern: Map over Switch\n */\nconst WEBAUTHN_REGISTRATION_ERROR_MESSAGES = new Map<string, string>([\n  ['NotAllowedError', 'Registration was cancelled or timed out. Please try again.'],\n  ['InvalidStateError', 'This authenticator is already registered. Please try a different device.'],\n  ['NotSupportedError', 'This authenticator is not supported. Please try a different device.'],\n  ['SecurityError', 'Security error occurred. Please ensure you are on a secure connection.'],\n  ['UnknownError', 'An unknown error occurred during registration. Please try again.'],\n  ['ConstraintError', 'Authenticator constraints not satisfied. Please try a different device.'],\n]);\n\nconst WEBAUTHN_AUTHENTICATION_ERROR_MESSAGES = new Map<string, string>([\n  ['NotAllowedError', 'Authentication was cancelled or timed out. Please try again.'],\n  ['InvalidStateError', 'No authenticator found for this account. Please use a registered device.'],\n  ['NotSupportedError', 'This authenticator is not supported for authentication.'],\n  ['SecurityError', 'Security error occurred. Please ensure you are on a secure connection.'],\n  ['UnknownError', 'An unknown error occurred during authentication. Please try again.'],\n  ['ConstraintError', 'Authenticator constraints not satisfied for authentication.'],\n]);\n\n/**\n * Transform WebAuthn error into user-friendly message; pure function - no side effects\n */\nfunction transformWebAuthnError(error: unknown, errorMessages: Map<string, string>, defaultMessage: string): Error {\n  if (!(error instanceof Error)) {\n    return new Error(defaultMessage);\n  }\n\n  const message = errorMessages.get(error.name) ?? `${defaultMessage}: ${error.message}`;\n  return new Error(message);\n}\n\n/**\n * Convert attestation response to credential response format - handles credential transformation\n */\nfunction convertAttestationResponse(credential: PublicKeyCredential): WebAuthnCredentialResponse {\n  const response = credential.response as AuthenticatorAttestationResponse;\n  const transports = response.getTransports ? response.getTransports() : [];\n  const authenticatorAttachment = credential.authenticatorAttachment as AuthenticatorAttachment | null;\n\n  return {\n    id: credential.id,\n    rawId: encodeBase64url(new Uint8Array(credential.rawId)),\n    type: credential.type,\n    authenticatorAttachment,\n    response: {\n      attestationObject: encodeBase64url(new Uint8Array(response.attestationObject)),\n      clientDataJSON: encodeBase64url(new Uint8Array(response.clientDataJSON)),\n      transports: transports as AuthenticatorTransport[],\n    },\n  };\n}\n\n/**\n * Convert assertion response to credential response format - handles credential transformation\n */\nfunction convertAssertionResponse(credential: PublicKeyCredential): WebAuthnCredentialResponse {\n  const response = credential.response as AuthenticatorAssertionResponse;\n\n  return {\n    id: credential.id,\n    rawId: encodeBase64url(new Uint8Array(credential.rawId)),\n    type: credential.type,\n    response: {\n      authenticatorData: encodeBase64url(new Uint8Array(response.authenticatorData)),\n      clientDataJSON: encodeBase64url(new Uint8Array(response.clientDataJSON)),\n      signature: encodeBase64url(new Uint8Array(response.signature)),\n      userHandle: response.userHandle ? encodeBase64url(new Uint8Array(response.userHandle)) : undefined,\n    },\n  };\n}\n\n/**\n * Client-side WebAuthn registration with enhanced error handling\n */\nexport async function startRegistration(options: PublicKeyCredentialCreationOptions): Promise<WebAuthnCredentialResponse> {\n  try {\n    const credential = (await navigator.credentials.create({ publicKey: options })) as PublicKeyCredential;\n\n    if (!credential?.response) {\n      throw new Error('Failed to create credential');\n    }\n\n    return convertAttestationResponse(credential);\n  } catch (error) {\n    throw transformWebAuthnError(error, WEBAUTHN_REGISTRATION_ERROR_MESSAGES, 'Registration failed with an unknown error');\n  }\n}\n\n/**\n * Client-side WebAuthn authentication with enhanced error handling\n */\nexport async function startAuthentication(options: PublicKeyCredentialRequestOptions): Promise<WebAuthnCredentialResponse> {\n  try {\n    const credential = (await navigator.credentials.get({\n      publicKey: options,\n    })) as PublicKeyCredential;\n\n    if (!credential?.response) {\n      throw new Error('Failed to get credential');\n    }\n\n    return convertAssertionResponse(credential);\n  } catch (error) {\n    throw transformWebAuthnError(error, WEBAUTHN_AUTHENTICATION_ERROR_MESSAGES, 'Authentication failed with an unknown error');\n  }\n}\n\n/**\n * Check if WebAuthn is supported\n */\nexport function isWebAuthnSupported(): boolean {\n  return !!(typeof window !== 'undefined' && window.PublicKeyCredential && navigator?.credentials && typeof navigator.credentials.create === 'function' && typeof navigator.credentials.get === 'function');\n}\n\n/**\n * Check if platform authenticator is available\n */\nexport async function isPlatformAuthenticatorAvailable(): Promise<boolean> {\n  if (!isWebAuthnSupported()) {\n    return false;\n  }\n\n  try {\n    return await window.PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Get browser capabilities for WebAuthn\n */\nexport async function getBrowserCapabilities(): Promise<{ webauthnSupported: boolean; platformAuthenticatorAvailable: boolean; conditionalMediationSupported: boolean; }> {\n  const webauthnSupported = isWebAuthnSupported();\n  const platformAuthenticatorAvailable = webauthnSupported ? await isPlatformAuthenticatorAvailable() : false;\n\n  let conditionalMediationSupported = false;\n  if (webauthnSupported && 'PublicKeyCredential' in window) {\n    try {\n      // Check if conditional mediation is supported (for passkey autofill)\n      conditionalMediationSupported = await window.PublicKeyCredential.isConditionalMediationAvailable();\n    } catch {\n      conditionalMediationSupported = false;\n    }\n  }\n\n  return { webauthnSupported, platformAuthenticatorAvailable, conditionalMediationSupported };\n}\n\n/**\n * Get user-friendly error message for WebAuthn operations\n */\nexport function getWebAuthnErrorMessage(error: Error, operation: 'registration' | 'authentication'): string {\n  const operationText = operation === 'registration' ? 'add a passkey' : 'sign in';\n\n  // Map of message patterns to user-friendly messages\n  const messagePatterns = new Map<string, string>([\n    ['cancelled', `The ${operationText} process was cancelled or timed out. Please try again.`],\n    ['timed out', `The ${operationText} process was cancelled or timed out. Please try again.`],\n    ['already registered', 'This device is already registered. Please try a different device.'],\n    ['not supported', `This device or browser doesn't support the required security features. Please try a different device.`],\n    ['Security error', 'Please ensure you are using a secure connection (HTTPS) and try again.'],\n  ]);\n\n  for (const [pattern, message] of messagePatterns) {\n    if (error.message.includes(pattern)) {\n      return message;\n    }\n  }\n\n  // Fallback to original error message\n  return `Failed to ${operationText}. ${error.message}`;\n}\n",
    "import { Button, Card, Input, Link, Spinner, SvgIcon } from '@ycore/componentry/vibrant';\nimport { isError } from '@ycore/forge/result';\nimport { FormError, FormField, SecureForm, SecureProvider } from '@ycore/foundry/secure';\nimport clsx from 'clsx';\nimport * as React from 'react';\nimport { useActionData, useLoaderData, useNavigation, useSubmit } from 'react-router';\nimport type { SignInFormProps, SignInPageProps } from '../@types/auth.component.types';\nimport { createAuthenticationOptions } from '../services/webauthn';\nimport { isPlatformAuthenticatorAvailable, isWebAuthnSupported, startAuthentication } from './webauthn-client';\n\nexport function SignInForm({ signupUrl }: SignInFormProps) {\n  const navigation = useNavigation();\n  const actionData = useActionData<any>();\n  const loaderData = useLoaderData<any>();\n  const submit = useSubmit();\n  const isSubmitting = navigation.state === 'submitting';\n  const errors = actionData?.success === false ? actionData.error?.details || {} : {};\n  const [webAuthnSupported, setWebAuthnSupported] = React.useState(false);\n  const [webAuthnError, setWebAuthnError] = React.useState<string | null>(null);\n  const [isAuthenticating, setIsAuthenticating] = React.useState(false);\n  const [platformAuthAvailable, setPlatformAuthAvailable] = React.useState(false);\n  const abortControllerRef = React.useRef<AbortController | null>(null);\n\n  React.useEffect(() => {\n    const checkWebAuthn = async () => {\n      const supported = isWebAuthnSupported();\n      setWebAuthnSupported(supported);\n\n      if (supported) {\n        // Check if platform authenticator is available\n        const isPlatformAvailable = await isPlatformAuthenticatorAvailable();\n        setPlatformAuthAvailable(isPlatformAvailable);\n      }\n    };\n\n    checkWebAuthn();\n  }, []);\n\n  React.useEffect(() => {\n    // Cleanup on unmount\n    return () => {\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n    };\n  }, []);\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setWebAuthnError(null);\n\n    const form = event.currentTarget;\n    const formData = new FormData(form);\n    const email = formData.get('email')?.toString();\n\n    if (!email) {\n      setWebAuthnError('Email is required');\n      return;\n    }\n\n    if (!webAuthnSupported) {\n      setWebAuthnError('WebAuthn is not supported on this device');\n      return;\n    }\n\n    if (!loaderData?.challenge) {\n      setWebAuthnError('Session expired. Please refresh the page.');\n      return;\n    }\n\n    try {\n      setIsAuthenticating(true);\n      setWebAuthnError(null);\n\n      // Create AbortController for this operation\n      abortControllerRef.current = new AbortController();\n\n      // Create authentication options\n      const options = createAuthenticationOptions(\n        window.location.hostname,\n        loaderData.challenge,\n        [] // Will be populated server-side in the future\n      );\n\n      // Create timeout promise\n      const timeoutPromise = new Promise<never>((_, reject) => {\n        const timeoutId = setTimeout(() => {\n          reject(new Error('Authentication timed out. Please try again.'));\n        }, 60000);\n\n        // Clear timeout if aborted\n        abortControllerRef.current?.signal.addEventListener('abort', () => {\n          clearTimeout(timeoutId);\n        });\n      });\n\n      // Race between WebAuthn authentication and timeout\n      const credential = await Promise.race([startAuthentication(options), timeoutPromise]);\n\n      // Check if still mounted and not aborted\n      if (abortControllerRef.current?.signal.aborted) {\n        return;\n      }\n\n      // Create new FormData with WebAuthn response\n      const submitFormData = new FormData(form);\n      submitFormData.append('webauthn_response', JSON.stringify(credential));\n      submitFormData.append('intent', 'signin');\n\n      // Submit using React Router's submit function\n      submit(submitFormData, { method: 'post' });\n    } catch (error) {\n      // Check if component is still mounted and operation wasn't aborted\n      if (abortControllerRef.current?.signal.aborted) {\n        return;\n      }\n\n      setIsAuthenticating(false);\n\n      // Provide more specific error messages\n      let errorMessage = 'Authentication failed';\n      if (error instanceof Error) {\n        if (error.message.includes('cancelled')) {\n          errorMessage = 'Authentication was cancelled. Please try again when ready.';\n        } else if (error.message.includes('timed out')) {\n          errorMessage = error.message; // Use the timeout message directly\n        } else if (error.message.includes('not found')) {\n          errorMessage = 'No authenticator found for this account. Please sign up first.';\n        } else {\n          errorMessage = error.message;\n        }\n      }\n      setWebAuthnError(errorMessage);\n    }\n  };\n\n  return (\n    <SecureForm method=\"post\" onSubmit={handleSubmit} className=\"flex flex-col gap-6\">\n      <FormField label=\"Email\" error={errors.email}>\n        <Input name=\"email\" type=\"email\" placeholder=\"Enter your email\" autoComplete=\"email webauthn\" required autoFocus />\n      </FormField>\n\n      {(errors.form || webAuthnError) && <FormError error={errors.form || webAuthnError} />}\n\n      {/* WebAuthn status indicator */}\n      {webAuthnSupported && (\n        <div className=\"text-muted-foreground text-sm\">\n          {platformAuthAvailable ? (\n            <span className=\"flex items-center gap-2\">\n              <SvgIcon iconId=\"CircleCheck\" className=\"h-4 w-4 text-green-500\" />\n              Platform authenticator available\n            </span>\n          ) : (\n            <span className=\"flex items-center gap-2\">\n              <SvgIcon iconId=\"CircleAlert\" className=\"h-4 w-4 text-yellow-500\" />\n              External security key may be required\n            </span>\n          )}\n        </div>\n      )}\n\n      {/* Authentication in progress indicator */}\n      {isAuthenticating && (\n        <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-3 text-blue-700 text-sm\">\n          <div className=\"flex items-center gap-2\">\n            <Spinner className=\"size-4\" />\n            <span>Please interact with your authenticator...</span>\n          </div>\n          <p className=\"mt-1 text-xs\">Touch your security key or approve the prompt on your device.</p>\n        </div>\n      )}\n\n      <div className=\"flex justify-between gap-x-2\">\n        <Button type=\"submit\" name=\"intent\" value=\"signin\" disabled={isSubmitting || isAuthenticating || !webAuthnSupported} className=\"flex-1\">\n          <Spinner className={clsx('size-5', !(isSubmitting || isAuthenticating) && 'hidden')} />\n          {isSubmitting || isAuthenticating ? 'Authenticating...' : !webAuthnSupported ? 'WebAuthn not supported' : 'Sign in with Passkey'}\n        </Button>\n\n        <Button type=\"button\" variant=\"outline\" asChild disabled={isSubmitting || isAuthenticating}>\n          <Link href={signupUrl}>Sign Up</Link>\n        </Button>\n      </div>\n    </SecureForm>\n  );\n}\n\nexport function SignInPage({ loaderData, children, title = 'Sign In', description = 'Sign in to your account with your passkey' }: SignInPageProps) {\n  const token = isError(loaderData) ? '' : (loaderData?.token ?? '');\n\n  return (\n    <SecureProvider token={token}>\n      <div className=\"mx-auto min-w-md max-w-lg px-4 py-8\">\n        <Card>\n          <Card.Header>\n            <Card.Title>{title}</Card.Title>\n            <Card.Description>{description}</Card.Description>\n          </Card.Header>\n          <Card.Content>{children}</Card.Content>\n        </Card>\n      </div>\n    </SecureProvider>\n  );\n}\n",
    "import { decodePKIXECDSASignature, ECDSAPublicKey, p256, verifyECDSASignature } from '@oslojs/crypto/ecdsa';\nimport { sha256 } from '@oslojs/crypto/sha2';\nimport { decodeBase64url, encodeBase64url } from '@oslojs/encoding';\nimport { ClientDataType, COSEKeyType, createAssertionSignatureMessage, parseAttestationObject, parseAuthenticatorData, parseClientDataJSON } from '@oslojs/webauthn';\nimport { logger } from '@ycore/forge/logger';\nimport { err, type Result } from '@ycore/forge/result';\n\nimport type { DeviceInfo, EnhancedDeviceInfo, WebAuthnAuthenticationData, WebAuthnRegistrationData } from '../@types/auth.types';\nimport { ATTESTATION_FORMAT_HANDLERS, ATTESTATION_TYPES, AUTHENTICATOR_FLAGS, convertAAGUIDToUUID, DEFAULT_DEVICE_INFO, isAAGUIDAllZeros, WEBAUTHN_ALGORITHMS, WEBAUTHN_CONFIG, WEBAUTHN_ERROR_MESSAGES, WebAuthnErrorCode } from '../auth.constants';\nimport type { Authenticator as AuthenticatorModel } from '../schema';\n\n/**\n * Helper function to convert Uint8Array to ArrayBuffer\n * This ensures we get a proper ArrayBuffer instead of SharedArrayBuffer\n */\nfunction toArrayBuffer(uint8Array: Uint8Array): ArrayBuffer {\n  const buffer = new ArrayBuffer(uint8Array.byteLength);\n  new Uint8Array(buffer).set(uint8Array);\n  return buffer;\n}\n\n/**\n * Extract backup state from authenticator data flags\n */\nfunction extractBackupState(authenticatorData: any): { isBackupEligible: boolean; isBackedUp: boolean } {\n  const flags = authenticatorData.flags || 0;\n\n  const isBackupEligible = (flags & AUTHENTICATOR_FLAGS.BACKUP_ELIGIBLE) !== 0;\n  const isBackedUp = (flags & AUTHENTICATOR_FLAGS.BACKUP_STATE) !== 0;\n\n  return { isBackupEligible, isBackedUp };\n}\n\n/**\n * Extract transport methods based on device characteristics\n */\nfunction extractTransportMethods(deviceInfo: DeviceInfo): string[] {\n  return [...deviceInfo.transports];\n}\n\n/**\n * Extract attestation type from attestation object using command pattern\n */\nfunction extractAttestationType(attestationObject: any): string {\n  try {\n    const fmt = attestationObject.fmt;\n    const attStmt = attestationObject.attStmt;\n\n    const handler = ATTESTATION_FORMAT_HANDLERS.get(fmt);\n    if (handler) {\n      return handler(attStmt);\n    }\n\n    logger.warning('webauthn_unknown_attestation_format', { format: fmt });\n    return ATTESTATION_TYPES.NONE;\n  } catch (error) {\n    logger.error('webauthn_attestation_extraction_error', {\n      error: error instanceof Error ? error.message : 'Unknown error',\n    });\n    return ATTESTATION_TYPES.NONE;\n  }\n}\n\n/**\n * Generate a default friendly name for an authenticator\n */\nfunction generateDefaultAuthenticatorName(deviceInfo: DeviceInfo): string {\n  // If we have specific vendor/model info, use it\n  if (deviceInfo.vendor !== 'Unknown' && deviceInfo.model !== 'Security Key' && deviceInfo.model !== 'Device') {\n    return `${deviceInfo.vendor} ${deviceInfo.model}`;\n  }\n\n  // Fall back to generic names with timestamp\n  const deviceType = deviceInfo.type === 'platform' ? 'Biometric Device' : 'Security Key';\n  const timestamp = new Date().toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n  });\n\n  return `${deviceType} (${timestamp})`;\n}\n\n/**\n * Get comprehensive device information by AAGUID with KV lookup and fallback\n */\nasync function getDeviceInfoByAAGUID(aaguid: Uint8Array, metadataKV?: KVNamespace): Promise<DeviceInfo> {\n  // If AAGUID is all zeros, it's likely a platform authenticator\n  if (isAAGUIDAllZeros(aaguid)) {\n    return DEFAULT_DEVICE_INFO.platform;\n  }\n\n  const uuid = convertAAGUIDToUUID(aaguid);\n\n  // Try KV lookup first (MDS data)\n  if (metadataKV) {\n    try {\n      const mdsData = await metadataKV.get(`device:${uuid}`, 'json');\n      if (mdsData) {\n        logger.debug('device_info_mds_hit', { uuid });\n        return mdsData as EnhancedDeviceInfo;\n      }\n    } catch (error) {\n      logger.warning('device_info_kv_lookup_failed', {\n        uuid,\n        error: error instanceof Error ? error.message : 'Unknown',\n      });\n    }\n  }\n\n  // Fallback to default\n  logger.debug('device_info_fallback', { uuid });\n  return DEFAULT_DEVICE_INFO['cross-platform'];\n}\n\nexport function getWebAuthnErrorMessage(code: WebAuthnErrorCode | undefined, operation: 'registration' | 'authentication'): string {\n  if (!code) {\n    return WEBAUTHN_ERROR_MESSAGES.get(WebAuthnErrorCode.DEFAULT)?.(operation) || 'Auth failure. Please try again.';\n  }\n\n  const messageResolver = WEBAUTHN_ERROR_MESSAGES.get(code);\n  return messageResolver ? messageResolver(operation) : WEBAUTHN_ERROR_MESSAGES.get(WebAuthnErrorCode.DEFAULT)?.(operation) || 'Auth failure. Please try again.';\n}\n\n/**\n * Generate a cryptographically secure challenge\n */\nexport function generateChallenge(): string {\n  const bytes = new Uint8Array(WEBAUTHN_CONFIG.CHALLENGE_SIZE);\n  crypto.getRandomValues(bytes);\n  return encodeBase64url(bytes);\n}\n\n/**\n * Generate a unique user ID\n */\nexport function generateUserId(): string {\n  const bytes = new Uint8Array(WEBAUTHN_CONFIG.USER_ID_SIZE);\n  crypto.getRandomValues(bytes);\n  return encodeBase64url(bytes);\n}\n\n/**\n * Create WebAuthn registration options\n */\nexport function createRegistrationOptions(\n  rpName: string,\n  rpId: string,\n  userName: string,\n  userDisplayName: string,\n  challenge: string,\n  excludeCredentials: Array<{ id: string; transports?: AuthenticatorTransport[] }> = []\n): PublicKeyCredentialCreationOptions {\n  return {\n    challenge: toArrayBuffer(decodeBase64url(challenge)),\n    rp: {\n      name: rpName,\n      id: rpId,\n    },\n    user: {\n      id: toArrayBuffer(decodeBase64url(generateUserId())),\n      name: userName,\n      displayName: userDisplayName,\n    },\n    pubKeyCredParams: [\n      { alg: WEBAUTHN_ALGORITHMS.ES256, type: 'public-key' },\n      { alg: WEBAUTHN_ALGORITHMS.RS256, type: 'public-key' },\n    ],\n    timeout: WEBAUTHN_CONFIG.CHALLENGE_TIMEOUT,\n    attestation: 'none',\n    excludeCredentials: excludeCredentials.map(cred => ({\n      id: toArrayBuffer(decodeBase64url(cred.id)),\n      type: 'public-key' as PublicKeyCredentialType,\n      // Use actual transports if available, otherwise omit (let browser decide)\n      ...(cred.transports && cred.transports.length > 0 ? { transports: cred.transports } : {}),\n    })),\n    authenticatorSelection: {\n      residentKey: 'discouraged',\n      requireResidentKey: false,\n      userVerification: 'preferred',\n    },\n  };\n}\n\n/**\n * Create WebAuthn authentication options\n */\nexport function createAuthenticationOptions(rpId: string, challenge: string, allowCredentials: Array<{ id: string; transports?: AuthenticatorTransport[] }> = []): PublicKeyCredentialRequestOptions {\n  return {\n    challenge: toArrayBuffer(decodeBase64url(challenge)),\n    rpId,\n    timeout: WEBAUTHN_CONFIG.CHALLENGE_TIMEOUT,\n    userVerification: 'preferred',\n    allowCredentials:\n      allowCredentials.length > 0\n        ? allowCredentials.map(cred => ({\n          id: toArrayBuffer(decodeBase64url(cred.id)),\n          type: 'public-key' as PublicKeyCredentialType,\n          // Use actual transports if available, otherwise omit (let browser decide)\n          ...(cred.transports && cred.transports.length > 0 ? { transports: cred.transports } : {}),\n        }))\n        : [],\n  };\n}\n\n/**\n * Verify registration response using Oslo WebAuthn\n */\nexport async function verifyRegistration(\n  credential: WebAuthnRegistrationData,\n  expectedChallenge: string,\n  expectedOrigin: string,\n  expectedRPID: string,\n  metadataKV?: KVNamespace\n): Promise<Result<Omit<AuthenticatorModel, 'userId' | 'createdAt' | 'updatedAt'>>> {\n  try {\n    // Parse attestation object\n    const attestationObject = await parseAttestationObject(new Uint8Array(credential.response.attestationObject));\n    const { authenticatorData } = attestationObject;\n\n    // Parse client data\n    const clientData = parseClientDataJSON(new Uint8Array(credential.response.clientDataJSON));\n\n    // Verify challenge - convert Uint8Array to base64url for comparison\n    const receivedChallenge = encodeBase64url(new Uint8Array(clientData.challenge));\n    if (receivedChallenge !== expectedChallenge) {\n      return err('Invalid challenge', {\n        field: 'challenge',\n        code: WebAuthnErrorCode.INVALID_CHALLENGE,\n      });\n    }\n\n    // Verify origin\n    if (clientData.origin !== expectedOrigin) {\n      return err('Invalid origin', {\n        field: 'origin',\n        code: WebAuthnErrorCode.INVALID_ORIGIN,\n      });\n    }\n\n    // Verify type\n    if (clientData.type !== ClientDataType.Create) {\n      return err('Invalid request type', {\n        field: 'type',\n        code: WebAuthnErrorCode.INVALID_CREDENTIAL,\n      });\n    }\n\n    // Verify RP ID hash\n    if (!authenticatorData.verifyRelyingPartyIdHash(expectedRPID)) {\n      return err('Invalid relying party', {\n        field: 'rpId',\n        code: WebAuthnErrorCode.INVALID_RPID,\n      });\n    }\n\n    // Verify user presence\n    if (!authenticatorData.userPresent) {\n      return err('User presence required', {\n        field: 'userPresence',\n        code: WebAuthnErrorCode.USER_NOT_PRESENT,\n      });\n    }\n\n    // Extract credential\n    const attestedCredential = authenticatorData.credential;\n    if (!attestedCredential) {\n      return err('No credential found', {\n        field: 'credential',\n        code: WebAuthnErrorCode.INVALID_CREDENTIAL,\n      });\n    }\n\n    // Verify supported algorithm - we only support ES256 (ECDSA with P-256)\n    const publicKey = attestedCredential.publicKey;\n    if (publicKey.type() !== COSEKeyType.EC2) {\n      return err('Only ES256 algorithm is supported', {\n        field: 'keyType',\n        code: WebAuthnErrorCode.UNSUPPORTED_ALGORITHM,\n      });\n    }\n\n    // Verify it's using ES256 algorithm\n    const publicKeyAlgorithm = publicKey.algorithm();\n    if (publicKeyAlgorithm !== WEBAUTHN_ALGORITHMS.ES256) {\n      return err('Only ES256 algorithm is supported', {\n        field: 'algorithm',\n        code: WebAuthnErrorCode.UNSUPPORTED_ALGORITHM,\n      });\n    }\n\n    // Store the public key's decoded object as JSON (we'll reconstruct it during verification)\n    // This approach maintains the complete COSE key structure\n    const credentialPublicKey = encodeBase64url(new TextEncoder().encode(JSON.stringify(attestedCredential.publicKey.decoded)));\n\n    // Use actual transports from the credential if available, otherwise fall back to device info\n    let transports: string[] = [];\n    if (credential.response.transports && credential.response.transports.length > 0) {\n      // Use the actual transports reported by the authenticator\n      transports = credential.response.transports;\n      logger.debug('webauthn_using_actual_transports', { transports });\n    } else {\n      // Fall back to device info based on AAGUID\n      const deviceInfo = await getDeviceInfoByAAGUID(attestedCredential.authenticatorAAGUID, metadataKV);\n      transports = extractTransportMethods(deviceInfo);\n      logger.debug('webauthn_using_fallback_transports', { transports, source: 'deviceInfo' });\n    }\n\n    // Determine device type from authenticatorAttachment if available\n    let credentialDeviceType: 'platform' | 'cross-platform' = 'cross-platform';\n    if (credential.authenticatorAttachment) {\n      credentialDeviceType = credential.authenticatorAttachment === 'platform' ? 'platform' : 'cross-platform';\n      logger.debug('webauthn_device_type_from_attachment', {\n        authenticatorAttachment: credential.authenticatorAttachment,\n        credentialDeviceType,\n      });\n    } else {\n      // Fall back to AAGUID-based detection\n      const deviceInfo = await getDeviceInfoByAAGUID(attestedCredential.authenticatorAAGUID, metadataKV);\n      credentialDeviceType = deviceInfo.type;\n      logger.debug('webauthn_device_type_from_aaguid', {\n        aaguid: encodeBase64url(attestedCredential.authenticatorAAGUID),\n        credentialDeviceType,\n      });\n    }\n\n    // Get device info for generating a friendly name\n    const deviceInfo = await getDeviceInfoByAAGUID(attestedCredential.authenticatorAAGUID, metadataKV);\n\n    // Extract backup state from authenticator flags\n    const backupState = extractBackupState(authenticatorData);\n\n    // Get algorithm from public key\n    const keyAlgorithm = attestedCredential.publicKey.algorithm();\n\n    // Extract attestation type from attestation object\n    const attestationType = extractAttestationType(attestationObject);\n\n    // Generate a default friendly name based on device info\n    const defaultName = generateDefaultAuthenticatorName(deviceInfo);\n\n    return {\n      id: encodeBase64url(attestedCredential.id),\n      credentialPublicKey,\n      counter: authenticatorData.signatureCounter,\n      credentialDeviceType,\n      credentialBackedUp: backupState.isBackedUp,\n      transports,\n      aaguid: encodeBase64url(attestedCredential.authenticatorAAGUID),\n      name: defaultName,\n      lastUsedAt: null,\n      attestationType,\n      rpId: expectedRPID,\n      algorithm: keyAlgorithm,\n    };\n  } catch (error) {\n    logger.error('webauthn_registration_error', {\n      error: error instanceof Error ? error.message : 'Unknown error',\n    });\n    return err('Registration verification failed', { field: 'general' });\n  }\n}\n\n/**\n * Verify authentication response using Oslo WebAuthn\n */\nexport async function verifyAuthentication(\n  credential: WebAuthnAuthenticationData,\n  expectedChallenge: string,\n  expectedOrigin: string,\n  expectedRPID: string,\n  storedCredential: AuthenticatorModel\n): Promise<Result<{ verified: boolean; newCounter: number }>> {\n  try {\n    // Parse authenticator data\n    const authenticatorData = parseAuthenticatorData(new Uint8Array(credential.response.authenticatorData));\n\n    // Parse client data\n    const clientData = parseClientDataJSON(new Uint8Array(credential.response.clientDataJSON));\n\n    // Verify challenge - convert Uint8Array to base64url for comparison\n    const receivedChallenge = encodeBase64url(new Uint8Array(clientData.challenge));\n    if (receivedChallenge !== expectedChallenge) {\n      return err('Invalid challenge', {\n        field: 'challenge',\n        code: WebAuthnErrorCode.INVALID_CHALLENGE,\n      });\n    }\n\n    // Verify origin\n    if (clientData.origin !== expectedOrigin) {\n      return err('Invalid origin', {\n        field: 'origin',\n        code: WebAuthnErrorCode.INVALID_ORIGIN,\n      });\n    }\n\n    // Verify type\n    if (clientData.type !== ClientDataType.Get) {\n      return err('Invalid request type', {\n        field: 'type',\n        code: WebAuthnErrorCode.INVALID_CREDENTIAL,\n      });\n    }\n\n    // Verify RP ID hash\n    if (!authenticatorData.verifyRelyingPartyIdHash(expectedRPID)) {\n      return err('Invalid relying party', {\n        field: 'rpId',\n        code: WebAuthnErrorCode.INVALID_RPID,\n      });\n    }\n\n    // Verify user presence\n    if (!authenticatorData.userPresent) {\n      return err('User presence required', {\n        field: 'userPresence',\n        code: WebAuthnErrorCode.USER_NOT_PRESENT,\n      });\n    }\n\n    // Verify counter BEFORE signature verification (prevent replay attacks)\n    // If counter is greater than 0, it must be strictly greater than stored counter\n    if (storedCredential.counter > 0 || authenticatorData.signatureCounter > 0) {\n      if (authenticatorData.signatureCounter <= storedCredential.counter) {\n        logger.critical('webauthn_authentication_counter_rollback_detected', {\n          stored: storedCredential.counter,\n          received: authenticatorData.signatureCounter,\n          credentialId: credential.id,\n          userId: storedCredential.userId,\n        });\n        return err('Security violation: Counter rollback detected', {\n          field: 'counter',\n          code: WebAuthnErrorCode.INVALID_COUNTER,\n        });\n      }\n    }\n\n    // Create assertion message for signature verification using Oslo.js utility\n    const signatureMessage = createAssertionSignatureMessage(new Uint8Array(credential.response.authenticatorData), new Uint8Array(credential.response.clientDataJSON));\n\n    // Reconstruct the COSE key from stored JSON\n    let publicKeyData: any;\n    try {\n      // Decode the stored COSE key JSON\n      const storedKeyJson = new TextDecoder().decode(decodeBase64url(storedCredential.credentialPublicKey));\n      publicKeyData = JSON.parse(storedKeyJson);\n\n      if (!publicKeyData) {\n        return err('Invalid stored public key', {\n          field: 'publicKey',\n          code: WebAuthnErrorCode.INVALID_KEY_FORMAT,\n        });\n      }\n    } catch (error) {\n      logger.error('webauthn_authentication_key_parse_error', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      return err('Failed to parse stored public key', {\n        field: 'publicKey',\n        code: WebAuthnErrorCode.INVALID_KEY_FORMAT,\n      });\n    }\n\n    // Verify the signature using ECDSA with P-256\n    try {\n      const signatureBytes = new Uint8Array(credential.response.signature);\n\n      // Extract EC2 key components for ES256 (algorithm -7)\n      // COSE key type 2 (EC2) with curve P-256 (1)\n      // Note: COSE uses negative integers as key labels: -2 for x, -3 for y\n\n      // Parse COSE key structure\n\n      const xCoordinate = publicKeyData[-2]; // x coordinate in COSE key\n      const yCoordinate = publicKeyData[-3]; // y coordinate in COSE key\n\n      if (!xCoordinate || !yCoordinate) {\n        return err('Invalid public key structure', {\n          field: 'publicKey',\n          code: WebAuthnErrorCode.INVALID_KEY_FORMAT,\n        });\n      }\n\n      // Convert coordinates to Uint8Array\n      let xBytes: Uint8Array;\n      let yBytes: Uint8Array;\n\n      try {\n        if (typeof xCoordinate === 'string') {\n          xBytes = decodeBase64url(xCoordinate);\n        } else if (Array.isArray(xCoordinate)) {\n          xBytes = new Uint8Array(xCoordinate);\n        } else if (typeof xCoordinate === 'object' && xCoordinate !== null) {\n          // Handle object format like {\"0\":179,\"1\":124,...}\n          const values = Object.values(xCoordinate) as number[];\n          xBytes = new Uint8Array(values);\n        } else {\n          xBytes = new Uint8Array(xCoordinate);\n        }\n\n        if (typeof yCoordinate === 'string') {\n          yBytes = decodeBase64url(yCoordinate);\n        } else if (Array.isArray(yCoordinate)) {\n          yBytes = new Uint8Array(yCoordinate);\n        } else if (typeof yCoordinate === 'object' && yCoordinate !== null) {\n          // Handle object format like {\"0\":179,\"1\":124,...}\n          const values = Object.values(yCoordinate) as number[];\n          yBytes = new Uint8Array(values);\n        } else {\n          yBytes = new Uint8Array(yCoordinate);\n        }\n      } catch (error) {\n        logger.error('webauthn_authentication_coordinate_decode_error', {\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n        return err('Failed to decode key coordinates', {\n          field: 'publicKey',\n          code: WebAuthnErrorCode.INVALID_KEY_FORMAT,\n        });\n      }\n\n      // Validate coordinate lengths (P-256 coordinates should be 32 bytes each)\n      if (xBytes.length !== WEBAUTHN_CONFIG.COORDINATE_LENGTH || yBytes.length !== WEBAUTHN_CONFIG.COORDINATE_LENGTH) {\n        return err('Invalid coordinate length for P-256 key', {\n          field: 'publicKey',\n          code: WebAuthnErrorCode.INVALID_KEY_FORMAT,\n        });\n      }\n\n      // Convert bytes to bigint for ECDSAPublicKey constructor\n      const xHex = Array.from(xBytes)\n        .map(b => b.toString(16).padStart(2, '0'))\n        .join('');\n      const yHex = Array.from(yBytes)\n        .map(b => b.toString(16).padStart(2, '0'))\n        .join('');\n\n      if (xHex.length === 0 || yHex.length === 0) {\n        return err('Empty coordinate data', {\n          field: 'publicKey',\n          code: WebAuthnErrorCode.INVALID_KEY_FORMAT,\n        });\n      }\n\n      // Ensure coordinates are exactly 64 hex characters (32 bytes)\n      const xHexPadded = xHex.padStart(WEBAUTHN_CONFIG.HEX_COORDINATE_LENGTH, '0');\n      const yHexPadded = yHex.padStart(WEBAUTHN_CONFIG.HEX_COORDINATE_LENGTH, '0');\n\n      const xBigInt = BigInt(`0x${xHexPadded}`);\n      const yBigInt = BigInt(`0x${yHexPadded}`);\n\n      // Convert coordinates for ECDSAPublicKey constructor\n\n      // Create public key using ECDSAPublicKey constructor with P-256 curve\n      const publicKey = new ECDSAPublicKey(p256, xBigInt, yBigInt);\n\n      // Validate that the public key is on the P-256 curve\n      if (!publicKey.isCurve(p256)) {\n        return err('Public key not on P-256 curve', {\n          field: 'publicKey',\n          code: WebAuthnErrorCode.INVALID_KEY_FORMAT,\n        });\n      }\n\n      // Additional validation: try encoding the public key to SEC1 format to verify it's valid\n      try {\n        publicKey.encodeSEC1Uncompressed();\n      } catch (error) {\n        logger.error('webauthn_authentication_public_key_encoding_error', {\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n        return err('Invalid public key encoding', {\n          field: 'publicKey',\n          code: WebAuthnErrorCode.INVALID_KEY_FORMAT,\n        });\n      }\n\n      const messageHash = sha256(signatureMessage);\n\n      // WebAuthn signatures are DER-encoded, we need to decode them first\n      const signature = decodePKIXECDSASignature(signatureBytes);\n      const isValid = verifyECDSASignature(publicKey, messageHash, signature);\n\n      if (!isValid) {\n        return err('Invalid signature', {\n          field: 'signature',\n          code: WebAuthnErrorCode.SIGNATURE_FAILED,\n        });\n      }\n\n    } catch (error) {\n      logger.error('webauthn_authentication_signature_verification_error', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n        credentialId: credential.id,\n      });\n      return err('Signature verification failed', {\n        field: 'signature',\n        code: WebAuthnErrorCode.SIGNATURE_FAILED,\n      });\n    }\n\n    return {\n      verified: true,\n      newCounter: authenticatorData.signatureCounter,\n    };\n  } catch (error) {\n    logger.error('webauthn_authentication_error', {\n      error: error instanceof Error ? error.message : 'Unknown error',\n    });\n    return err('Authentication verification failed', { field: 'general' });\n  }\n}\n",
    "import type { DeviceInfo } from './@types/auth.types';\n\n// WebAuthn Algorithm Constants\nexport const WEBAUTHN_ALGORITHMS = {\n  ES256: -7,\n  RS256: -257,\n} as const;\n\n// WebAuthn Configuration Constants\nexport const WEBAUTHN_CONFIG = {\n  CHALLENGE_TIMEOUT: 60000, // 60 seconds\n  CHALLENGE_SIZE: 32, // 32 bytes\n  USER_ID_SIZE: 16, // 16 bytes\n  COORDINATE_LENGTH: 32, // P-256 coordinates should be 32 bytes each\n  HEX_COORDINATE_LENGTH: 64, // 32 bytes = 64 hex characters\n} as const;\n\n// Transport Methods\nexport const TRANSPORT_METHODS = {\n  INTERNAL: 'internal',\n  HYBRID: 'hybrid',\n  USB: 'usb',\n  NFC: 'nfc',\n  BLE: 'ble',\n  SMART_CARD: 'smart-card',\n} as const;\n\n// Attestation Types\nexport const ATTESTATION_TYPES = {\n  NONE: 'none',\n  BASIC: 'basic',\n  SELF: 'self',\n  ATTCA: 'attca',\n  ECDAA: 'ecdaa',\n} as const;\n\n// Device Types\nexport const DEVICE_TYPES = {\n  PLATFORM: 'platform',\n  CROSS_PLATFORM: 'cross-platform',\n} as const;\n\n// Authenticator Flags (WebAuthn spec bit positions)\nexport const AUTHENTICATOR_FLAGS = {\n  BACKUP_ELIGIBLE: 0x08, // BE flag (bit 3)\n  BACKUP_STATE: 0x10, // BS flag (bit 4)\n} as const;\n\n// Legacy device registry removed - replaced with KV-based MDS lookup with fallback to DEFAULT_DEVICE_INFO\n\n// Default Device Info for Unknown Devices\nexport const DEFAULT_DEVICE_INFO: Record<'platform' | 'cross-platform', DeviceInfo> = {\n  platform: {\n    type: DEVICE_TYPES.PLATFORM,\n    vendor: 'Unknown',\n    model: 'Platform Authenticator',\n    certified: false,\n    transports: [TRANSPORT_METHODS.INTERNAL, TRANSPORT_METHODS.HYBRID],\n  },\n  'cross-platform': {\n    type: DEVICE_TYPES.CROSS_PLATFORM,\n    vendor: 'Unknown',\n    model: 'Security Key',\n    certified: false,\n    transports: [TRANSPORT_METHODS.USB, TRANSPORT_METHODS.NFC, TRANSPORT_METHODS.HYBRID],\n  },\n} as const;\n\n// Attestation Format to Type Mapping using Command Pattern\ntype AttestationFormatHandler = (attStmt: any) => string;\n\nexport const ATTESTATION_FORMAT_HANDLERS = new Map<string, AttestationFormatHandler>([\n  ['none', () => ATTESTATION_TYPES.NONE],\n  [\n    'packed',\n    attStmt => {\n      if (attStmt.x5c && attStmt.x5c.length > 0) {\n        return ATTESTATION_TYPES.BASIC;\n      }\n      if (attStmt.sig && !attStmt.x5c) {\n        return ATTESTATION_TYPES.SELF;\n      }\n      return ATTESTATION_TYPES.NONE;\n    },\n  ],\n  [\n    'fido-u2f',\n    attStmt => {\n      if (attStmt.x5c && attStmt.x5c.length > 0) {\n        return ATTESTATION_TYPES.BASIC;\n      }\n      return ATTESTATION_TYPES.SELF;\n    },\n  ],\n  ['android-key', () => ATTESTATION_TYPES.BASIC],\n  ['android-safetynet', () => ATTESTATION_TYPES.ATTCA],\n  ['tpm', () => ATTESTATION_TYPES.BASIC],\n  ['apple', () => ATTESTATION_TYPES.BASIC],\n]);\n\nexport enum WebAuthnErrorCode {\n  INVALID_CHALLENGE = 'INVALID_CHALLENGE',\n  INVALID_ORIGIN = 'INVALID_ORIGIN',\n  INVALID_RPID = 'INVALID_RPID',\n  USER_NOT_PRESENT = 'USER_NOT_PRESENT',\n  INVALID_COUNTER = 'INVALID_COUNTER',\n  SIGNATURE_FAILED = 'SIGNATURE_FAILED',\n  UNSUPPORTED_ALGORITHM = 'UNSUPPORTED_ALGORITHM',\n  INVALID_CREDENTIAL = 'INVALID_CREDENTIAL',\n  CHALLENGE_EXPIRED = 'CHALLENGE_EXPIRED',\n  INVALID_KEY_FORMAT = 'INVALID_KEY_FORMAT',\n  DEFAULT = 'DEFAULT',\n}\n\n// Error Message Resolver Type\ntype ErrorMessageResolver = (operation: 'registration' | 'authentication') => string;\n\n// WebAuthn Error Messages using Command Pattern\nexport const WEBAUTHN_ERROR_MESSAGES = new Map<WebAuthnErrorCode, ErrorMessageResolver>([\n  [WebAuthnErrorCode.CHALLENGE_EXPIRED, () => 'Session expired. Please refresh the page and try again.'],\n  [WebAuthnErrorCode.INVALID_CHALLENGE, () => 'Security check failed. Please refresh the page and try again.'],\n  [WebAuthnErrorCode.INVALID_COUNTER, () => 'Security violation detected. Your authenticator may be compromised. Please contact support immediately.'],\n  [WebAuthnErrorCode.INVALID_KEY_FORMAT, () => 'Invalid security key format. Please re-register your device.'],\n  [WebAuthnErrorCode.INVALID_ORIGIN, () => 'Request origin not recognized. Please ensure you are on the correct website.'],\n  [WebAuthnErrorCode.INVALID_RPID, () => 'Security configuration error. Please contact support.'],\n  [WebAuthnErrorCode.UNSUPPORTED_ALGORITHM, () => 'Your authenticator uses an unsupported security algorithm. Please use a different device.'],\n  [WebAuthnErrorCode.USER_NOT_PRESENT, () => 'User presence verification failed. Please interact with your authenticator when prompted.'],\n  [WebAuthnErrorCode.INVALID_CREDENTIAL, operation => (operation === 'registration' ? 'Failed to create credential. Please try again.' : 'Authenticator not recognized. Please use the device you registered with.')],\n  [\n    WebAuthnErrorCode.SIGNATURE_FAILED,\n    operation => (operation === 'registration' ? 'Failed to verify authenticator. Please try a different device.' : 'Authentication failed. Please verify you are using the correct authenticator.'),\n  ],\n  [WebAuthnErrorCode.DEFAULT, operation => (operation === 'registration' ? 'Registration failed. Please try again.' : 'Authentication failed. Please try again.')],\n]);\n\n// Utility Functions\nexport function convertAAGUIDToUUID(aaguid: Uint8Array): string {\n  const aaguidString = Array.from(aaguid)\n    .map(b => b.toString(16).padStart(2, '0'))\n    .join('');\n\n  return [aaguidString.slice(0, 8), aaguidString.slice(8, 12), aaguidString.slice(12, 16), aaguidString.slice(16, 20), aaguidString.slice(20, 32)].join('-');\n}\n\nexport function isAAGUIDAllZeros(aaguid: Uint8Array): boolean {\n  return Array.from(aaguid).every(byte => byte === 0);\n}\n",
    "import { Button, Card, Input, Link, Spinner, SvgIcon } from '@ycore/componentry/vibrant';\nimport { isError } from '@ycore/forge/result';\nimport { FormError, FormField, SecureForm, SecureProvider } from '@ycore/foundry/secure';\nimport clsx from 'clsx';\nimport * as React from 'react';\nimport { useActionData, useLoaderData, useNavigation, useSubmit } from 'react-router';\nimport type { SignUpFormProps, SignUpPageProps } from '../@types/auth.component.types';\nimport { createRegistrationOptions } from '../services/webauthn';\nimport { isPlatformAuthenticatorAvailable, isWebAuthnSupported, startRegistration } from './webauthn-client';\n\nexport function SignUpForm({ signinUrl }: SignUpFormProps) {\n  const navigation = useNavigation();\n  const actionData = useActionData<any>();\n  const loaderData = useLoaderData<any>();\n  const submit = useSubmit();\n  const isSubmitting = navigation.state === 'submitting';\n  const errors = actionData?.success === false ? actionData.error?.details || {} : {};\n  const [webAuthnSupported, setWebAuthnSupported] = React.useState(false);\n  const [webAuthnError, setWebAuthnError] = React.useState<string | null>(null);\n  const [isRegistering, setIsRegistering] = React.useState(false);\n  const [platformAuthAvailable, setPlatformAuthAvailable] = React.useState(false);\n  const abortControllerRef = React.useRef<AbortController | null>(null);\n\n  React.useEffect(() => {\n    const checkWebAuthn = async () => {\n      const supported = isWebAuthnSupported();\n      setWebAuthnSupported(supported);\n\n      if (supported) {\n        // Check if platform authenticator is available\n        const isPlatformAvailable = await isPlatformAuthenticatorAvailable();\n        setPlatformAuthAvailable(isPlatformAvailable);\n      }\n    };\n\n    checkWebAuthn();\n  }, []);\n\n  React.useEffect(() => {\n    // Cleanup on unmount\n    return () => {\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n    };\n  }, []);\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setWebAuthnError(null);\n\n    const form = event.currentTarget;\n    const formData = new FormData(form);\n    const email = formData.get('email')?.toString();\n    const displayName = formData.get('displayName')?.toString();\n\n    if (!email || !displayName) {\n      setWebAuthnError('Email and display name are required');\n      return;\n    }\n\n    if (!webAuthnSupported) {\n      setWebAuthnError('WebAuthn is not supported on this device');\n      return;\n    }\n\n    if (!loaderData?.challenge) {\n      setWebAuthnError('Session expired. Please refresh the page.');\n      return;\n    }\n\n    try {\n      setIsRegistering(true);\n      setWebAuthnError(null);\n\n      // Create AbortController for this operation\n      abortControllerRef.current = new AbortController();\n\n      // Create registration options\n      const options = createRegistrationOptions(\n        window.location.hostname,\n        window.location.hostname,\n        email,\n        displayName,\n        loaderData.challenge,\n        [] // Exclude credentials (none for new users)\n      );\n\n      // Create timeout promise\n      const timeoutPromise = new Promise<never>((_, reject) => {\n        const timeoutId = setTimeout(() => {\n          reject(new Error('Registration timed out. Please try again.'));\n        }, 60000);\n\n        // Clear timeout if aborted\n        abortControllerRef.current?.signal.addEventListener('abort', () => {\n          clearTimeout(timeoutId);\n        });\n      });\n\n      // Race between WebAuthn registration and timeout\n      const credential = await Promise.race([startRegistration(options), timeoutPromise]);\n\n      // Check if still mounted and not aborted\n      if (abortControllerRef.current?.signal.aborted) {\n        return;\n      }\n\n      // Create new FormData with WebAuthn response\n      const submitFormData = new FormData(form);\n      submitFormData.append('webauthn_response', JSON.stringify(credential));\n      submitFormData.append('intent', 'signup');\n\n      // Submit using React Router's submit function\n      submit(submitFormData, { method: 'post' });\n    } catch (error) {\n      // Check if component is still mounted and operation wasn't aborted\n      if (abortControllerRef.current?.signal.aborted) {\n        return;\n      }\n\n      setIsRegistering(false);\n\n      // Provide more specific error messages\n      let errorMessage = 'Registration failed';\n      if (error instanceof Error) {\n        if (error.message.includes('cancelled')) {\n          errorMessage = 'Registration was cancelled. Please try again when ready.';\n        } else if (error.message.includes('timed out')) {\n          errorMessage = error.message; // Use the timeout message directly\n        } else if (error.message.includes('already registered')) {\n          errorMessage = 'This authenticator is already registered. Please sign in instead.';\n        } else {\n          errorMessage = error.message;\n        }\n      }\n      setWebAuthnError(errorMessage);\n    }\n  };\n\n  return (\n    <SecureForm method=\"post\" onSubmit={handleSubmit} className=\"flex flex-col gap-6\">\n      <FormField label=\"Email\" error={errors.email}>\n        <Input name=\"email\" type=\"email\" placeholder=\"Enter your email\" autoComplete=\"email webauthn\" required autoFocus />\n      </FormField>\n\n      <FormField label=\"Display Name\" error={errors.displayName}>\n        <Input name=\"displayName\" type=\"text\" placeholder=\"Enter your display name\" autoComplete=\"name\" required />\n      </FormField>\n\n      {(errors.form || webAuthnError) && <FormError error={errors.form || webAuthnError} />}\n\n      {/* WebAuthn status indicator */}\n      {webAuthnSupported && (\n        <div className=\"text-muted-foreground text-sm\">\n          {platformAuthAvailable ? (\n            <span className=\"flex items-center gap-2\">\n              <SvgIcon iconId=\"CircleCheck\" className=\"h-4 w-4 text-green-500\" />\n              Platform authenticator available\n            </span>\n          ) : (\n            <span className=\"flex items-center gap-2\">\n              <SvgIcon iconId=\"CircleAlert\" className=\"h-4 w-4 text-yellow-500\" />\n              External security key may be required\n            </span>\n          )}\n        </div>\n      )}\n\n      {/* Registration in progress indicator */}\n      {isRegistering && (\n        <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-3 text-blue-700 text-sm\">\n          <div className=\"flex items-center gap-2\">\n            <Spinner className=\"size-4\" />\n            <span>Please set up your authenticator...</span>\n          </div>\n          <p className=\"mt-1 text-xs\">Follow the prompts to create a passkey on your device.</p>\n        </div>\n      )}\n\n      <div className=\"flex justify-between gap-x-2\">\n        <Button type=\"submit\" name=\"intent\" value=\"signup\" disabled={isSubmitting || isRegistering || !webAuthnSupported} className=\"flex-1\">\n          <Spinner className={clsx('size-5', !(isSubmitting || isRegistering) && 'hidden')} />\n          {isSubmitting || isRegistering ? 'Creating account...' : !webAuthnSupported ? 'WebAuthn not supported' : 'Sign up with Passkey'}\n        </Button>\n\n        <Button type=\"button\" variant=\"outline\" asChild disabled={isSubmitting || isRegistering}>\n          <Link href={signinUrl}>Sign In</Link>\n        </Button>\n      </div>\n    </SecureForm>\n  );\n}\n\nexport function SignUpPage({ loaderData, children, title = 'Create Account', description = 'Sign up for a new account with your passkey' }: SignUpPageProps) {\n  const token = isError(loaderData) ? '' : (loaderData?.token ?? '');\n\n  return (\n    <SecureProvider token={token}>\n      <div className=\"mx-auto min-w-md max-w-lg px-4 py-8\">\n        <Card>\n          <Card.Header>\n            <Card.Title>{title}</Card.Title>\n            <Card.Description>{description}</Card.Description>\n          </Card.Header>\n          <Card.Content>{children}</Card.Content>\n        </Card>\n      </div>\n    </SecureProvider>\n  );\n}\n",
    "import { Button, Input, InputOtp } from '@ycore/componentry/vibrant';\nimport { formErrors, isError } from '@ycore/forge/result';\nimport { SecureForm } from '@ycore/foundry/secure';\nimport { useEffect, useState } from 'react';\nimport type { VerificationPurpose } from '../services/totp-service';\n\nexport interface VerifyFormProps {\n  email: string;\n  purpose?: VerificationPurpose;\n  resendCooldown?: number;\n  period?: number;\n  digits?: number;\n  actionData?: unknown;\n}\n\nexport function VerifyForm({ email, purpose = 'signup', resendCooldown: initialCooldown = 60, period = 480, digits = 6, actionData }: VerifyFormProps) {\n  const [code, setCode] = useState('');\n  const [resendCooldown, setResendCooldown] = useState(0);\n\n  const errors = actionData && isError(actionData) ? formErrors(actionData) : {};\n\n  // Auto-start cooldown when form loads (page just loaded after resend)\n  useEffect(() => {\n    // Check if we just did a resend (actionData exists, not an error, and has resent flag)\n    if (actionData && !isError(actionData) && typeof actionData === 'object' && 'resent' in actionData && actionData.resent) {\n      setResendCooldown(initialCooldown);\n    }\n  }, [actionData, initialCooldown]);\n\n  // Cooldown timer\n  useEffect(() => {\n    if (resendCooldown <= 0) return;\n\n    const interval = setInterval(() => {\n      setResendCooldown(prev => {\n        if (prev <= 1) {\n          clearInterval(interval);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [resendCooldown]);\n\n  const purposeLabels: Record<VerificationPurpose, string> = {\n    signup: 'Email Verification',\n    'passkey-add': 'Confirm Adding Passkey',\n    'passkey-delete': 'Confirm Removing Passkey',\n    'email-change': 'Verify New Email',\n    'account-delete': 'Confirm Removing Account',\n    recovery: 'Recover Account',\n  };\n\n  return (\n    <div className=\"mx-auto w-full max-w-md space-y-6\">\n      <div className=\"space-y-2 text-center\">\n        <h1 className=\"font-bold text-3xl tracking-tight\">{purposeLabels[purpose]}</h1>\n        <p className=\"text-muted-foreground\">\n          Please enter the {digits}-digit verification code sent to <strong className=\"text-nowrap\">{email}</strong>\n        </p>\n      </div>\n\n      <SecureForm method=\"post\" className=\"space-y-4\" errors={errors}>\n        <Input type=\"hidden\" name=\"email\" value={email} />\n        <Input type=\"hidden\" name=\"purpose\" value={purpose} />\n\n        <SecureForm.Field label=\"Verification Code\" name=\"code\" error={errors.code} className=\"flex flex-col items-center\">\n          <InputOtp value={code} onValueChange={setCode} autoComplete=\"one-time-code\" validationType=\"numeric\" disabled={false}>\n            <InputOtp.Group>\n              {Array.from({ length: digits }).map((_, index) => (\n                <InputOtp.Slot key={index} index={index} />\n              ))}\n            </InputOtp.Group>\n            <InputOtp.HiddenInput name=\"code\" />\n          </InputOtp>\n        </SecureForm.Field>\n\n        <div className=\"space-y-3\">\n          <div className=\"flex justify-around\">\n            <Button type=\"submit\" name=\"intent\" value=\"verify\" disabled={code.length !== digits}>\n              Verify Code\n            </Button>\n\n            <Button type=\"submit\" name=\"intent\" value=\"resend\" variant=\"outline\" disabled={resendCooldown > 0} formNoValidate>\n              {resendCooldown > 0 ? `Resend code in ${resendCooldown}s` : 'Resend Code'}\n            </Button>\n          </div>\n          <div className=\"flex justify-center\">\n            <Button type=\"submit\" name=\"intent\" value=\"unverify\" variant=\"destructive\" formNoValidate>\n              Unverify Email\n            </Button>\n          </div>\n        </div>\n\n        <p className=\"text-center text-muted-foreground text-sm\">The code expires within {Math.floor(period / 60)} minutes</p>\n      </SecureForm>\n    </div>\n  );\n}\n",
    "import { email, maxLength, minLength, nonEmpty, object, pipe, string } from 'valibot';\n\n// Base email validation - reused across all auth forms\nconst emailField = pipe(string(), nonEmpty('Please enter your email.'), email('Please enter a valid email.'), maxLength(32, 'Email is too long'));\n\n// Base display name validation\nconst displayNameField = pipe(string(), nonEmpty('Display name is required'), minLength(1, 'Display name is required'));\n\nexport const authFormSchema = object({ email: emailField });\n\nexport const signupFormSchema = object({ email: emailField, displayName: displayNameField });\n\nexport const signinFormSchema = object({ email: emailField });\n"
  ],
  "mappings": "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",
  "debugId": "0F128FB8609740C364756E2164756E21",
  "names": []
}
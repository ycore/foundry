{
  "version": 3,
  "sources": ["../../../src/auth/server/auth.middleware.ts", "../../../src/auth/auth.config.ts", "../../../src/auth/auth.context.ts", "../../../src/auth/server/auth-context.ts", "../../../../../node_modules/@react-router/cloudflare/dist/index.mjs", "../../../src/auth/server/session.ts", "../../../src/auth/server/auth-passkey-manager.ts", "../../../src/auth/server/repository.ts", "../../../../../node_modules/drizzle-orm/entity.js", "../../../../../node_modules/drizzle-orm/column.js", "../../../../../node_modules/drizzle-orm/column-builder.js", "../../../../../node_modules/drizzle-orm/table.utils.js", "../../../../../node_modules/drizzle-orm/tracing-utils.js", "../../../../../node_modules/drizzle-orm/pg-core/unique-constraint.js", "../../../../../node_modules/drizzle-orm/pg-core/columns/common.js", "../../../../../node_modules/drizzle-orm/pg-core/columns/enum.js", "../../../../../node_modules/drizzle-orm/subquery.js", "../../../../../node_modules/drizzle-orm/version.js", "../../../../../node_modules/drizzle-orm/tracing.js", "../../../../../node_modules/drizzle-orm/view-common.js", "../../../../../node_modules/drizzle-orm/table.js", "../../../../../node_modules/drizzle-orm/sql/sql.js", "../../../../../node_modules/drizzle-orm/utils.js", "../../../../../node_modules/drizzle-orm/sql/expressions/conditions.js", "../../../src/auth/schema/schema.ts", "../../../../../node_modules/drizzle-orm/sqlite-core/foreign-keys.js", "../../../../../node_modules/drizzle-orm/sqlite-core/unique-constraint.js", "../../../../../node_modules/drizzle-orm/sqlite-core/columns/common.js", "../../../../../node_modules/drizzle-orm/sqlite-core/columns/blob.js", "../../../../../node_modules/drizzle-orm/sqlite-core/columns/custom.js", "../../../../../node_modules/drizzle-orm/sqlite-core/columns/integer.js", "../../../../../node_modules/drizzle-orm/sqlite-core/columns/numeric.js", "../../../../../node_modules/drizzle-orm/sqlite-core/columns/real.js", "../../../../../node_modules/drizzle-orm/sqlite-core/columns/text.js", "../../../../../node_modules/drizzle-orm/sqlite-core/columns/all.js", "../../../../../node_modules/drizzle-orm/sqlite-core/table.js", "../../../src/auth/server/webauthn.ts", "../../../src/auth/auth.constants.ts", "../../../src/auth/server/webauthn-config.ts", "../../../src/auth/server/auth-profile.ts", "../../../src/auth/server/auth-signin.ts", "../../../src/auth/server/auth.validation.ts", "../../../src/auth/server/webauthn-utils.ts", "../../../src/auth/server/webauthn-validation.ts", "../../../src/auth/server/auth-signout.ts", "../../../src/auth/server/auth-signup.ts", "../../../src/auth/server/auth-verify.ts", "../../../src/auth/server/totp-service.ts", "../../../src/auth/server/verification-service.ts", "../../../src/email/email-provider.ts", "../../../src/email/providers/local-dev.ts", "../../../src/email/providers/mailchannels.ts", "../../../src/email/providers/resend.ts", "../../../src/email/providers/test-mock.ts", "../../../src/email/templates/auth-totp.ts", "../../../src/auth/server/webauthn-credential.ts"],
  "sourcesContent": [
    "import { setContext } from '@ycore/forge/context';\nimport { isError, middlewarePassthrough } from '@ycore/forge/result';\nimport { type MiddlewareFunction, redirect } from 'react-router';\n\nimport type { AuthConfig } from '../@types/auth.config.types';\nimport { defaultAuthConfig, defaultAuthRoutes } from '../auth.config';\nimport { authConfigContext, authUserContext } from '../auth.context';\nimport { getAuthUser } from './auth-context';\nimport { createAuthSessionStorage, destroyAuthSession, getAuthSession } from './session';\n\n/**\n * Middleware that sets up auth configuration and loads user session\n */\nexport function authSessionMiddleware(authConfig: AuthConfig): MiddlewareFunction<Response> {\n  return async ({ request, context }, next) => {\n    // Set auth config in context for services to use\n    setContext(context, authConfigContext, authConfig);\n\n    // Load user from session\n    const authSession = await getAuthSession(request, context);\n\n    // If session loaded successfully and has a user, set it in context\n    if (!isError(authSession) && authSession !== null && authSession.user) {\n      setContext(context, authUserContext, authSession.user);\n      return next();\n    }\n\n    // Check if there's an orphaned session cookie that needs cleanup\n    const cookieHeader = request.headers.get('Cookie');\n    const sessionCookieName = authConfig?.session.cookie.name || defaultAuthConfig.session.cookie.name;\n    if (cookieHeader?.includes(sessionCookieName)) {\n      // Get the session to check if it has any valid data (user, challenge, etc.)\n      const sessionStorage = createAuthSessionStorage(context);\n      const session = await sessionStorage.getSession(cookieHeader);\n\n      // Only destroy if session is truly empty (no user or challenge)\n      const hasUser = session.get('user');\n      const hasChallenge = session.get('challenge');\n\n      if (!hasUser && !hasChallenge) {\n        // Truly orphaned session - clean it up\n        const destroyResult = await destroyAuthSession(request, context);\n\n        if (!isError(destroyResult)) {\n          const response = await next();\n          return middlewarePassthrough(response, { set: { 'Set-Cookie': destroyResult } });\n        }\n      }\n    }\n\n    return next();\n  };\n}\n\n/**\n * Middleware that requires authentication for protected routes.\n * Redirects to configured signedOutRoute if user is not authenticated.\n */\nfunction guardedAuthMiddleware(signedOutRoute: string): MiddlewareFunction<Response> {\n  return async ({ context }, next) => {\n    const user = getAuthUser(context);\n    if (!user) {\n      throw redirect(signedOutRoute);\n    }\n\n    return next();\n  };\n}\n\n/**\n * Middleware for public routes that should redirect if user is already authenticated.\n * Useful for signin/signup pages.\n */\nfunction unguardedAuthMiddleware(signedInRoute: string): MiddlewareFunction<Response> {\n  return async ({ context }, next) => {\n    const user = getAuthUser(context);\n    if (user) {\n      throw redirect(signedInRoute);\n    }\n\n    return next();\n  };\n}\n\n/**\n * Combined middleware for auth routes that:\n * 1. Sets up auth configuration\n * 2. Loads user session\n * 3. Redirects if already authenticated\n */\nexport function unprotectedAuthMiddleware(authConfig: AuthConfig): MiddlewareFunction<Response>[] {\n  const signedInRoute = authConfig?.routes.signedin || defaultAuthRoutes.signedin;\n  return [authSessionMiddleware(authConfig), unguardedAuthMiddleware(signedInRoute)];\n}\n\n/**\n * Combined middleware for protected routes that:\n * 1. Sets up auth configuration\n * 2. Loads user session\n * 3. Requires authentication\n */\nexport function protectedAuthMiddleware(authConfig: AuthConfig): MiddlewareFunction<Response>[] {\n  const signedOutRoute = authConfig?.routes.signedout || defaultAuthRoutes.signedout;\n  return [authSessionMiddleware(authConfig), guardedAuthMiddleware(signedOutRoute)];\n}\n",
    "import type { AuthConfig, AuthRoutes } from './@types/auth.config.types';\n\nexport const defaultAuthRoutes: AuthRoutes = {\n  signup: '/auth/signup',\n  signin: '/auth/signin',\n  signout: '/auth/signout',\n  signedin: '/',\n  signedout: '/',\n  verify: '/auth/verify',\n};\n\nexport const defaultAuthConfig: AuthConfig = {\n  routes: defaultAuthRoutes,\n  session: {\n    kvBinding: 'UNCONFIGURED',\n    secretKey: 'UNCONFIGURED',\n    cookie: {\n      name: '__auth_session',\n      httpOnly: true,\n      maxAge: 60 * 60 * 24 * 30,\n      path: '/',\n      sameSite: 'lax',\n      secure: 'auto', // Will be determined by environment\n    },\n  },\n  webauthn: {\n    rpName: 'React Router Cloudflare App',\n    challengeSessionKey: 'challenge',\n    requireUserVerification: true, // More secure\n  },\n  verification: {\n    digits: 6,\n    period: 60 * 8, // 8 minutes in seconds\n    maxAttempts: 3,\n    window: 1, // Â±30 seconds\n    requireEmailVerification: false,\n    resendCooldown: 60, // seconds\n  },\n};\n",
    "import { createContext } from 'react-router';\n\nimport type { AuthConfig } from './@types/auth.config.types';\nimport type { User } from './schema';\n\nexport const authConfigContext = createContext<AuthConfig | null>(null);\n\nexport const authUserContext = createContext<User | null>(null);\n",
    "import { getContext, requireContext } from '@ycore/forge/context';\nimport type { AppLoadContext } from 'react-router';\n\nimport { authUserContext } from '../auth.context';\nimport type { User } from '../schema';\n\n/**\n * Require authenticated user from context\n * Throws Response(401) if user is not authenticated\n *\n * Use this in protected routes where authentication is mandatory\n *\n * @example\n * export const loader = async ({ context }) => {\n *   const user = requireAuthUser(context);\n *   return { user };\n * };\n */\nexport function requireAuthUser(context: AppLoadContext): User {\n  const user = requireContext(context, authUserContext, {\n    errorMessage: 'Authentication required - user must be logged in to access this resource',\n    errorStatus: 401,\n  });\n\n  return user;\n}\n\n/**\n * Get authenticated user from context (optional)\n * Returns null if user is not authenticated\n *\n * Use this when authentication is optional\n *\n * @example\n * export const loader = async ({ context }) => {\n *   const user = getAuthUser(context);\n *   return { user, isGuest: !user };\n * };\n */\nexport function getAuthUser(context: AppLoadContext): User | null {\n  return getContext(context, authUserContext, null);\n}\n\n/**\n * Check if a user is currently authenticated\n * Returns true if a user is present in context, false otherwise\n *\n * Use this for conditional logic based on auth state\n *\n * @example\n * export const loader = async ({ context }) => {\n *   const authenticated = isAuthenticated(context);\n *   return { isAuthenticated: authenticated };\n * };\n */\nexport function isAuthenticated(context: AppLoadContext): boolean {\n  return getContext(context, authUserContext, null) !== null;\n}\n",
    "/**\n * @react-router/cloudflare v7.9.4\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n\n// sessions/workersKVStorage.ts\nimport { createSessionStorage } from \"react-router\";\nfunction createWorkersKVSessionStorage({\n  cookie,\n  kv\n}) {\n  return createSessionStorage({\n    cookie,\n    async createData(data, expires) {\n      while (true) {\n        let randomBytes = crypto.getRandomValues(new Uint8Array(8));\n        let id = [...randomBytes].map((x) => x.toString(16).padStart(2, \"0\")).join(\"\");\n        if (await kv.get(id, \"json\")) {\n          continue;\n        }\n        await kv.put(id, JSON.stringify(data), {\n          expiration: expires ? Math.round(expires.getTime() / 1e3) : void 0\n        });\n        return id;\n      }\n    },\n    async readData(id) {\n      let session = await kv.get(id);\n      if (!session) {\n        return null;\n      }\n      return JSON.parse(session);\n    },\n    async updateData(id, data, expires) {\n      await kv.put(id, JSON.stringify(data), {\n        expiration: expires ? Math.round(expires.getTime() / 1e3) : void 0\n      });\n    },\n    async deleteData(id) {\n      await kv.delete(id);\n    }\n  });\n}\n\n// worker.ts\nimport { createRequestHandler as createReactRouterRequestHandler } from \"react-router\";\nfunction createRequestHandler({\n  build,\n  mode,\n  getLoadContext = ({ context }) => ({\n    ...context,\n    cloudflare: {\n      ...context.cloudflare,\n      cf: context.cloudflare.request.cf\n    }\n  })\n}) {\n  let handleRequest = createReactRouterRequestHandler(build, mode);\n  return async (cloudflare) => {\n    let loadContext = await getLoadContext({\n      request: cloudflare.request,\n      context: {\n        cloudflare: {\n          ...cloudflare,\n          cf: cloudflare.request.cf,\n          ctx: {\n            waitUntil: cloudflare.waitUntil.bind(cloudflare),\n            passThroughOnException: cloudflare.passThroughOnException.bind(cloudflare)\n          },\n          caches\n        }\n      }\n    });\n    return handleRequest(cloudflare.request, loadContext);\n  };\n}\nfunction createPagesFunctionHandler({\n  build,\n  getLoadContext,\n  mode\n}) {\n  let handleRequest = createRequestHandler({\n    build,\n    getLoadContext,\n    mode\n  });\n  let handleFetch = async (context) => {\n    let response;\n    context.request.headers.delete(\"if-none-match\");\n    try {\n      response = await context.env.ASSETS.fetch(\n        context.request.url,\n        context.request.clone()\n      );\n      response = response && response.status >= 200 && response.status < 400 ? new Response(response.body, response) : void 0;\n    } catch {\n    }\n    if (!response) {\n      response = await handleRequest(context);\n    }\n    return response;\n  };\n  return async (context) => {\n    try {\n      return await handleFetch(context);\n    } catch (error) {\n      if (process.env.NODE_ENV === \"development\" && error instanceof Error) {\n        console.error(error);\n        return new Response(error.message || error.toString(), {\n          status: 500\n        });\n      }\n      return new Response(\"Internal Error\", {\n        status: 500\n      });\n    }\n  };\n}\nexport {\n  createPagesFunctionHandler,\n  createRequestHandler,\n  createWorkersKVSessionStorage\n};\n",
    "import { createWorkersKVSessionStorage } from '@react-router/cloudflare';\nimport { getContext } from '@ycore/forge/context';\nimport type { Result } from '@ycore/forge/result';\nimport { err, ok } from '@ycore/forge/result';\nimport { getBindings, getKVStore, isProduction, UNCONFIGURED } from '@ycore/forge/services';\nimport { } from '@ycore/foundry/auth/server';\nimport type { RouterContextProvider } from 'react-router';\n\nimport type { SessionData, SessionFlashData } from '../@types/auth.types';\nimport { authConfigContext } from '../auth.context';\n\nconst challengeKvTemplate = (email: string): string => `challenge:${email}`;\nconst challengeUniqueKvTemplate = (challenge: string): string => `challenge-unique:${challenge}`;\n\n/**\n * Resolves auth bindings from context following CSRF middleware pattern\n * Centralizes binding resolution with proper error handling\n */\nfunction resolveAuthBindings(context: Readonly<RouterContextProvider>): { secret: string; kv: KVNamespace } {\n  const authConfig = getContext(context, authConfigContext);\n  if (!authConfig) {\n    throw new Error('Auth configuration not found in context. Ensure auth middleware is properly configured.');\n  }\n\n  const { session } = authConfig;\n\n  // Check for unconfigured values\n  if (session.kvBinding === UNCONFIGURED) {\n    throw new Error('Auth session KV binding is not configured. Please specify kvBinding in your auth config.');\n  }\n  if (session.secretKey === UNCONFIGURED) {\n    throw new Error('Auth session secret key is not configured. Please specify secretKey in your auth config.');\n  }\n\n  const bindings = getBindings(context);\n\n  const secret = bindings[session.secretKey as keyof typeof bindings] as string | undefined;\n  if (!secret) {\n    throw new Error(`Auth secret binding '${session.secretKey}' not found in environment. ` + `Available bindings: ${Object.keys(bindings).join(', ')}`);\n  }\n\n  const kv = getKVStore(context, session.kvBinding);\n  if (!kv) {\n    throw new Error(`KV binding '${session.kvBinding}' not found for session. `);\n  }\n\n  return { secret, kv };\n}\n\nexport function createAuthSessionStorage(context: Readonly<RouterContextProvider>) {\n  const authConfig = getContext(context, authConfigContext);\n  if (!authConfig) {\n    throw new Error('Auth configuration not found in context. Ensure auth middleware is properly configured.');\n  }\n\n  const { secret, kv } = resolveAuthBindings(context);\n  const { session } = authConfig;\n\n  return createWorkersKVSessionStorage<SessionData, SessionFlashData>({\n    kv,\n    cookie: {\n      name: session.cookie.name,\n      httpOnly: session.cookie.httpOnly,\n      maxAge: session.cookie.maxAge,\n      path: session.cookie.path,\n      sameSite: session.cookie.sameSite,\n      secrets: [secret],\n      secure: session.cookie.secure === 'auto' ? isProduction(context) : (session.cookie.secure ?? false),\n    },\n  });\n}\n\n/**\n * Get session from request\n */\nexport async function getAuthSession(request: Request, context: Readonly<RouterContextProvider>): Promise<Result<SessionData | null>> {\n  try {\n    const sessionStorage = createAuthSessionStorage(context);\n    const session = await sessionStorage.getSession(request.headers.get('Cookie'));\n\n    const user = session.get('user');\n    const challenge = session.get('challenge');\n\n    if (!user) {\n      return ok(null);\n    }\n\n    return ok({ user, challenge });\n  } catch (error) {\n    return err('Failed to get session', { error });\n  }\n}\n\n/**\n * Verify challenge uniqueness\n */\nexport async function verifyChallengeUniqueness(challenge: string, context: Readonly<RouterContextProvider>): Promise<Result<boolean>> {\n  try {\n    const { kv } = resolveAuthBindings(context);\n\n    const uniqueKey = challengeUniqueKvTemplate(challenge);\n    const existing = await kv.get(uniqueKey);\n\n    if (existing) {\n      return err('Challenge already used', { challenge });\n    }\n\n    // Mark challenge as used with 5 minute TTL\n    await kv.put(uniqueKey, 'used', { expirationTtl: 300 });\n    return ok(true);\n  } catch (error) {\n    return err('Failed to verify challenge uniqueness', { challenge, error });\n  }\n}\n\n/**\n * Clean up challenge session\n */\nexport async function cleanupChallengeSession(email: string, context: Readonly<RouterContextProvider>): Promise<Result<void>> {\n  try {\n    const { kv } = resolveAuthBindings(context);\n\n    const challengeKey = challengeKvTemplate(email);\n    await kv.delete(challengeKey);\n\n    return ok(undefined);\n  } catch (error) {\n    return err('Failed to cleanup challenge session', { email, error });\n  }\n}\n\n/**\n * Create a challenge session for WebAuthn registration/authentication\n *\n * @param context - Router context provider\n * @param challenge - The generated challenge string\n * @returns Result with Set-Cookie header value\n *\n * @example\n * ```ts\n * const challenge = generateChallenge();\n * const result = await createChallengeSession(context, challenge);\n * if (isError(result)) {\n *   return respondError(result);\n * }\n * return respondOk({ challenge }, { headers: { 'Set-Cookie': result } });\n * ```\n */\nexport async function createChallengeSession(context: Readonly<RouterContextProvider>, challenge: string): Promise<Result<string>> {\n  try {\n    const sessionStorage = createAuthSessionStorage(context);\n    const session = await sessionStorage.getSession();\n\n    session.set('challenge', challenge);\n    session.set('challengeCreatedAt', Date.now());\n\n    const cookie = await sessionStorage.commitSession(session);\n    return ok(cookie);\n  } catch (error) {\n    return err('Failed to create challenge session', { error });\n  }\n}\n\n/**\n * Get challenge from session with validation\n *\n * @param request - The incoming request\n * @param context - Router context provider\n * @returns Result with challenge data or error\n *\n * @example\n * ```ts\n * const result = await getChallengeFromSession(request, context);\n * if (isError(result)) {\n *   return respondError(result);\n * }\n * const { challenge, challengeCreatedAt, session } = result;\n * ```\n */\nexport async function getChallengeFromSession(request: Request, context: Readonly<RouterContextProvider>): Promise<Result<{ challenge: string; challengeCreatedAt: number; session: any }>> {\n  try {\n    const sessionStorage = createAuthSessionStorage(context);\n    const session = await sessionStorage.getSession(request.headers.get('Cookie'));\n    const storedChallenge = session.get('challenge');\n    const challengeCreatedAt = session.get('challengeCreatedAt');\n\n    if (!storedChallenge || !challengeCreatedAt) {\n      return err('Invalid session. Please refresh and try again.', { field: 'general' });\n    }\n\n    return ok({ challenge: storedChallenge, challengeCreatedAt, session });\n  } catch (error) {\n    return err('Failed to get challenge from session', { error });\n  }\n}\n\n/**\n * Destroy a challenge session (clears challenge data)\n *\n * @param session - The session object to destroy\n * @param context - Router context provider\n * @returns Result with void on success\n *\n * @example\n * ```ts\n * const result = await destroyChallengeSession(session, context);\n * if (isError(result)) {\n *   logger.warning('challenge_cleanup_failed', { error: result });\n * }\n * ```\n */\nexport async function destroyChallengeSession(session: any, context: Readonly<RouterContextProvider>): Promise<Result<void>> {\n  try {\n    const sessionStorage = createAuthSessionStorage(context);\n    await sessionStorage.destroySession(session);\n    return ok(undefined);\n  } catch (error) {\n    return err('Failed to destroy challenge session', { error });\n  }\n}\n\n/**\n * Create new session (for authenticated users only)\n */\nexport async function createAuthSession(context: Readonly<RouterContextProvider>, sessionData: SessionData): Promise<Result<string>> {\n  try {\n    const sessionStorage = createAuthSessionStorage(context);\n\n    // SECURITY: Always create a new session to prevent session fixation attacks\n    // Don't reuse any existing session - create completely fresh session\n    const newSession = await sessionStorage.getSession(); // Creates new session\n\n    newSession.set('user', sessionData.user);\n    newSession.set('authenticatedAt', Date.now());\n\n    const cookie = await sessionStorage.commitSession(newSession);\n    return ok(cookie);\n  } catch (error) {\n    return err('Failed to create session', { error });\n  }\n}\n\n/**\n * Destroy session with proper cookie clearing\n */\nexport async function destroyAuthSession(request: Request, context: Readonly<RouterContextProvider>): Promise<Result<string>> {\n  try {\n    const sessionStorage = createAuthSessionStorage(context);\n    const session = await sessionStorage.getSession(request.headers.get('Cookie'));\n\n    // Get email from session for cleanup\n    const email = session.get('email');\n    if (email) {\n      await cleanupChallengeSession(email, context);\n    }\n\n    // Destroy the session and get the clearing cookie\n    const cookie = await sessionStorage.destroySession(session);\n    return ok(cookie);\n  } catch (error) {\n    return err('Failed to destroy session', { error });\n  }\n}\n",
    "import { getContext } from '@ycore/forge/context';\nimport { logger } from '@ycore/forge/logger';\nimport { err, isError, ok, type Result } from '@ycore/forge/result';\nimport { getKVStore } from '@ycore/forge/services';\nimport type { RouterContextProvider } from 'react-router';\n\nimport type { WebAuthnRegistrationData } from '../@types/auth.types';\nimport { authConfigContext } from '../auth.context';\nimport type { Authenticator } from '../schema';\nimport { getAuthRepository } from './repository';\nimport { getAuthSession } from './session';\nimport { createRegistrationOptions, generateChallenge, verifyRegistration } from './webauthn';\nimport { resolveRpId } from './webauthn-config';\n\nconst MAX_AUTHENTICATORS_PER_USER = 10;\nconst MIN_AUTHENTICATORS_PER_USER = 1;\n\n/**\n * Add a new passkey for an existing authenticated user\n *\n * @param context - Router context provider\n * @param userId - User ID to associate the passkey with\n * @param credential - WebAuthn registration credential data\n * @param challenge - The challenge used for registration\n * @param origin - The validated origin (should come from validateWebAuthnOrigin)\n * @param request - Request object for rpId resolution\n */\nexport async function addPasskeyForUser(context: Readonly<RouterContextProvider>, userId: string, credential: WebAuthnRegistrationData, challenge: string, origin: string, request: Request): Promise<Result<Authenticator>> {\n  const repo = getAuthRepository(context);\n  const authConfig = getContext(context, authConfigContext);\n\n  if (!authConfig) {\n    return err('Auth configuration not found', { field: 'general' });\n  }\n\n  // Resolve rpId from context/request (always use resolveRpId for consistency)\n  const rpId = resolveRpId(context, request);\n\n  // Get metadata KV from config (follows CSRF pattern)\n  const metadataKV = authConfig.webauthn.kvBinding ? getKVStore(context, authConfig.webauthn.kvBinding) : undefined;\n\n  // Check current authenticator count\n  const countResult = await repo.countAuthenticatorsByUserId(userId);\n  if (isError(countResult)) {\n    return countResult;\n  }\n\n  if (countResult >= MAX_AUTHENTICATORS_PER_USER) {\n    logger.warning('passkey_add_max_reached', { userId, count: countResult });\n    return err('Maximum number of authenticators reached', {\n      limit: `You can have a maximum of ${MAX_AUTHENTICATORS_PER_USER} authenticators`,\n    });\n  }\n\n  // Verify the registration\n  const verificationResult = await verifyRegistration(credential, challenge, origin, rpId, metadataKV);\n\n  if (isError(verificationResult)) {\n    logger.error('passkey_add_verification_failed', { userId, error: verificationResult });\n    return verificationResult;\n  }\n\n  // Create the new authenticator\n  const createResult = await repo.createAuthenticator({ ...verificationResult, userId });\n\n  if (isError(createResult)) {\n    logger.error('passkey_add_create_failed', { userId, error: createResult });\n    return createResult;\n  }\n\n  return ok(createResult);\n}\n\n/**\n * Rename an existing passkey\n */\nexport async function renamePasskey(context: Readonly<RouterContextProvider>, userId: string, authenticatorId: string, newName: string): Promise<Result<Authenticator>> {\n  const repo = getAuthRepository(context);\n\n  // Verify ownership\n  const ownershipResult = await repo.authenticatorBelongsToUser(authenticatorId, userId);\n  if (isError(ownershipResult)) {\n    logger.error('passkey_rename_ownership_check_failed', { userId, authenticatorId, error: ownershipResult });\n    return ownershipResult;\n  }\n\n  if (!ownershipResult) {\n    logger.warning('passkey_rename_unauthorized', { userId, authenticatorId });\n    return err('Authenticator not found or unauthorized', {\n      authenticator: 'You do not have permission to modify this authenticator',\n    });\n  }\n\n  // Validate name\n  const trimmedName = newName.trim();\n  if (trimmedName.length < 1 || trimmedName.length > 50) {\n    return err('Invalid authenticator name', {\n      name: 'Name must be between 1 and 50 characters',\n    });\n  }\n\n  // Update the name\n  const updateResult = await repo.updateAuthenticatorName(authenticatorId, trimmedName);\n  if (isError(updateResult)) {\n    logger.error('passkey_rename_failed', { userId, authenticatorId, error: updateResult });\n    return updateResult;\n  }\n\n  return ok(updateResult);\n}\n\n/**\n * Delete a passkey (with minimum authenticator enforcement)\n */\nexport async function deletePasskey(context: Readonly<RouterContextProvider>, userId: string, authenticatorId: string): Promise<Result<boolean>> {\n  const repo = getAuthRepository(context);\n\n  // Verify ownership\n  const ownershipResult = await repo.authenticatorBelongsToUser(authenticatorId, userId);\n  if (isError(ownershipResult)) {\n    logger.error('passkey_delete_ownership_check_failed', { userId, authenticatorId, error: ownershipResult });\n    return ownershipResult;\n  }\n\n  if (!ownershipResult) {\n    logger.warning('passkey_delete_unauthorized', { userId, authenticatorId });\n    return err('Authenticator not found or unauthorized', {\n      authenticator: 'You do not have permission to delete this authenticator',\n    });\n  }\n\n  // Check if user would have minimum authenticators after deletion\n  const countResult = await repo.countAuthenticatorsByUserId(userId);\n  if (isError(countResult)) {\n    logger.error('passkey_delete_count_failed', { userId, error: countResult });\n    return countResult;\n  }\n\n  if (countResult <= MIN_AUTHENTICATORS_PER_USER) {\n    logger.warning('passkey_delete_minimum_required', { userId, count: countResult });\n    return err('Cannot delete last authenticator', {\n      authenticator: 'You must have at least one authenticator for security',\n    });\n  }\n\n  // Delete the authenticator\n  const deleteResult = await repo.deleteAuthenticator(authenticatorId);\n  if (isError(deleteResult)) {\n    logger.error('passkey_delete_failed', { userId, authenticatorId, error: deleteResult });\n    return deleteResult;\n  }\n\n  return ok(true);\n}\n\n/**\n * Generate registration options for adding a new passkey\n */\nexport async function generateAddPasskeyOptions(\n  context: Readonly<RouterContextProvider>,\n  request: Request,\n  userId: string,\n  rpName: string,\n  rpId: string\n): Promise<Result<{ challenge: string; options: PublicKeyCredentialCreationOptions }>> {\n  const repo = getAuthRepository(context);\n  const authSession = await getAuthSession(request, context);\n\n  if (isError(authSession)) {\n    return authSession;\n  }\n\n  if (!authSession || !authSession.user) {\n    return err('User not authenticated', { user: 'Session does not contain user data' });\n  }\n\n  const session = authSession;\n\n  // Get existing authenticators to exclude\n  const existingAuthsResult = await repo.getAuthenticatorsByUserId(userId);\n  if (isError(existingAuthsResult)) {\n    logger.error('passkey_options_get_existing_failed', { userId, error: existingAuthsResult });\n    return existingAuthsResult;\n  }\n\n  // Map to include both ID and transports for proper exclusion\n  const excludeCredentials = existingAuthsResult.map((auth: Authenticator) => ({ id: auth.id, transports: auth.transports as string[] }));\n  const challenge = generateChallenge();\n  const options = createRegistrationOptions(rpName, rpId, session.user.email, session.user.displayName, challenge, excludeCredentials);\n\n  return ok({ challenge, options });\n}\n",
    "import type { Result } from '@ycore/forge/result';\nimport { err, notFoundError, serverError, tryCatch } from '@ycore/forge/result';\nimport { getDatabase } from '@ycore/forge/services';\nimport { eq } from 'drizzle-orm';\nimport type { DrizzleD1Database } from 'drizzle-orm/d1';\nimport type { RouterContextProvider } from 'react-router';\nimport type { Authenticator, NewAuthenticator, NewUser, User } from '../schema';\nimport { authenticators, users } from '../schema';\n\nexport class AuthRepository {\n  constructor(private db: DrizzleD1Database<Record<string, unknown>>) { }\n\n  /**\n   * Get user by ID\n   * Returns User or AppError (including not found error)\n   */\n  async getUserById(id: string): Promise<Result<User>> {\n    return tryCatch(async () => {\n      const result = await this.db.select().from(users).where(eq(users.id, id)).get();\n\n      if (!result) {\n        return notFoundError('User', id);\n      }\n\n      return result;\n    }, `Failed to get user by ID: ${id}`);\n  }\n\n  /**\n   * Get user by email\n   * Returns User or AppError (including not found error)\n   */\n  async getUserByEmail(email: string): Promise<Result<User>> {\n    return tryCatch(async () => {\n      const result = await this.db.select().from(users).where(eq(users.email, email)).get();\n\n      if (!result) {\n        return notFoundError('User', email);\n      }\n\n      return result;\n    }, `Failed to get user by email: ${email}`);\n  }\n\n  /**\n   * Create a new user\n   * Returns the created User or AppError if failed\n   */\n  async createUser(email: string, displayName: string): Promise<Result<User>> {\n    try {\n      const newUser: NewUser = { email, displayName };\n      const [result] = await this.db.insert(users).values(newUser).returning();\n\n      if (!result) {\n        return err('Failed to create user', { email, displayName });\n      }\n\n      return result;\n    } catch (error) {\n      // Check for unique constraint violation\n      if (error instanceof Error && error.message.includes('UNIQUE')) {\n        return err('Email already exists', {\n          email,\n          code: 'DUPLICATE_USER',\n        });\n      }\n\n      return serverError('Failed to create user', error as Error);\n    }\n  }\n\n  /**\n   * Get authenticator by ID\n   * Returns Authenticator or AppError (including not found error)\n   */\n  async getAuthenticatorById(id: string): Promise<Result<Authenticator>> {\n    return tryCatch(async () => {\n      const result = await this.db.select().from(authenticators).where(eq(authenticators.id, id)).get();\n\n      if (!result) {\n        return notFoundError('Authenticator', id);\n      }\n\n      return result;\n    }, `Failed to get authenticator by ID: ${id}`);\n  }\n\n  /**\n   * Get all authenticators for a user\n   * Returns array of Authenticators (empty if none) or AppError if database error\n   */\n  async getAuthenticatorsByUserId(userId: string): Promise<Result<Authenticator[]>> {\n    return tryCatch(async () => {\n      const result = await this.db.select().from(authenticators).where(eq(authenticators.userId, userId)).all();\n\n      return result;\n    }, `Failed to get authenticators for user: ${userId}`);\n  }\n\n  /**\n   * Create a new authenticator\n   * Returns the created Authenticator or AppError if failed\n   */\n  async createAuthenticator(authenticator: Omit<NewAuthenticator, 'createdAt' | 'updatedAt'>): Promise<Result<Authenticator>> {\n    try {\n      const [result] = await this.db.insert(authenticators).values(authenticator).returning();\n\n      if (!result) {\n        return err('Failed to create authenticator', { id: authenticator.id });\n      }\n\n      return result;\n    } catch (error) {\n      return serverError('Failed to create authenticator', error as Error);\n    }\n  }\n\n  /**\n   * Update authenticator counter\n   * Returns true if updated, or AppError if failed\n   */\n  async updateAuthenticatorCounter(id: string, counter: number): Promise<Result<boolean>> {\n    try {\n      const result = await this.db.update(authenticators).set({ counter }).where(eq(authenticators.id, id)).returning();\n\n      if (result.length === 0) {\n        return notFoundError('Authenticator', id);\n      }\n\n      return true;\n    } catch (error) {\n      return serverError('Failed to update authenticator counter', error as Error);\n    }\n  }\n\n  /**\n   * Update authenticator usage (counter and last used timestamp)\n   * Returns true if updated, or AppError if failed\n   */\n  async updateAuthenticatorUsage(id: string, counter: number, lastUsedAt: Date): Promise<Result<boolean>> {\n    try {\n      const result = await this.db\n        .update(authenticators)\n        .set({\n          counter,\n          lastUsedAt,\n        })\n        .where(eq(authenticators.id, id))\n        .returning();\n\n      if (result.length === 0) {\n        return notFoundError('Authenticator', id);\n      }\n\n      return true;\n    } catch (error) {\n      return serverError('Failed to update authenticator usage', error as Error);\n    }\n  }\n\n  /**\n   * Update authenticator name\n   * Returns updated authenticator or AppError if failed\n   */\n  async updateAuthenticatorName(id: string, name: string): Promise<Result<Authenticator>> {\n    try {\n      const result = await this.db.update(authenticators).set({ name }).where(eq(authenticators.id, id)).returning();\n\n      if (result.length === 0) {\n        return notFoundError('Authenticator', id);\n      }\n\n      const updatedAuthenticator = result[0];\n      if (!updatedAuthenticator) {\n        return serverError('Failed to retrieve updated authenticator', new Error('Update returned empty result'));\n      }\n\n      return updatedAuthenticator;\n    } catch (error) {\n      return serverError('Failed to update authenticator name', error as Error);\n    }\n  }\n\n  /**\n   * Delete an authenticator\n   * Returns true if deleted, or AppError if failed\n   */\n  async deleteAuthenticator(id: string): Promise<Result<boolean>> {\n    try {\n      const result = await this.db.delete(authenticators).where(eq(authenticators.id, id)).returning();\n\n      if (result.length === 0) {\n        return notFoundError('Authenticator', id);\n      }\n\n      return true;\n    } catch (error) {\n      return serverError('Failed to delete authenticator', error as Error);\n    }\n  }\n\n  /**\n   * Check if an authenticator belongs to a specific user\n   * Returns true if authenticator exists and belongs to user, false otherwise\n   */\n  async authenticatorBelongsToUser(id: string, userId: string): Promise<Result<boolean>> {\n    return tryCatch(async () => {\n      const result = await this.db.select().from(authenticators).where(eq(authenticators.id, id)).get();\n\n      if (!result) {\n        return false;\n      }\n\n      return result.userId === userId;\n    }, `Failed to verify authenticator ownership for ID: ${id}`);\n  }\n\n  /**\n   * Count authenticators for a user\n   * Returns count or AppError if database error\n   */\n  async countAuthenticatorsByUserId(userId: string): Promise<Result<number>> {\n    return tryCatch(async () => {\n      const result = await this.db.select().from(authenticators).where(eq(authenticators.userId, userId)).all();\n\n      return result.length;\n    }, `Failed to count authenticators for user: ${userId}`);\n  }\n\n  /**\n   * Update user email\n   * Returns updated User or AppError if failed\n   */\n  async updateUserEmail(id: string, newEmail: string): Promise<Result<User>> {\n    try {\n      const result = await this.db\n        .update(users)\n        .set({ email: newEmail, emailVerified: false })\n        .where(eq(users.id, id))\n        .returning();\n\n      if (result.length === 0) {\n        return notFoundError('User', id);\n      }\n\n      const updatedUser = result[0];\n      if (!updatedUser) {\n        return serverError('Failed to retrieve updated user', new Error('Update returned empty result'));\n      }\n\n      return updatedUser;\n    } catch (error) {\n      // Check for unique constraint violation\n      if (error instanceof Error && error.message.includes('UNIQUE')) {\n        return err('Email already exists', {\n          email: newEmail,\n          code: 'DUPLICATE_EMAIL',\n        });\n      }\n\n      return serverError('Failed to update user email', error as Error);\n    }\n  }\n\n  /**\n   * Update user email verified status\n   * Returns updated User or AppError if failed\n   */\n  async updateEmailVerified(id: string, verified: boolean): Promise<Result<User>> {\n    try {\n      const result = await this.db\n        .update(users)\n        .set({ emailVerified: verified })\n        .where(eq(users.id, id))\n        .returning();\n\n      if (result.length === 0) {\n        return notFoundError('User', id);\n      }\n\n      const updatedUser = result[0];\n      if (!updatedUser) {\n        return serverError('Failed to retrieve updated user', new Error('Update returned empty result'));\n      }\n\n      return updatedUser;\n    } catch (error) {\n      return serverError('Failed to update email verified status', error as Error);\n    }\n  }\n\n  /**\n   * Delete a user and all their authenticators\n   * Returns true if deleted, or AppError if failed\n   */\n  async deleteUser(id: string): Promise<Result<boolean>> {\n    try {\n      // Use a transaction to ensure consistency\n      const deleteAuthenticatorsResult = await this.db.delete(authenticators).where(eq(authenticators.userId, id));\n\n      const deleteUserResult = await this.db.delete(users).where(eq(users.id, id)).returning();\n\n      if (deleteUserResult.length === 0) {\n        return notFoundError('User', id);\n      }\n\n      return true;\n    } catch (error) {\n      return serverError('Failed to delete user', error as Error);\n    }\n  }\n}\n\n/**\n * Get authentication repository instance\n */\nexport function getAuthRepository(context: Readonly<RouterContextProvider>) {\n  const db = getDatabase(context);\n  return new AuthRepository(db);\n}\n",
    "const entityKind = Symbol.for(\"drizzle:entityKind\");\nconst hasOwnEntityKind = Symbol.for(\"drizzle:hasOwnEntityKind\");\nfunction is(value, type) {\n  if (!value || typeof value !== \"object\") {\n    return false;\n  }\n  if (value instanceof type) {\n    return true;\n  }\n  if (!Object.prototype.hasOwnProperty.call(type, entityKind)) {\n    throw new Error(\n      `Class \"${type.name ?? \"<unknown>\"}\" doesn't look like a Drizzle entity. If this is incorrect and the class is provided by Drizzle, please report this as a bug.`\n    );\n  }\n  let cls = Object.getPrototypeOf(value).constructor;\n  if (cls) {\n    while (cls) {\n      if (entityKind in cls && cls[entityKind] === type[entityKind]) {\n        return true;\n      }\n      cls = Object.getPrototypeOf(cls);\n    }\n  }\n  return false;\n}\nexport {\n  entityKind,\n  hasOwnEntityKind,\n  is\n};\n//# sourceMappingURL=entity.js.map",
    "import { entityKind } from \"./entity.js\";\nclass Column {\n  constructor(table, config) {\n    this.table = table;\n    this.config = config;\n    this.name = config.name;\n    this.keyAsName = config.keyAsName;\n    this.notNull = config.notNull;\n    this.default = config.default;\n    this.defaultFn = config.defaultFn;\n    this.onUpdateFn = config.onUpdateFn;\n    this.hasDefault = config.hasDefault;\n    this.primary = config.primaryKey;\n    this.isUnique = config.isUnique;\n    this.uniqueName = config.uniqueName;\n    this.uniqueType = config.uniqueType;\n    this.dataType = config.dataType;\n    this.columnType = config.columnType;\n    this.generated = config.generated;\n    this.generatedIdentity = config.generatedIdentity;\n  }\n  static [entityKind] = \"Column\";\n  name;\n  keyAsName;\n  primary;\n  notNull;\n  default;\n  defaultFn;\n  onUpdateFn;\n  hasDefault;\n  isUnique;\n  uniqueName;\n  uniqueType;\n  dataType;\n  columnType;\n  enumValues = void 0;\n  generated = void 0;\n  generatedIdentity = void 0;\n  config;\n  mapFromDriverValue(value) {\n    return value;\n  }\n  mapToDriverValue(value) {\n    return value;\n  }\n  // ** @internal */\n  shouldDisableInsert() {\n    return this.config.generated !== void 0 && this.config.generated.type !== \"byDefault\";\n  }\n}\nexport {\n  Column\n};\n//# sourceMappingURL=column.js.map",
    "import { entityKind } from \"./entity.js\";\nclass ColumnBuilder {\n  static [entityKind] = \"ColumnBuilder\";\n  config;\n  constructor(name, dataType, columnType) {\n    this.config = {\n      name,\n      keyAsName: name === \"\",\n      notNull: false,\n      default: void 0,\n      hasDefault: false,\n      primaryKey: false,\n      isUnique: false,\n      uniqueName: void 0,\n      uniqueType: void 0,\n      dataType,\n      columnType,\n      generated: void 0\n    };\n  }\n  /**\n   * Changes the data type of the column. Commonly used with `json` columns. Also, useful for branded types.\n   *\n   * @example\n   * ```ts\n   * const users = pgTable('users', {\n   * \tid: integer('id').$type<UserId>().primaryKey(),\n   * \tdetails: json('details').$type<UserDetails>().notNull(),\n   * });\n   * ```\n   */\n  $type() {\n    return this;\n  }\n  /**\n   * Adds a `not null` clause to the column definition.\n   *\n   * Affects the `select` model of the table - columns *without* `not null` will be nullable on select.\n   */\n  notNull() {\n    this.config.notNull = true;\n    return this;\n  }\n  /**\n   * Adds a `default <value>` clause to the column definition.\n   *\n   * Affects the `insert` model of the table - columns *with* `default` are optional on insert.\n   *\n   * If you need to set a dynamic default value, use {@link $defaultFn} instead.\n   */\n  default(value) {\n    this.config.default = value;\n    this.config.hasDefault = true;\n    return this;\n  }\n  /**\n   * Adds a dynamic default value to the column.\n   * The function will be called when the row is inserted, and the returned value will be used as the column value.\n   *\n   * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.\n   */\n  $defaultFn(fn) {\n    this.config.defaultFn = fn;\n    this.config.hasDefault = true;\n    return this;\n  }\n  /**\n   * Alias for {@link $defaultFn}.\n   */\n  $default = this.$defaultFn;\n  /**\n   * Adds a dynamic update value to the column.\n   * The function will be called when the row is updated, and the returned value will be used as the column value if none is provided.\n   * If no `default` (or `$defaultFn`) value is provided, the function will be called when the row is inserted as well, and the returned value will be used as the column value.\n   *\n   * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.\n   */\n  $onUpdateFn(fn) {\n    this.config.onUpdateFn = fn;\n    this.config.hasDefault = true;\n    return this;\n  }\n  /**\n   * Alias for {@link $onUpdateFn}.\n   */\n  $onUpdate = this.$onUpdateFn;\n  /**\n   * Adds a `primary key` clause to the column definition. This implicitly makes the column `not null`.\n   *\n   * In SQLite, `integer primary key` implicitly makes the column auto-incrementing.\n   */\n  primaryKey() {\n    this.config.primaryKey = true;\n    this.config.notNull = true;\n    return this;\n  }\n  /** @internal Sets the name of the column to the key within the table definition if a name was not given. */\n  setName(name) {\n    if (this.config.name !== \"\") return;\n    this.config.name = name;\n  }\n}\nexport {\n  ColumnBuilder\n};\n//# sourceMappingURL=column-builder.js.map",
    "const TableName = Symbol.for(\"drizzle:Name\");\nexport {\n  TableName\n};\n//# sourceMappingURL=table.utils.js.map",
    "function iife(fn, ...args) {\n  return fn(...args);\n}\nexport {\n  iife\n};\n//# sourceMappingURL=tracing-utils.js.map",
    "import { entityKind } from \"../entity.js\";\nimport { TableName } from \"../table.utils.js\";\nfunction unique(name) {\n  return new UniqueOnConstraintBuilder(name);\n}\nfunction uniqueKeyName(table, columns) {\n  return `${table[TableName]}_${columns.join(\"_\")}_unique`;\n}\nclass UniqueConstraintBuilder {\n  constructor(columns, name) {\n    this.name = name;\n    this.columns = columns;\n  }\n  static [entityKind] = \"PgUniqueConstraintBuilder\";\n  /** @internal */\n  columns;\n  /** @internal */\n  nullsNotDistinctConfig = false;\n  nullsNotDistinct() {\n    this.nullsNotDistinctConfig = true;\n    return this;\n  }\n  /** @internal */\n  build(table) {\n    return new UniqueConstraint(table, this.columns, this.nullsNotDistinctConfig, this.name);\n  }\n}\nclass UniqueOnConstraintBuilder {\n  static [entityKind] = \"PgUniqueOnConstraintBuilder\";\n  /** @internal */\n  name;\n  constructor(name) {\n    this.name = name;\n  }\n  on(...columns) {\n    return new UniqueConstraintBuilder(columns, this.name);\n  }\n}\nclass UniqueConstraint {\n  constructor(table, columns, nullsNotDistinct, name) {\n    this.table = table;\n    this.columns = columns;\n    this.name = name ?? uniqueKeyName(this.table, this.columns.map((column) => column.name));\n    this.nullsNotDistinct = nullsNotDistinct;\n  }\n  static [entityKind] = \"PgUniqueConstraint\";\n  columns;\n  name;\n  nullsNotDistinct = false;\n  getName() {\n    return this.name;\n  }\n}\nexport {\n  UniqueConstraint,\n  UniqueConstraintBuilder,\n  UniqueOnConstraintBuilder,\n  unique,\n  uniqueKeyName\n};\n//# sourceMappingURL=unique-constraint.js.map",
    "import { ColumnBuilder } from \"../../column-builder.js\";\nimport { Column } from \"../../column.js\";\nimport { entityKind, is } from \"../../entity.js\";\nimport { ForeignKeyBuilder } from \"../foreign-keys.js\";\nimport { iife } from \"../../tracing-utils.js\";\nimport { uniqueKeyName } from \"../unique-constraint.js\";\nimport { makePgArray, parsePgArray } from \"../utils/array.js\";\nclass PgColumnBuilder extends ColumnBuilder {\n  foreignKeyConfigs = [];\n  static [entityKind] = \"PgColumnBuilder\";\n  array(size) {\n    return new PgArrayBuilder(this.config.name, this, size);\n  }\n  references(ref, actions = {}) {\n    this.foreignKeyConfigs.push({ ref, actions });\n    return this;\n  }\n  unique(name, config) {\n    this.config.isUnique = true;\n    this.config.uniqueName = name;\n    this.config.uniqueType = config?.nulls;\n    return this;\n  }\n  generatedAlwaysAs(as) {\n    this.config.generated = {\n      as,\n      type: \"always\",\n      mode: \"stored\"\n    };\n    return this;\n  }\n  /** @internal */\n  buildForeignKeys(column, table) {\n    return this.foreignKeyConfigs.map(({ ref, actions }) => {\n      return iife(\n        (ref2, actions2) => {\n          const builder = new ForeignKeyBuilder(() => {\n            const foreignColumn = ref2();\n            return { columns: [column], foreignColumns: [foreignColumn] };\n          });\n          if (actions2.onUpdate) {\n            builder.onUpdate(actions2.onUpdate);\n          }\n          if (actions2.onDelete) {\n            builder.onDelete(actions2.onDelete);\n          }\n          return builder.build(table);\n        },\n        ref,\n        actions\n      );\n    });\n  }\n  /** @internal */\n  buildExtraConfigColumn(table) {\n    return new ExtraConfigColumn(table, this.config);\n  }\n}\nclass PgColumn extends Column {\n  constructor(table, config) {\n    if (!config.uniqueName) {\n      config.uniqueName = uniqueKeyName(table, [config.name]);\n    }\n    super(table, config);\n    this.table = table;\n  }\n  static [entityKind] = \"PgColumn\";\n}\nclass ExtraConfigColumn extends PgColumn {\n  static [entityKind] = \"ExtraConfigColumn\";\n  getSQLType() {\n    return this.getSQLType();\n  }\n  indexConfig = {\n    order: this.config.order ?? \"asc\",\n    nulls: this.config.nulls ?? \"last\",\n    opClass: this.config.opClass\n  };\n  defaultConfig = {\n    order: \"asc\",\n    nulls: \"last\",\n    opClass: void 0\n  };\n  asc() {\n    this.indexConfig.order = \"asc\";\n    return this;\n  }\n  desc() {\n    this.indexConfig.order = \"desc\";\n    return this;\n  }\n  nullsFirst() {\n    this.indexConfig.nulls = \"first\";\n    return this;\n  }\n  nullsLast() {\n    this.indexConfig.nulls = \"last\";\n    return this;\n  }\n  /**\n   * ### PostgreSQL documentation quote\n   *\n   * > An operator class with optional parameters can be specified for each column of an index.\n   * The operator class identifies the operators to be used by the index for that column.\n   * For example, a B-tree index on four-byte integers would use the int4_ops class;\n   * this operator class includes comparison functions for four-byte integers.\n   * In practice the default operator class for the column's data type is usually sufficient.\n   * The main point of having operator classes is that for some data types, there could be more than one meaningful ordering.\n   * For example, we might want to sort a complex-number data type either by absolute value or by real part.\n   * We could do this by defining two operator classes for the data type and then selecting the proper class when creating an index.\n   * More information about operator classes check:\n   *\n   * ### Useful links\n   * https://www.postgresql.org/docs/current/sql-createindex.html\n   *\n   * https://www.postgresql.org/docs/current/indexes-opclass.html\n   *\n   * https://www.postgresql.org/docs/current/xindex.html\n   *\n   * ### Additional types\n   * If you have the `pg_vector` extension installed in your database, you can use the\n   * `vector_l2_ops`, `vector_ip_ops`, `vector_cosine_ops`, `vector_l1_ops`, `bit_hamming_ops`, `bit_jaccard_ops`, `halfvec_l2_ops`, `sparsevec_l2_ops` options, which are predefined types.\n   *\n   * **You can always specify any string you want in the operator class, in case Drizzle doesn't have it natively in its types**\n   *\n   * @param opClass\n   * @returns\n   */\n  op(opClass) {\n    this.indexConfig.opClass = opClass;\n    return this;\n  }\n}\nclass IndexedColumn {\n  static [entityKind] = \"IndexedColumn\";\n  constructor(name, keyAsName, type, indexConfig) {\n    this.name = name;\n    this.keyAsName = keyAsName;\n    this.type = type;\n    this.indexConfig = indexConfig;\n  }\n  name;\n  keyAsName;\n  type;\n  indexConfig;\n}\nclass PgArrayBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgArrayBuilder\";\n  constructor(name, baseBuilder, size) {\n    super(name, \"array\", \"PgArray\");\n    this.config.baseBuilder = baseBuilder;\n    this.config.size = size;\n  }\n  /** @internal */\n  build(table) {\n    const baseColumn = this.config.baseBuilder.build(table);\n    return new PgArray(\n      table,\n      this.config,\n      baseColumn\n    );\n  }\n}\nclass PgArray extends PgColumn {\n  constructor(table, config, baseColumn, range) {\n    super(table, config);\n    this.baseColumn = baseColumn;\n    this.range = range;\n    this.size = config.size;\n  }\n  size;\n  static [entityKind] = \"PgArray\";\n  getSQLType() {\n    return `${this.baseColumn.getSQLType()}[${typeof this.size === \"number\" ? this.size : \"\"}]`;\n  }\n  mapFromDriverValue(value) {\n    if (typeof value === \"string\") {\n      value = parsePgArray(value);\n    }\n    return value.map((v) => this.baseColumn.mapFromDriverValue(v));\n  }\n  mapToDriverValue(value, isNestedArray = false) {\n    const a = value.map(\n      (v) => v === null ? null : is(this.baseColumn, PgArray) ? this.baseColumn.mapToDriverValue(v, true) : this.baseColumn.mapToDriverValue(v)\n    );\n    if (isNestedArray) return a;\n    return makePgArray(a);\n  }\n}\nexport {\n  ExtraConfigColumn,\n  IndexedColumn,\n  PgArray,\n  PgArrayBuilder,\n  PgColumn,\n  PgColumnBuilder\n};\n//# sourceMappingURL=common.js.map",
    "import { entityKind } from \"../../entity.js\";\nimport { PgColumn, PgColumnBuilder } from \"./common.js\";\nclass PgEnumObjectColumnBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgEnumObjectColumnBuilder\";\n  constructor(name, enumInstance) {\n    super(name, \"string\", \"PgEnumObjectColumn\");\n    this.config.enum = enumInstance;\n  }\n  /** @internal */\n  build(table) {\n    return new PgEnumObjectColumn(\n      table,\n      this.config\n    );\n  }\n}\nclass PgEnumObjectColumn extends PgColumn {\n  static [entityKind] = \"PgEnumObjectColumn\";\n  enum;\n  enumValues = this.config.enum.enumValues;\n  constructor(table, config) {\n    super(table, config);\n    this.enum = config.enum;\n  }\n  getSQLType() {\n    return this.enum.enumName;\n  }\n}\nconst isPgEnumSym = Symbol.for(\"drizzle:isPgEnum\");\nfunction isPgEnum(obj) {\n  return !!obj && typeof obj === \"function\" && isPgEnumSym in obj && obj[isPgEnumSym] === true;\n}\nclass PgEnumColumnBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgEnumColumnBuilder\";\n  constructor(name, enumInstance) {\n    super(name, \"string\", \"PgEnumColumn\");\n    this.config.enum = enumInstance;\n  }\n  /** @internal */\n  build(table) {\n    return new PgEnumColumn(\n      table,\n      this.config\n    );\n  }\n}\nclass PgEnumColumn extends PgColumn {\n  static [entityKind] = \"PgEnumColumn\";\n  enum = this.config.enum;\n  enumValues = this.config.enum.enumValues;\n  constructor(table, config) {\n    super(table, config);\n    this.enum = config.enum;\n  }\n  getSQLType() {\n    return this.enum.enumName;\n  }\n}\nfunction pgEnum(enumName, input) {\n  return Array.isArray(input) ? pgEnumWithSchema(enumName, [...input], void 0) : pgEnumObjectWithSchema(enumName, input, void 0);\n}\nfunction pgEnumWithSchema(enumName, values, schema) {\n  const enumInstance = Object.assign(\n    (name) => new PgEnumColumnBuilder(name ?? \"\", enumInstance),\n    {\n      enumName,\n      enumValues: values,\n      schema,\n      [isPgEnumSym]: true\n    }\n  );\n  return enumInstance;\n}\nfunction pgEnumObjectWithSchema(enumName, values, schema) {\n  const enumInstance = Object.assign(\n    (name) => new PgEnumObjectColumnBuilder(name ?? \"\", enumInstance),\n    {\n      enumName,\n      enumValues: Object.values(values),\n      schema,\n      [isPgEnumSym]: true\n    }\n  );\n  return enumInstance;\n}\nexport {\n  PgEnumColumn,\n  PgEnumColumnBuilder,\n  PgEnumObjectColumn,\n  PgEnumObjectColumnBuilder,\n  isPgEnum,\n  pgEnum,\n  pgEnumObjectWithSchema,\n  pgEnumWithSchema\n};\n//# sourceMappingURL=enum.js.map",
    "import { entityKind } from \"./entity.js\";\nclass Subquery {\n  static [entityKind] = \"Subquery\";\n  constructor(sql, fields, alias, isWith = false, usedTables = []) {\n    this._ = {\n      brand: \"Subquery\",\n      sql,\n      selectedFields: fields,\n      alias,\n      isWith,\n      usedTables\n    };\n  }\n  // getSQL(): SQL<unknown> {\n  // \treturn new SQL([this]);\n  // }\n}\nclass WithSubquery extends Subquery {\n  static [entityKind] = \"WithSubquery\";\n}\nexport {\n  Subquery,\n  WithSubquery\n};\n//# sourceMappingURL=subquery.js.map",
    "// package.json\nvar version = \"0.44.6\";\n\n// src/version.ts\nvar compatibilityVersion = 10;\nexport {\n  compatibilityVersion,\n  version as npmVersion\n};\n",
    "import { iife } from \"./tracing-utils.js\";\nimport { npmVersion } from \"./version.js\";\nlet otel;\nlet rawTracer;\nconst tracer = {\n  startActiveSpan(name, fn) {\n    if (!otel) {\n      return fn();\n    }\n    if (!rawTracer) {\n      rawTracer = otel.trace.getTracer(\"drizzle-orm\", npmVersion);\n    }\n    return iife(\n      (otel2, rawTracer2) => rawTracer2.startActiveSpan(\n        name,\n        (span) => {\n          try {\n            return fn(span);\n          } catch (e) {\n            span.setStatus({\n              code: otel2.SpanStatusCode.ERROR,\n              message: e instanceof Error ? e.message : \"Unknown error\"\n              // eslint-disable-line no-instanceof/no-instanceof\n            });\n            throw e;\n          } finally {\n            span.end();\n          }\n        }\n      ),\n      otel,\n      rawTracer\n    );\n  }\n};\nexport {\n  tracer\n};\n//# sourceMappingURL=tracing.js.map",
    "const ViewBaseConfig = Symbol.for(\"drizzle:ViewBaseConfig\");\nexport {\n  ViewBaseConfig\n};\n//# sourceMappingURL=view-common.js.map",
    "import { entityKind } from \"./entity.js\";\nimport { TableName } from \"./table.utils.js\";\nconst Schema = Symbol.for(\"drizzle:Schema\");\nconst Columns = Symbol.for(\"drizzle:Columns\");\nconst ExtraConfigColumns = Symbol.for(\"drizzle:ExtraConfigColumns\");\nconst OriginalName = Symbol.for(\"drizzle:OriginalName\");\nconst BaseName = Symbol.for(\"drizzle:BaseName\");\nconst IsAlias = Symbol.for(\"drizzle:IsAlias\");\nconst ExtraConfigBuilder = Symbol.for(\"drizzle:ExtraConfigBuilder\");\nconst IsDrizzleTable = Symbol.for(\"drizzle:IsDrizzleTable\");\nclass Table {\n  static [entityKind] = \"Table\";\n  /** @internal */\n  static Symbol = {\n    Name: TableName,\n    Schema,\n    OriginalName,\n    Columns,\n    ExtraConfigColumns,\n    BaseName,\n    IsAlias,\n    ExtraConfigBuilder\n  };\n  /**\n   * @internal\n   * Can be changed if the table is aliased.\n   */\n  [TableName];\n  /**\n   * @internal\n   * Used to store the original name of the table, before any aliasing.\n   */\n  [OriginalName];\n  /** @internal */\n  [Schema];\n  /** @internal */\n  [Columns];\n  /** @internal */\n  [ExtraConfigColumns];\n  /**\n   *  @internal\n   * Used to store the table name before the transformation via the `tableCreator` functions.\n   */\n  [BaseName];\n  /** @internal */\n  [IsAlias] = false;\n  /** @internal */\n  [IsDrizzleTable] = true;\n  /** @internal */\n  [ExtraConfigBuilder] = void 0;\n  constructor(name, schema, baseName) {\n    this[TableName] = this[OriginalName] = name;\n    this[Schema] = schema;\n    this[BaseName] = baseName;\n  }\n}\nfunction isTable(table) {\n  return typeof table === \"object\" && table !== null && IsDrizzleTable in table;\n}\nfunction getTableName(table) {\n  return table[TableName];\n}\nfunction getTableUniqueName(table) {\n  return `${table[Schema] ?? \"public\"}.${table[TableName]}`;\n}\nexport {\n  BaseName,\n  Columns,\n  ExtraConfigBuilder,\n  ExtraConfigColumns,\n  IsAlias,\n  OriginalName,\n  Schema,\n  Table,\n  getTableName,\n  getTableUniqueName,\n  isTable\n};\n//# sourceMappingURL=table.js.map",
    "import { entityKind, is } from \"../entity.js\";\nimport { isPgEnum } from \"../pg-core/columns/enum.js\";\nimport { Subquery } from \"../subquery.js\";\nimport { tracer } from \"../tracing.js\";\nimport { ViewBaseConfig } from \"../view-common.js\";\nimport { Column } from \"../column.js\";\nimport { IsAlias, Table } from \"../table.js\";\nclass FakePrimitiveParam {\n  static [entityKind] = \"FakePrimitiveParam\";\n}\nfunction isSQLWrapper(value) {\n  return value !== null && value !== void 0 && typeof value.getSQL === \"function\";\n}\nfunction mergeQueries(queries) {\n  const result = { sql: \"\", params: [] };\n  for (const query of queries) {\n    result.sql += query.sql;\n    result.params.push(...query.params);\n    if (query.typings?.length) {\n      if (!result.typings) {\n        result.typings = [];\n      }\n      result.typings.push(...query.typings);\n    }\n  }\n  return result;\n}\nclass StringChunk {\n  static [entityKind] = \"StringChunk\";\n  value;\n  constructor(value) {\n    this.value = Array.isArray(value) ? value : [value];\n  }\n  getSQL() {\n    return new SQL([this]);\n  }\n}\nclass SQL {\n  constructor(queryChunks) {\n    this.queryChunks = queryChunks;\n    for (const chunk of queryChunks) {\n      if (is(chunk, Table)) {\n        const schemaName = chunk[Table.Symbol.Schema];\n        this.usedTables.push(\n          schemaName === void 0 ? chunk[Table.Symbol.Name] : schemaName + \".\" + chunk[Table.Symbol.Name]\n        );\n      }\n    }\n  }\n  static [entityKind] = \"SQL\";\n  /** @internal */\n  decoder = noopDecoder;\n  shouldInlineParams = false;\n  /** @internal */\n  usedTables = [];\n  append(query) {\n    this.queryChunks.push(...query.queryChunks);\n    return this;\n  }\n  toQuery(config) {\n    return tracer.startActiveSpan(\"drizzle.buildSQL\", (span) => {\n      const query = this.buildQueryFromSourceParams(this.queryChunks, config);\n      span?.setAttributes({\n        \"drizzle.query.text\": query.sql,\n        \"drizzle.query.params\": JSON.stringify(query.params)\n      });\n      return query;\n    });\n  }\n  buildQueryFromSourceParams(chunks, _config) {\n    const config = Object.assign({}, _config, {\n      inlineParams: _config.inlineParams || this.shouldInlineParams,\n      paramStartIndex: _config.paramStartIndex || { value: 0 }\n    });\n    const {\n      casing,\n      escapeName,\n      escapeParam,\n      prepareTyping,\n      inlineParams,\n      paramStartIndex\n    } = config;\n    return mergeQueries(chunks.map((chunk) => {\n      if (is(chunk, StringChunk)) {\n        return { sql: chunk.value.join(\"\"), params: [] };\n      }\n      if (is(chunk, Name)) {\n        return { sql: escapeName(chunk.value), params: [] };\n      }\n      if (chunk === void 0) {\n        return { sql: \"\", params: [] };\n      }\n      if (Array.isArray(chunk)) {\n        const result = [new StringChunk(\"(\")];\n        for (const [i, p] of chunk.entries()) {\n          result.push(p);\n          if (i < chunk.length - 1) {\n            result.push(new StringChunk(\", \"));\n          }\n        }\n        result.push(new StringChunk(\")\"));\n        return this.buildQueryFromSourceParams(result, config);\n      }\n      if (is(chunk, SQL)) {\n        return this.buildQueryFromSourceParams(chunk.queryChunks, {\n          ...config,\n          inlineParams: inlineParams || chunk.shouldInlineParams\n        });\n      }\n      if (is(chunk, Table)) {\n        const schemaName = chunk[Table.Symbol.Schema];\n        const tableName = chunk[Table.Symbol.Name];\n        return {\n          sql: schemaName === void 0 || chunk[IsAlias] ? escapeName(tableName) : escapeName(schemaName) + \".\" + escapeName(tableName),\n          params: []\n        };\n      }\n      if (is(chunk, Column)) {\n        const columnName = casing.getColumnCasing(chunk);\n        if (_config.invokeSource === \"indexes\") {\n          return { sql: escapeName(columnName), params: [] };\n        }\n        const schemaName = chunk.table[Table.Symbol.Schema];\n        return {\n          sql: chunk.table[IsAlias] || schemaName === void 0 ? escapeName(chunk.table[Table.Symbol.Name]) + \".\" + escapeName(columnName) : escapeName(schemaName) + \".\" + escapeName(chunk.table[Table.Symbol.Name]) + \".\" + escapeName(columnName),\n          params: []\n        };\n      }\n      if (is(chunk, View)) {\n        const schemaName = chunk[ViewBaseConfig].schema;\n        const viewName = chunk[ViewBaseConfig].name;\n        return {\n          sql: schemaName === void 0 || chunk[ViewBaseConfig].isAlias ? escapeName(viewName) : escapeName(schemaName) + \".\" + escapeName(viewName),\n          params: []\n        };\n      }\n      if (is(chunk, Param)) {\n        if (is(chunk.value, Placeholder)) {\n          return { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: [\"none\"] };\n        }\n        const mappedValue = chunk.value === null ? null : chunk.encoder.mapToDriverValue(chunk.value);\n        if (is(mappedValue, SQL)) {\n          return this.buildQueryFromSourceParams([mappedValue], config);\n        }\n        if (inlineParams) {\n          return { sql: this.mapInlineParam(mappedValue, config), params: [] };\n        }\n        let typings = [\"none\"];\n        if (prepareTyping) {\n          typings = [prepareTyping(chunk.encoder)];\n        }\n        return { sql: escapeParam(paramStartIndex.value++, mappedValue), params: [mappedValue], typings };\n      }\n      if (is(chunk, Placeholder)) {\n        return { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: [\"none\"] };\n      }\n      if (is(chunk, SQL.Aliased) && chunk.fieldAlias !== void 0) {\n        return { sql: escapeName(chunk.fieldAlias), params: [] };\n      }\n      if (is(chunk, Subquery)) {\n        if (chunk._.isWith) {\n          return { sql: escapeName(chunk._.alias), params: [] };\n        }\n        return this.buildQueryFromSourceParams([\n          new StringChunk(\"(\"),\n          chunk._.sql,\n          new StringChunk(\") \"),\n          new Name(chunk._.alias)\n        ], config);\n      }\n      if (isPgEnum(chunk)) {\n        if (chunk.schema) {\n          return { sql: escapeName(chunk.schema) + \".\" + escapeName(chunk.enumName), params: [] };\n        }\n        return { sql: escapeName(chunk.enumName), params: [] };\n      }\n      if (isSQLWrapper(chunk)) {\n        if (chunk.shouldOmitSQLParens?.()) {\n          return this.buildQueryFromSourceParams([chunk.getSQL()], config);\n        }\n        return this.buildQueryFromSourceParams([\n          new StringChunk(\"(\"),\n          chunk.getSQL(),\n          new StringChunk(\")\")\n        ], config);\n      }\n      if (inlineParams) {\n        return { sql: this.mapInlineParam(chunk, config), params: [] };\n      }\n      return { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: [\"none\"] };\n    }));\n  }\n  mapInlineParam(chunk, { escapeString }) {\n    if (chunk === null) {\n      return \"null\";\n    }\n    if (typeof chunk === \"number\" || typeof chunk === \"boolean\") {\n      return chunk.toString();\n    }\n    if (typeof chunk === \"string\") {\n      return escapeString(chunk);\n    }\n    if (typeof chunk === \"object\") {\n      const mappedValueAsString = chunk.toString();\n      if (mappedValueAsString === \"[object Object]\") {\n        return escapeString(JSON.stringify(chunk));\n      }\n      return escapeString(mappedValueAsString);\n    }\n    throw new Error(\"Unexpected param value: \" + chunk);\n  }\n  getSQL() {\n    return this;\n  }\n  as(alias) {\n    if (alias === void 0) {\n      return this;\n    }\n    return new SQL.Aliased(this, alias);\n  }\n  mapWith(decoder) {\n    this.decoder = typeof decoder === \"function\" ? { mapFromDriverValue: decoder } : decoder;\n    return this;\n  }\n  inlineParams() {\n    this.shouldInlineParams = true;\n    return this;\n  }\n  /**\n   * This method is used to conditionally include a part of the query.\n   *\n   * @param condition - Condition to check\n   * @returns itself if the condition is `true`, otherwise `undefined`\n   */\n  if(condition) {\n    return condition ? this : void 0;\n  }\n}\nclass Name {\n  constructor(value) {\n    this.value = value;\n  }\n  static [entityKind] = \"Name\";\n  brand;\n  getSQL() {\n    return new SQL([this]);\n  }\n}\nfunction name(value) {\n  return new Name(value);\n}\nfunction isDriverValueEncoder(value) {\n  return typeof value === \"object\" && value !== null && \"mapToDriverValue\" in value && typeof value.mapToDriverValue === \"function\";\n}\nconst noopDecoder = {\n  mapFromDriverValue: (value) => value\n};\nconst noopEncoder = {\n  mapToDriverValue: (value) => value\n};\nconst noopMapper = {\n  ...noopDecoder,\n  ...noopEncoder\n};\nclass Param {\n  /**\n   * @param value - Parameter value\n   * @param encoder - Encoder to convert the value to a driver parameter\n   */\n  constructor(value, encoder = noopEncoder) {\n    this.value = value;\n    this.encoder = encoder;\n  }\n  static [entityKind] = \"Param\";\n  brand;\n  getSQL() {\n    return new SQL([this]);\n  }\n}\nfunction param(value, encoder) {\n  return new Param(value, encoder);\n}\nfunction sql(strings, ...params) {\n  const queryChunks = [];\n  if (params.length > 0 || strings.length > 0 && strings[0] !== \"\") {\n    queryChunks.push(new StringChunk(strings[0]));\n  }\n  for (const [paramIndex, param2] of params.entries()) {\n    queryChunks.push(param2, new StringChunk(strings[paramIndex + 1]));\n  }\n  return new SQL(queryChunks);\n}\n((sql2) => {\n  function empty() {\n    return new SQL([]);\n  }\n  sql2.empty = empty;\n  function fromList(list) {\n    return new SQL(list);\n  }\n  sql2.fromList = fromList;\n  function raw(str) {\n    return new SQL([new StringChunk(str)]);\n  }\n  sql2.raw = raw;\n  function join(chunks, separator) {\n    const result = [];\n    for (const [i, chunk] of chunks.entries()) {\n      if (i > 0 && separator !== void 0) {\n        result.push(separator);\n      }\n      result.push(chunk);\n    }\n    return new SQL(result);\n  }\n  sql2.join = join;\n  function identifier(value) {\n    return new Name(value);\n  }\n  sql2.identifier = identifier;\n  function placeholder2(name2) {\n    return new Placeholder(name2);\n  }\n  sql2.placeholder = placeholder2;\n  function param2(value, encoder) {\n    return new Param(value, encoder);\n  }\n  sql2.param = param2;\n})(sql || (sql = {}));\n((SQL2) => {\n  class Aliased {\n    constructor(sql2, fieldAlias) {\n      this.sql = sql2;\n      this.fieldAlias = fieldAlias;\n    }\n    static [entityKind] = \"SQL.Aliased\";\n    /** @internal */\n    isSelectionField = false;\n    getSQL() {\n      return this.sql;\n    }\n    /** @internal */\n    clone() {\n      return new Aliased(this.sql, this.fieldAlias);\n    }\n  }\n  SQL2.Aliased = Aliased;\n})(SQL || (SQL = {}));\nclass Placeholder {\n  constructor(name2) {\n    this.name = name2;\n  }\n  static [entityKind] = \"Placeholder\";\n  getSQL() {\n    return new SQL([this]);\n  }\n}\nfunction placeholder(name2) {\n  return new Placeholder(name2);\n}\nfunction fillPlaceholders(params, values) {\n  return params.map((p) => {\n    if (is(p, Placeholder)) {\n      if (!(p.name in values)) {\n        throw new Error(`No value for placeholder \"${p.name}\" was provided`);\n      }\n      return values[p.name];\n    }\n    if (is(p, Param) && is(p.value, Placeholder)) {\n      if (!(p.value.name in values)) {\n        throw new Error(`No value for placeholder \"${p.value.name}\" was provided`);\n      }\n      return p.encoder.mapToDriverValue(values[p.value.name]);\n    }\n    return p;\n  });\n}\nconst IsDrizzleView = Symbol.for(\"drizzle:IsDrizzleView\");\nclass View {\n  static [entityKind] = \"View\";\n  /** @internal */\n  [ViewBaseConfig];\n  /** @internal */\n  [IsDrizzleView] = true;\n  constructor({ name: name2, schema, selectedFields, query }) {\n    this[ViewBaseConfig] = {\n      name: name2,\n      originalName: name2,\n      schema,\n      selectedFields,\n      query,\n      isExisting: !query,\n      isAlias: false\n    };\n  }\n  getSQL() {\n    return new SQL([this]);\n  }\n}\nfunction isView(view) {\n  return typeof view === \"object\" && view !== null && IsDrizzleView in view;\n}\nfunction getViewName(view) {\n  return view[ViewBaseConfig].name;\n}\nColumn.prototype.getSQL = function() {\n  return new SQL([this]);\n};\nTable.prototype.getSQL = function() {\n  return new SQL([this]);\n};\nSubquery.prototype.getSQL = function() {\n  return new SQL([this]);\n};\nexport {\n  FakePrimitiveParam,\n  Name,\n  Param,\n  Placeholder,\n  SQL,\n  StringChunk,\n  View,\n  fillPlaceholders,\n  getViewName,\n  isDriverValueEncoder,\n  isSQLWrapper,\n  isView,\n  name,\n  noopDecoder,\n  noopEncoder,\n  noopMapper,\n  param,\n  placeholder,\n  sql\n};\n//# sourceMappingURL=sql.js.map",
    "import { Column } from \"./column.js\";\nimport { is } from \"./entity.js\";\nimport { Param, SQL, View } from \"./sql/sql.js\";\nimport { Subquery } from \"./subquery.js\";\nimport { getTableName, Table } from \"./table.js\";\nimport { ViewBaseConfig } from \"./view-common.js\";\nfunction mapResultRow(columns, row, joinsNotNullableMap) {\n  const nullifyMap = {};\n  const result = columns.reduce(\n    (result2, { path, field }, columnIndex) => {\n      let decoder;\n      if (is(field, Column)) {\n        decoder = field;\n      } else if (is(field, SQL)) {\n        decoder = field.decoder;\n      } else {\n        decoder = field.sql.decoder;\n      }\n      let node = result2;\n      for (const [pathChunkIndex, pathChunk] of path.entries()) {\n        if (pathChunkIndex < path.length - 1) {\n          if (!(pathChunk in node)) {\n            node[pathChunk] = {};\n          }\n          node = node[pathChunk];\n        } else {\n          const rawValue = row[columnIndex];\n          const value = node[pathChunk] = rawValue === null ? null : decoder.mapFromDriverValue(rawValue);\n          if (joinsNotNullableMap && is(field, Column) && path.length === 2) {\n            const objectName = path[0];\n            if (!(objectName in nullifyMap)) {\n              nullifyMap[objectName] = value === null ? getTableName(field.table) : false;\n            } else if (typeof nullifyMap[objectName] === \"string\" && nullifyMap[objectName] !== getTableName(field.table)) {\n              nullifyMap[objectName] = false;\n            }\n          }\n        }\n      }\n      return result2;\n    },\n    {}\n  );\n  if (joinsNotNullableMap && Object.keys(nullifyMap).length > 0) {\n    for (const [objectName, tableName] of Object.entries(nullifyMap)) {\n      if (typeof tableName === \"string\" && !joinsNotNullableMap[tableName]) {\n        result[objectName] = null;\n      }\n    }\n  }\n  return result;\n}\nfunction orderSelectedFields(fields, pathPrefix) {\n  return Object.entries(fields).reduce((result, [name, field]) => {\n    if (typeof name !== \"string\") {\n      return result;\n    }\n    const newPath = pathPrefix ? [...pathPrefix, name] : [name];\n    if (is(field, Column) || is(field, SQL) || is(field, SQL.Aliased)) {\n      result.push({ path: newPath, field });\n    } else if (is(field, Table)) {\n      result.push(...orderSelectedFields(field[Table.Symbol.Columns], newPath));\n    } else {\n      result.push(...orderSelectedFields(field, newPath));\n    }\n    return result;\n  }, []);\n}\nfunction haveSameKeys(left, right) {\n  const leftKeys = Object.keys(left);\n  const rightKeys = Object.keys(right);\n  if (leftKeys.length !== rightKeys.length) {\n    return false;\n  }\n  for (const [index, key] of leftKeys.entries()) {\n    if (key !== rightKeys[index]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction mapUpdateSet(table, values) {\n  const entries = Object.entries(values).filter(([, value]) => value !== void 0).map(([key, value]) => {\n    if (is(value, SQL) || is(value, Column)) {\n      return [key, value];\n    } else {\n      return [key, new Param(value, table[Table.Symbol.Columns][key])];\n    }\n  });\n  if (entries.length === 0) {\n    throw new Error(\"No values to set\");\n  }\n  return Object.fromEntries(entries);\n}\nfunction applyMixins(baseClass, extendedClasses) {\n  for (const extendedClass of extendedClasses) {\n    for (const name of Object.getOwnPropertyNames(extendedClass.prototype)) {\n      if (name === \"constructor\") continue;\n      Object.defineProperty(\n        baseClass.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(extendedClass.prototype, name) || /* @__PURE__ */ Object.create(null)\n      );\n    }\n  }\n}\nfunction getTableColumns(table) {\n  return table[Table.Symbol.Columns];\n}\nfunction getViewSelectedFields(view) {\n  return view[ViewBaseConfig].selectedFields;\n}\nfunction getTableLikeName(table) {\n  return is(table, Subquery) ? table._.alias : is(table, View) ? table[ViewBaseConfig].name : is(table, SQL) ? void 0 : table[Table.Symbol.IsAlias] ? table[Table.Symbol.Name] : table[Table.Symbol.BaseName];\n}\nfunction getColumnNameAndConfig(a, b) {\n  return {\n    name: typeof a === \"string\" && a.length > 0 ? a : \"\",\n    config: typeof a === \"object\" ? a : b\n  };\n}\nconst _ = {};\nconst __ = {};\nfunction isConfig(data) {\n  if (typeof data !== \"object\" || data === null) return false;\n  if (data.constructor.name !== \"Object\") return false;\n  if (\"logger\" in data) {\n    const type = typeof data[\"logger\"];\n    if (type !== \"boolean\" && (type !== \"object\" || typeof data[\"logger\"][\"logQuery\"] !== \"function\") && type !== \"undefined\") return false;\n    return true;\n  }\n  if (\"schema\" in data) {\n    const type = typeof data[\"schema\"];\n    if (type !== \"object\" && type !== \"undefined\") return false;\n    return true;\n  }\n  if (\"casing\" in data) {\n    const type = typeof data[\"casing\"];\n    if (type !== \"string\" && type !== \"undefined\") return false;\n    return true;\n  }\n  if (\"mode\" in data) {\n    if (data[\"mode\"] !== \"default\" || data[\"mode\"] !== \"planetscale\" || data[\"mode\"] !== void 0) return false;\n    return true;\n  }\n  if (\"connection\" in data) {\n    const type = typeof data[\"connection\"];\n    if (type !== \"string\" && type !== \"object\" && type !== \"undefined\") return false;\n    return true;\n  }\n  if (\"client\" in data) {\n    const type = typeof data[\"client\"];\n    if (type !== \"object\" && type !== \"function\" && type !== \"undefined\") return false;\n    return true;\n  }\n  if (Object.keys(data).length === 0) return true;\n  return false;\n}\nconst textDecoder = typeof TextDecoder === \"undefined\" ? null : new TextDecoder();\nexport {\n  applyMixins,\n  getColumnNameAndConfig,\n  getTableColumns,\n  getTableLikeName,\n  getViewSelectedFields,\n  haveSameKeys,\n  isConfig,\n  mapResultRow,\n  mapUpdateSet,\n  orderSelectedFields,\n  textDecoder\n};\n//# sourceMappingURL=utils.js.map",
    "import { Column } from \"../../column.js\";\nimport { is } from \"../../entity.js\";\nimport { Table } from \"../../table.js\";\nimport {\n  isDriverValueEncoder,\n  isSQLWrapper,\n  Param,\n  Placeholder,\n  SQL,\n  sql,\n  StringChunk,\n  View\n} from \"../sql.js\";\nfunction bindIfParam(value, column) {\n  if (isDriverValueEncoder(column) && !isSQLWrapper(value) && !is(value, Param) && !is(value, Placeholder) && !is(value, Column) && !is(value, Table) && !is(value, View)) {\n    return new Param(value, column);\n  }\n  return value;\n}\nconst eq = (left, right) => {\n  return sql`${left} = ${bindIfParam(right, left)}`;\n};\nconst ne = (left, right) => {\n  return sql`${left} <> ${bindIfParam(right, left)}`;\n};\nfunction and(...unfilteredConditions) {\n  const conditions = unfilteredConditions.filter(\n    (c) => c !== void 0\n  );\n  if (conditions.length === 0) {\n    return void 0;\n  }\n  if (conditions.length === 1) {\n    return new SQL(conditions);\n  }\n  return new SQL([\n    new StringChunk(\"(\"),\n    sql.join(conditions, new StringChunk(\" and \")),\n    new StringChunk(\")\")\n  ]);\n}\nfunction or(...unfilteredConditions) {\n  const conditions = unfilteredConditions.filter(\n    (c) => c !== void 0\n  );\n  if (conditions.length === 0) {\n    return void 0;\n  }\n  if (conditions.length === 1) {\n    return new SQL(conditions);\n  }\n  return new SQL([\n    new StringChunk(\"(\"),\n    sql.join(conditions, new StringChunk(\" or \")),\n    new StringChunk(\")\")\n  ]);\n}\nfunction not(condition) {\n  return sql`not ${condition}`;\n}\nconst gt = (left, right) => {\n  return sql`${left} > ${bindIfParam(right, left)}`;\n};\nconst gte = (left, right) => {\n  return sql`${left} >= ${bindIfParam(right, left)}`;\n};\nconst lt = (left, right) => {\n  return sql`${left} < ${bindIfParam(right, left)}`;\n};\nconst lte = (left, right) => {\n  return sql`${left} <= ${bindIfParam(right, left)}`;\n};\nfunction inArray(column, values) {\n  if (Array.isArray(values)) {\n    if (values.length === 0) {\n      return sql`false`;\n    }\n    return sql`${column} in ${values.map((v) => bindIfParam(v, column))}`;\n  }\n  return sql`${column} in ${bindIfParam(values, column)}`;\n}\nfunction notInArray(column, values) {\n  if (Array.isArray(values)) {\n    if (values.length === 0) {\n      return sql`true`;\n    }\n    return sql`${column} not in ${values.map((v) => bindIfParam(v, column))}`;\n  }\n  return sql`${column} not in ${bindIfParam(values, column)}`;\n}\nfunction isNull(value) {\n  return sql`${value} is null`;\n}\nfunction isNotNull(value) {\n  return sql`${value} is not null`;\n}\nfunction exists(subquery) {\n  return sql`exists ${subquery}`;\n}\nfunction notExists(subquery) {\n  return sql`not exists ${subquery}`;\n}\nfunction between(column, min, max) {\n  return sql`${column} between ${bindIfParam(min, column)} and ${bindIfParam(\n    max,\n    column\n  )}`;\n}\nfunction notBetween(column, min, max) {\n  return sql`${column} not between ${bindIfParam(\n    min,\n    column\n  )} and ${bindIfParam(max, column)}`;\n}\nfunction like(column, value) {\n  return sql`${column} like ${value}`;\n}\nfunction notLike(column, value) {\n  return sql`${column} not like ${value}`;\n}\nfunction ilike(column, value) {\n  return sql`${column} ilike ${value}`;\n}\nfunction notIlike(column, value) {\n  return sql`${column} not ilike ${value}`;\n}\nfunction arrayContains(column, values) {\n  if (Array.isArray(values)) {\n    if (values.length === 0) {\n      throw new Error(\"arrayContains requires at least one value\");\n    }\n    const array = sql`${bindIfParam(values, column)}`;\n    return sql`${column} @> ${array}`;\n  }\n  return sql`${column} @> ${bindIfParam(values, column)}`;\n}\nfunction arrayContained(column, values) {\n  if (Array.isArray(values)) {\n    if (values.length === 0) {\n      throw new Error(\"arrayContained requires at least one value\");\n    }\n    const array = sql`${bindIfParam(values, column)}`;\n    return sql`${column} <@ ${array}`;\n  }\n  return sql`${column} <@ ${bindIfParam(values, column)}`;\n}\nfunction arrayOverlaps(column, values) {\n  if (Array.isArray(values)) {\n    if (values.length === 0) {\n      throw new Error(\"arrayOverlaps requires at least one value\");\n    }\n    const array = sql`${bindIfParam(values, column)}`;\n    return sql`${column} && ${array}`;\n  }\n  return sql`${column} && ${bindIfParam(values, column)}`;\n}\nexport {\n  and,\n  arrayContained,\n  arrayContains,\n  arrayOverlaps,\n  between,\n  bindIfParam,\n  eq,\n  exists,\n  gt,\n  gte,\n  ilike,\n  inArray,\n  isNotNull,\n  isNull,\n  like,\n  lt,\n  lte,\n  ne,\n  not,\n  notBetween,\n  notExists,\n  notIlike,\n  notInArray,\n  notLike,\n  or\n};\n//# sourceMappingURL=conditions.js.map",
    "import { createdAt, cuid, updatedAt } from '@ycore/forge/utils';\nimport { integer, sqliteTable, text } from 'drizzle-orm/sqlite-core';\n\nexport const users = sqliteTable('users', {\n  id: cuid('id').primaryKey().notNull(),\n  email: text('email').notNull().unique(),\n  displayName: text('display_name').notNull(),\n  emailVerified: integer('email_verified', { mode: 'boolean' }).notNull().default(false),\n  createdAt,\n  updatedAt,\n});\n\nexport const authenticators = sqliteTable('authenticators', {\n  id: text('id').primaryKey().notNull(),\n  userId: text('user_id')\n    .notNull()\n    .references(() => users.id, { onDelete: 'cascade' }),\n  credentialPublicKey: text('credential_public_key').notNull(),\n  counter: integer('counter').notNull(),\n  credentialDeviceType: text('credential_device_type').notNull(),\n  credentialBackedUp: integer('credential_backed_up', { mode: 'boolean' }).notNull(),\n  transports: text('transports', { mode: 'json' }).notNull().$type<string[]>(),\n  aaguid: text('aaguid').notNull(),\n  name: text('name'),\n  lastUsedAt: integer('last_used_at', { mode: 'timestamp' }),\n  attestationType: text('attestation_type').notNull().default('none'),\n  rpId: text('rp_id').notNull(),\n  algorithm: integer('algorithm').notNull(),\n  createdAt,\n  updatedAt,\n});\n",
    "import { entityKind } from \"../entity.js\";\nimport { TableName } from \"../table.utils.js\";\nclass ForeignKeyBuilder {\n  static [entityKind] = \"SQLiteForeignKeyBuilder\";\n  /** @internal */\n  reference;\n  /** @internal */\n  _onUpdate;\n  /** @internal */\n  _onDelete;\n  constructor(config, actions) {\n    this.reference = () => {\n      const { name, columns, foreignColumns } = config();\n      return { name, columns, foreignTable: foreignColumns[0].table, foreignColumns };\n    };\n    if (actions) {\n      this._onUpdate = actions.onUpdate;\n      this._onDelete = actions.onDelete;\n    }\n  }\n  onUpdate(action) {\n    this._onUpdate = action;\n    return this;\n  }\n  onDelete(action) {\n    this._onDelete = action;\n    return this;\n  }\n  /** @internal */\n  build(table) {\n    return new ForeignKey(table, this);\n  }\n}\nclass ForeignKey {\n  constructor(table, builder) {\n    this.table = table;\n    this.reference = builder.reference;\n    this.onUpdate = builder._onUpdate;\n    this.onDelete = builder._onDelete;\n  }\n  static [entityKind] = \"SQLiteForeignKey\";\n  reference;\n  onUpdate;\n  onDelete;\n  getName() {\n    const { name, columns, foreignColumns } = this.reference();\n    const columnNames = columns.map((column) => column.name);\n    const foreignColumnNames = foreignColumns.map((column) => column.name);\n    const chunks = [\n      this.table[TableName],\n      ...columnNames,\n      foreignColumns[0].table[TableName],\n      ...foreignColumnNames\n    ];\n    return name ?? `${chunks.join(\"_\")}_fk`;\n  }\n}\nfunction foreignKey(config) {\n  function mappedConfig() {\n    if (typeof config === \"function\") {\n      const { name, columns, foreignColumns } = config();\n      return {\n        name,\n        columns,\n        foreignColumns\n      };\n    }\n    return config;\n  }\n  return new ForeignKeyBuilder(mappedConfig);\n}\nexport {\n  ForeignKey,\n  ForeignKeyBuilder,\n  foreignKey\n};\n//# sourceMappingURL=foreign-keys.js.map",
    "import { entityKind } from \"../entity.js\";\nimport { TableName } from \"../table.utils.js\";\nfunction uniqueKeyName(table, columns) {\n  return `${table[TableName]}_${columns.join(\"_\")}_unique`;\n}\nfunction unique(name) {\n  return new UniqueOnConstraintBuilder(name);\n}\nclass UniqueConstraintBuilder {\n  constructor(columns, name) {\n    this.name = name;\n    this.columns = columns;\n  }\n  static [entityKind] = \"SQLiteUniqueConstraintBuilder\";\n  /** @internal */\n  columns;\n  /** @internal */\n  build(table) {\n    return new UniqueConstraint(table, this.columns, this.name);\n  }\n}\nclass UniqueOnConstraintBuilder {\n  static [entityKind] = \"SQLiteUniqueOnConstraintBuilder\";\n  /** @internal */\n  name;\n  constructor(name) {\n    this.name = name;\n  }\n  on(...columns) {\n    return new UniqueConstraintBuilder(columns, this.name);\n  }\n}\nclass UniqueConstraint {\n  constructor(table, columns, name) {\n    this.table = table;\n    this.columns = columns;\n    this.name = name ?? uniqueKeyName(this.table, this.columns.map((column) => column.name));\n  }\n  static [entityKind] = \"SQLiteUniqueConstraint\";\n  columns;\n  name;\n  getName() {\n    return this.name;\n  }\n}\nexport {\n  UniqueConstraint,\n  UniqueConstraintBuilder,\n  UniqueOnConstraintBuilder,\n  unique,\n  uniqueKeyName\n};\n//# sourceMappingURL=unique-constraint.js.map",
    "import { ColumnBuilder } from \"../../column-builder.js\";\nimport { Column } from \"../../column.js\";\nimport { entityKind } from \"../../entity.js\";\nimport { ForeignKeyBuilder } from \"../foreign-keys.js\";\nimport { uniqueKeyName } from \"../unique-constraint.js\";\nclass SQLiteColumnBuilder extends ColumnBuilder {\n  static [entityKind] = \"SQLiteColumnBuilder\";\n  foreignKeyConfigs = [];\n  references(ref, actions = {}) {\n    this.foreignKeyConfigs.push({ ref, actions });\n    return this;\n  }\n  unique(name) {\n    this.config.isUnique = true;\n    this.config.uniqueName = name;\n    return this;\n  }\n  generatedAlwaysAs(as, config) {\n    this.config.generated = {\n      as,\n      type: \"always\",\n      mode: config?.mode ?? \"virtual\"\n    };\n    return this;\n  }\n  /** @internal */\n  buildForeignKeys(column, table) {\n    return this.foreignKeyConfigs.map(({ ref, actions }) => {\n      return ((ref2, actions2) => {\n        const builder = new ForeignKeyBuilder(() => {\n          const foreignColumn = ref2();\n          return { columns: [column], foreignColumns: [foreignColumn] };\n        });\n        if (actions2.onUpdate) {\n          builder.onUpdate(actions2.onUpdate);\n        }\n        if (actions2.onDelete) {\n          builder.onDelete(actions2.onDelete);\n        }\n        return builder.build(table);\n      })(ref, actions);\n    });\n  }\n}\nclass SQLiteColumn extends Column {\n  constructor(table, config) {\n    if (!config.uniqueName) {\n      config.uniqueName = uniqueKeyName(table, [config.name]);\n    }\n    super(table, config);\n    this.table = table;\n  }\n  static [entityKind] = \"SQLiteColumn\";\n}\nexport {\n  SQLiteColumn,\n  SQLiteColumnBuilder\n};\n//# sourceMappingURL=common.js.map",
    "import { entityKind } from \"../../entity.js\";\nimport { getColumnNameAndConfig, textDecoder } from \"../../utils.js\";\nimport { SQLiteColumn, SQLiteColumnBuilder } from \"./common.js\";\nclass SQLiteBigIntBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteBigIntBuilder\";\n  constructor(name) {\n    super(name, \"bigint\", \"SQLiteBigInt\");\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteBigInt(table, this.config);\n  }\n}\nclass SQLiteBigInt extends SQLiteColumn {\n  static [entityKind] = \"SQLiteBigInt\";\n  getSQLType() {\n    return \"blob\";\n  }\n  mapFromDriverValue(value) {\n    if (typeof Buffer !== \"undefined\" && Buffer.from) {\n      const buf = Buffer.isBuffer(value) ? value : value instanceof ArrayBuffer ? Buffer.from(value) : value.buffer ? Buffer.from(value.buffer, value.byteOffset, value.byteLength) : Buffer.from(value);\n      return BigInt(buf.toString(\"utf8\"));\n    }\n    return BigInt(textDecoder.decode(value));\n  }\n  mapToDriverValue(value) {\n    return Buffer.from(value.toString());\n  }\n}\nclass SQLiteBlobJsonBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteBlobJsonBuilder\";\n  constructor(name) {\n    super(name, \"json\", \"SQLiteBlobJson\");\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteBlobJson(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteBlobJson extends SQLiteColumn {\n  static [entityKind] = \"SQLiteBlobJson\";\n  getSQLType() {\n    return \"blob\";\n  }\n  mapFromDriverValue(value) {\n    if (typeof Buffer !== \"undefined\" && Buffer.from) {\n      const buf = Buffer.isBuffer(value) ? value : value instanceof ArrayBuffer ? Buffer.from(value) : value.buffer ? Buffer.from(value.buffer, value.byteOffset, value.byteLength) : Buffer.from(value);\n      return JSON.parse(buf.toString(\"utf8\"));\n    }\n    return JSON.parse(textDecoder.decode(value));\n  }\n  mapToDriverValue(value) {\n    return Buffer.from(JSON.stringify(value));\n  }\n}\nclass SQLiteBlobBufferBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteBlobBufferBuilder\";\n  constructor(name) {\n    super(name, \"buffer\", \"SQLiteBlobBuffer\");\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteBlobBuffer(table, this.config);\n  }\n}\nclass SQLiteBlobBuffer extends SQLiteColumn {\n  static [entityKind] = \"SQLiteBlobBuffer\";\n  mapFromDriverValue(value) {\n    if (Buffer.isBuffer(value)) {\n      return value;\n    }\n    return Buffer.from(value);\n  }\n  getSQLType() {\n    return \"blob\";\n  }\n}\nfunction blob(a, b) {\n  const { name, config } = getColumnNameAndConfig(a, b);\n  if (config?.mode === \"json\") {\n    return new SQLiteBlobJsonBuilder(name);\n  }\n  if (config?.mode === \"bigint\") {\n    return new SQLiteBigIntBuilder(name);\n  }\n  return new SQLiteBlobBufferBuilder(name);\n}\nexport {\n  SQLiteBigInt,\n  SQLiteBigIntBuilder,\n  SQLiteBlobBuffer,\n  SQLiteBlobBufferBuilder,\n  SQLiteBlobJson,\n  SQLiteBlobJsonBuilder,\n  blob\n};\n//# sourceMappingURL=blob.js.map",
    "import { entityKind } from \"../../entity.js\";\nimport { getColumnNameAndConfig } from \"../../utils.js\";\nimport { SQLiteColumn, SQLiteColumnBuilder } from \"./common.js\";\nclass SQLiteCustomColumnBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteCustomColumnBuilder\";\n  constructor(name, fieldConfig, customTypeParams) {\n    super(name, \"custom\", \"SQLiteCustomColumn\");\n    this.config.fieldConfig = fieldConfig;\n    this.config.customTypeParams = customTypeParams;\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteCustomColumn(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteCustomColumn extends SQLiteColumn {\n  static [entityKind] = \"SQLiteCustomColumn\";\n  sqlName;\n  mapTo;\n  mapFrom;\n  constructor(table, config) {\n    super(table, config);\n    this.sqlName = config.customTypeParams.dataType(config.fieldConfig);\n    this.mapTo = config.customTypeParams.toDriver;\n    this.mapFrom = config.customTypeParams.fromDriver;\n  }\n  getSQLType() {\n    return this.sqlName;\n  }\n  mapFromDriverValue(value) {\n    return typeof this.mapFrom === \"function\" ? this.mapFrom(value) : value;\n  }\n  mapToDriverValue(value) {\n    return typeof this.mapTo === \"function\" ? this.mapTo(value) : value;\n  }\n}\nfunction customType(customTypeParams) {\n  return (a, b) => {\n    const { name, config } = getColumnNameAndConfig(a, b);\n    return new SQLiteCustomColumnBuilder(\n      name,\n      config,\n      customTypeParams\n    );\n  };\n}\nexport {\n  SQLiteCustomColumn,\n  SQLiteCustomColumnBuilder,\n  customType\n};\n//# sourceMappingURL=custom.js.map",
    "import { entityKind } from \"../../entity.js\";\nimport { sql } from \"../../sql/sql.js\";\nimport { getColumnNameAndConfig } from \"../../utils.js\";\nimport { SQLiteColumn, SQLiteColumnBuilder } from \"./common.js\";\nclass SQLiteBaseIntegerBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteBaseIntegerBuilder\";\n  constructor(name, dataType, columnType) {\n    super(name, dataType, columnType);\n    this.config.autoIncrement = false;\n  }\n  primaryKey(config) {\n    if (config?.autoIncrement) {\n      this.config.autoIncrement = true;\n    }\n    this.config.hasDefault = true;\n    return super.primaryKey();\n  }\n}\nclass SQLiteBaseInteger extends SQLiteColumn {\n  static [entityKind] = \"SQLiteBaseInteger\";\n  autoIncrement = this.config.autoIncrement;\n  getSQLType() {\n    return \"integer\";\n  }\n}\nclass SQLiteIntegerBuilder extends SQLiteBaseIntegerBuilder {\n  static [entityKind] = \"SQLiteIntegerBuilder\";\n  constructor(name) {\n    super(name, \"number\", \"SQLiteInteger\");\n  }\n  build(table) {\n    return new SQLiteInteger(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteInteger extends SQLiteBaseInteger {\n  static [entityKind] = \"SQLiteInteger\";\n}\nclass SQLiteTimestampBuilder extends SQLiteBaseIntegerBuilder {\n  static [entityKind] = \"SQLiteTimestampBuilder\";\n  constructor(name, mode) {\n    super(name, \"date\", \"SQLiteTimestamp\");\n    this.config.mode = mode;\n  }\n  /**\n   * @deprecated Use `default()` with your own expression instead.\n   *\n   * Adds `DEFAULT (cast((julianday('now') - 2440587.5)*86400000 as integer))` to the column, which is the current epoch timestamp in milliseconds.\n   */\n  defaultNow() {\n    return this.default(sql`(cast((julianday('now') - 2440587.5)*86400000 as integer))`);\n  }\n  build(table) {\n    return new SQLiteTimestamp(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteTimestamp extends SQLiteBaseInteger {\n  static [entityKind] = \"SQLiteTimestamp\";\n  mode = this.config.mode;\n  mapFromDriverValue(value) {\n    if (this.config.mode === \"timestamp\") {\n      return new Date(value * 1e3);\n    }\n    return new Date(value);\n  }\n  mapToDriverValue(value) {\n    const unix = value.getTime();\n    if (this.config.mode === \"timestamp\") {\n      return Math.floor(unix / 1e3);\n    }\n    return unix;\n  }\n}\nclass SQLiteBooleanBuilder extends SQLiteBaseIntegerBuilder {\n  static [entityKind] = \"SQLiteBooleanBuilder\";\n  constructor(name, mode) {\n    super(name, \"boolean\", \"SQLiteBoolean\");\n    this.config.mode = mode;\n  }\n  build(table) {\n    return new SQLiteBoolean(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteBoolean extends SQLiteBaseInteger {\n  static [entityKind] = \"SQLiteBoolean\";\n  mode = this.config.mode;\n  mapFromDriverValue(value) {\n    return Number(value) === 1;\n  }\n  mapToDriverValue(value) {\n    return value ? 1 : 0;\n  }\n}\nfunction integer(a, b) {\n  const { name, config } = getColumnNameAndConfig(a, b);\n  if (config?.mode === \"timestamp\" || config?.mode === \"timestamp_ms\") {\n    return new SQLiteTimestampBuilder(name, config.mode);\n  }\n  if (config?.mode === \"boolean\") {\n    return new SQLiteBooleanBuilder(name, config.mode);\n  }\n  return new SQLiteIntegerBuilder(name);\n}\nconst int = integer;\nexport {\n  SQLiteBaseInteger,\n  SQLiteBaseIntegerBuilder,\n  SQLiteBoolean,\n  SQLiteBooleanBuilder,\n  SQLiteInteger,\n  SQLiteIntegerBuilder,\n  SQLiteTimestamp,\n  SQLiteTimestampBuilder,\n  int,\n  integer\n};\n//# sourceMappingURL=integer.js.map",
    "import { entityKind } from \"../../entity.js\";\nimport { getColumnNameAndConfig } from \"../../utils.js\";\nimport { SQLiteColumn, SQLiteColumnBuilder } from \"./common.js\";\nclass SQLiteNumericBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteNumericBuilder\";\n  constructor(name) {\n    super(name, \"string\", \"SQLiteNumeric\");\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteNumeric(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteNumeric extends SQLiteColumn {\n  static [entityKind] = \"SQLiteNumeric\";\n  mapFromDriverValue(value) {\n    if (typeof value === \"string\") return value;\n    return String(value);\n  }\n  getSQLType() {\n    return \"numeric\";\n  }\n}\nclass SQLiteNumericNumberBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteNumericNumberBuilder\";\n  constructor(name) {\n    super(name, \"number\", \"SQLiteNumericNumber\");\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteNumericNumber(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteNumericNumber extends SQLiteColumn {\n  static [entityKind] = \"SQLiteNumericNumber\";\n  mapFromDriverValue(value) {\n    if (typeof value === \"number\") return value;\n    return Number(value);\n  }\n  mapToDriverValue = String;\n  getSQLType() {\n    return \"numeric\";\n  }\n}\nclass SQLiteNumericBigIntBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteNumericBigIntBuilder\";\n  constructor(name) {\n    super(name, \"bigint\", \"SQLiteNumericBigInt\");\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteNumericBigInt(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteNumericBigInt extends SQLiteColumn {\n  static [entityKind] = \"SQLiteNumericBigInt\";\n  mapFromDriverValue = BigInt;\n  mapToDriverValue = String;\n  getSQLType() {\n    return \"numeric\";\n  }\n}\nfunction numeric(a, b) {\n  const { name, config } = getColumnNameAndConfig(a, b);\n  const mode = config?.mode;\n  return mode === \"number\" ? new SQLiteNumericNumberBuilder(name) : mode === \"bigint\" ? new SQLiteNumericBigIntBuilder(name) : new SQLiteNumericBuilder(name);\n}\nexport {\n  SQLiteNumeric,\n  SQLiteNumericBigInt,\n  SQLiteNumericBigIntBuilder,\n  SQLiteNumericBuilder,\n  SQLiteNumericNumber,\n  SQLiteNumericNumberBuilder,\n  numeric\n};\n//# sourceMappingURL=numeric.js.map",
    "import { entityKind } from \"../../entity.js\";\nimport { SQLiteColumn, SQLiteColumnBuilder } from \"./common.js\";\nclass SQLiteRealBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteRealBuilder\";\n  constructor(name) {\n    super(name, \"number\", \"SQLiteReal\");\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteReal(table, this.config);\n  }\n}\nclass SQLiteReal extends SQLiteColumn {\n  static [entityKind] = \"SQLiteReal\";\n  getSQLType() {\n    return \"real\";\n  }\n}\nfunction real(name) {\n  return new SQLiteRealBuilder(name ?? \"\");\n}\nexport {\n  SQLiteReal,\n  SQLiteRealBuilder,\n  real\n};\n//# sourceMappingURL=real.js.map",
    "import { entityKind } from \"../../entity.js\";\nimport { getColumnNameAndConfig } from \"../../utils.js\";\nimport { SQLiteColumn, SQLiteColumnBuilder } from \"./common.js\";\nclass SQLiteTextBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteTextBuilder\";\n  constructor(name, config) {\n    super(name, \"string\", \"SQLiteText\");\n    this.config.enumValues = config.enum;\n    this.config.length = config.length;\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteText(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteText extends SQLiteColumn {\n  static [entityKind] = \"SQLiteText\";\n  enumValues = this.config.enumValues;\n  length = this.config.length;\n  constructor(table, config) {\n    super(table, config);\n  }\n  getSQLType() {\n    return `text${this.config.length ? `(${this.config.length})` : \"\"}`;\n  }\n}\nclass SQLiteTextJsonBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteTextJsonBuilder\";\n  constructor(name) {\n    super(name, \"json\", \"SQLiteTextJson\");\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteTextJson(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteTextJson extends SQLiteColumn {\n  static [entityKind] = \"SQLiteTextJson\";\n  getSQLType() {\n    return \"text\";\n  }\n  mapFromDriverValue(value) {\n    return JSON.parse(value);\n  }\n  mapToDriverValue(value) {\n    return JSON.stringify(value);\n  }\n}\nfunction text(a, b = {}) {\n  const { name, config } = getColumnNameAndConfig(a, b);\n  if (config.mode === \"json\") {\n    return new SQLiteTextJsonBuilder(name);\n  }\n  return new SQLiteTextBuilder(name, config);\n}\nexport {\n  SQLiteText,\n  SQLiteTextBuilder,\n  SQLiteTextJson,\n  SQLiteTextJsonBuilder,\n  text\n};\n//# sourceMappingURL=text.js.map",
    "import { blob } from \"./blob.js\";\nimport { customType } from \"./custom.js\";\nimport { integer } from \"./integer.js\";\nimport { numeric } from \"./numeric.js\";\nimport { real } from \"./real.js\";\nimport { text } from \"./text.js\";\nfunction getSQLiteColumnBuilders() {\n  return {\n    blob,\n    customType,\n    integer,\n    numeric,\n    real,\n    text\n  };\n}\nexport {\n  getSQLiteColumnBuilders\n};\n//# sourceMappingURL=all.js.map",
    "import { entityKind } from \"../entity.js\";\nimport { Table } from \"../table.js\";\nimport { getSQLiteColumnBuilders } from \"./columns/all.js\";\nconst InlineForeignKeys = Symbol.for(\"drizzle:SQLiteInlineForeignKeys\");\nclass SQLiteTable extends Table {\n  static [entityKind] = \"SQLiteTable\";\n  /** @internal */\n  static Symbol = Object.assign({}, Table.Symbol, {\n    InlineForeignKeys\n  });\n  /** @internal */\n  [Table.Symbol.Columns];\n  /** @internal */\n  [InlineForeignKeys] = [];\n  /** @internal */\n  [Table.Symbol.ExtraConfigBuilder] = void 0;\n}\nfunction sqliteTableBase(name, columns, extraConfig, schema, baseName = name) {\n  const rawTable = new SQLiteTable(name, schema, baseName);\n  const parsedColumns = typeof columns === \"function\" ? columns(getSQLiteColumnBuilders()) : columns;\n  const builtColumns = Object.fromEntries(\n    Object.entries(parsedColumns).map(([name2, colBuilderBase]) => {\n      const colBuilder = colBuilderBase;\n      colBuilder.setName(name2);\n      const column = colBuilder.build(rawTable);\n      rawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));\n      return [name2, column];\n    })\n  );\n  const table = Object.assign(rawTable, builtColumns);\n  table[Table.Symbol.Columns] = builtColumns;\n  table[Table.Symbol.ExtraConfigColumns] = builtColumns;\n  if (extraConfig) {\n    table[SQLiteTable.Symbol.ExtraConfigBuilder] = extraConfig;\n  }\n  return table;\n}\nconst sqliteTable = (name, columns, extraConfig) => {\n  return sqliteTableBase(name, columns, extraConfig);\n};\nfunction sqliteTableCreator(customizeTableName) {\n  return (name, columns, extraConfig) => {\n    return sqliteTableBase(customizeTableName(name), columns, extraConfig, void 0, name);\n  };\n}\nexport {\n  InlineForeignKeys,\n  SQLiteTable,\n  sqliteTable,\n  sqliteTableCreator\n};\n//# sourceMappingURL=table.js.map",
    "import { decodePKIXECDSASignature, ECDSAPublicKey, p256, verifyECDSASignature } from '@oslojs/crypto/ecdsa';\nimport { sha256 } from '@oslojs/crypto/sha2';\nimport { decodeBase64url, encodeBase64url } from '@oslojs/encoding';\nimport { ClientDataType, COSEKeyType, createAssertionSignatureMessage, parseAttestationObject, parseAuthenticatorData, parseClientDataJSON } from '@oslojs/webauthn';\nimport { logger } from '@ycore/forge/logger';\nimport { err, type Result } from '@ycore/forge/result';\n\nimport type { DeviceInfo, EnhancedDeviceInfo, WebAuthnAuthenticationData, WebAuthnRegistrationData } from '../@types/auth.types';\nimport { ATTESTATION_FORMAT_HANDLERS, ATTESTATION_TYPES, AUTHENTICATOR_FLAGS, convertAAGUIDToUUID, DEFAULT_DEVICE_INFO, isAAGUIDAllZeros, WEBAUTHN_ALGORITHMS, WEBAUTHN_CONFIG, WEBAUTHN_ERROR_MESSAGES, WebAuthnErrorCode } from '../auth.constants';\nimport type { Authenticator as AuthenticatorModel } from '../schema';\n\n/**\n * Helper function to convert Uint8Array to ArrayBuffer\n * This ensures we get a proper ArrayBuffer instead of SharedArrayBuffer\n */\nfunction toArrayBuffer(uint8Array: Uint8Array): ArrayBuffer {\n  const buffer = new ArrayBuffer(uint8Array.byteLength);\n  new Uint8Array(buffer).set(uint8Array);\n  return buffer;\n}\n\n/**\n * Extract backup state from authenticator data flags\n */\nfunction extractBackupState(authenticatorData: any): { isBackupEligible: boolean; isBackedUp: boolean } {\n  const flags = authenticatorData.flags || 0;\n\n  const isBackupEligible = (flags & AUTHENTICATOR_FLAGS.BACKUP_ELIGIBLE) !== 0;\n  const isBackedUp = (flags & AUTHENTICATOR_FLAGS.BACKUP_STATE) !== 0;\n\n  return { isBackupEligible, isBackedUp };\n}\n\n/**\n * Extract transport methods based on device characteristics\n */\nfunction extractTransportMethods(deviceInfo: DeviceInfo): string[] {\n  return [...deviceInfo.transports];\n}\n\n/**\n * Extract attestation type from attestation object using command pattern\n */\nfunction extractAttestationType(attestationObject: any): string {\n  try {\n    const fmt = attestationObject.fmt;\n    const attStmt = attestationObject.attStmt;\n\n    const handler = ATTESTATION_FORMAT_HANDLERS.get(fmt);\n    if (handler) {\n      return handler(attStmt);\n    }\n\n    logger.warning('webauthn_unknown_attestation_format', { format: fmt });\n    return ATTESTATION_TYPES.NONE;\n  } catch (error) {\n    logger.error('webauthn_attestation_extraction_error', {\n      error: error instanceof Error ? error.message : 'Unknown error',\n    });\n    return ATTESTATION_TYPES.NONE;\n  }\n}\n\n/**\n * Generate a default friendly name for an authenticator\n */\nfunction generateDefaultAuthenticatorName(deviceInfo: DeviceInfo): string {\n  // If we have specific vendor/model info, use it\n  if (deviceInfo.vendor !== 'Unknown' && deviceInfo.model !== 'Security Key' && deviceInfo.model !== 'Device') {\n    return `${deviceInfo.vendor} ${deviceInfo.model}`;\n  }\n\n  // Fall back to generic names with timestamp\n  const deviceType = deviceInfo.type === 'platform' ? 'Biometric Device' : 'Security Key';\n  const timestamp = new Date().toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n  });\n\n  return `${deviceType} (${timestamp})`;\n}\n\n/**\n * Get comprehensive device information by AAGUID with KV lookup and fallback\n */\nasync function getDeviceInfoByAAGUID(aaguid: Uint8Array, metadataKV?: KVNamespace): Promise<DeviceInfo> {\n  // If AAGUID is all zeros, it's likely a platform authenticator\n  if (isAAGUIDAllZeros(aaguid)) {\n    return DEFAULT_DEVICE_INFO.platform;\n  }\n\n  const uuid = convertAAGUIDToUUID(aaguid);\n\n  // Try KV lookup first (MDS data)\n  if (metadataKV) {\n    try {\n      const mdsData = await metadataKV.get(`device:${uuid}`, 'json');\n      if (mdsData) {\n        logger.debug('device_info_mds_hit', { uuid });\n        return mdsData as EnhancedDeviceInfo;\n      }\n    } catch (error) {\n      logger.warning('device_info_kv_lookup_failed', {\n        uuid,\n        error: error instanceof Error ? error.message : 'Unknown',\n      });\n    }\n  }\n\n  // Fallback to default\n  logger.debug('device_info_fallback', { uuid });\n  return DEFAULT_DEVICE_INFO['cross-platform'];\n}\n\nexport function getWebAuthnErrorMessage(code: WebAuthnErrorCode | undefined, operation: 'registration' | 'authentication'): string {\n  if (!code) {\n    return WEBAUTHN_ERROR_MESSAGES.get(WebAuthnErrorCode.DEFAULT)?.(operation) || 'Auth failure. Please try again.';\n  }\n\n  const messageResolver = WEBAUTHN_ERROR_MESSAGES.get(code);\n  return messageResolver ? messageResolver(operation) : WEBAUTHN_ERROR_MESSAGES.get(WebAuthnErrorCode.DEFAULT)?.(operation) || 'Auth failure. Please try again.';\n}\n\n/**\n * Generate a cryptographically secure challenge\n */\nexport function generateChallenge(): string {\n  const bytes = new Uint8Array(WEBAUTHN_CONFIG.CHALLENGE_SIZE);\n  crypto.getRandomValues(bytes);\n  return encodeBase64url(bytes);\n}\n\n/**\n * Generate a unique user ID\n */\nexport function generateUserId(): string {\n  const bytes = new Uint8Array(WEBAUTHN_CONFIG.USER_ID_SIZE);\n  crypto.getRandomValues(bytes);\n  return encodeBase64url(bytes);\n}\n\n/**\n * Create WebAuthn registration options\n */\nexport function createRegistrationOptions(\n  rpName: string,\n  rpId: string,\n  userName: string,\n  userDisplayName: string,\n  challenge: string,\n  excludeCredentials: Array<{ id: string; transports?: AuthenticatorTransport[] }> = []\n): PublicKeyCredentialCreationOptions {\n  return {\n    challenge: toArrayBuffer(decodeBase64url(challenge)),\n    rp: {\n      name: rpName,\n      id: rpId,\n    },\n    user: {\n      id: toArrayBuffer(decodeBase64url(generateUserId())),\n      name: userName,\n      displayName: userDisplayName,\n    },\n    pubKeyCredParams: [\n      { alg: WEBAUTHN_ALGORITHMS.ES256, type: 'public-key' },\n      { alg: WEBAUTHN_ALGORITHMS.RS256, type: 'public-key' },\n    ],\n    timeout: WEBAUTHN_CONFIG.CHALLENGE_TIMEOUT,\n    attestation: 'none',\n    excludeCredentials: excludeCredentials.map(cred => ({\n      id: toArrayBuffer(decodeBase64url(cred.id)),\n      type: 'public-key' as PublicKeyCredentialType,\n      // Use actual transports if available, otherwise omit (let browser decide)\n      ...(cred.transports && cred.transports.length > 0 ? { transports: cred.transports } : {}),\n    })),\n    authenticatorSelection: {\n      residentKey: 'discouraged',\n      requireResidentKey: false,\n      userVerification: 'preferred',\n    },\n  };\n}\n\n/**\n * Create WebAuthn authentication options\n */\nexport function createAuthenticationOptions(rpId: string, challenge: string, allowCredentials: Array<{ id: string; transports?: AuthenticatorTransport[] }> = []): PublicKeyCredentialRequestOptions {\n  return {\n    challenge: toArrayBuffer(decodeBase64url(challenge)),\n    rpId,\n    timeout: WEBAUTHN_CONFIG.CHALLENGE_TIMEOUT,\n    userVerification: 'preferred',\n    allowCredentials:\n      allowCredentials.length > 0\n        ? allowCredentials.map(cred => ({\n          id: toArrayBuffer(decodeBase64url(cred.id)),\n          type: 'public-key' as PublicKeyCredentialType,\n          // Use actual transports if available, otherwise omit (let browser decide)\n          ...(cred.transports && cred.transports.length > 0 ? { transports: cred.transports } : {}),\n        }))\n        : [],\n  };\n}\n\n/**\n * Verify registration response using Oslo WebAuthn\n */\nexport async function verifyRegistration(\n  credential: WebAuthnRegistrationData,\n  expectedChallenge: string,\n  expectedOrigin: string,\n  expectedRPID: string,\n  metadataKV?: KVNamespace\n): Promise<Result<Omit<AuthenticatorModel, 'userId' | 'createdAt' | 'updatedAt'>>> {\n  try {\n    // Parse attestation object\n    const attestationObject = await parseAttestationObject(new Uint8Array(credential.response.attestationObject));\n    const { authenticatorData } = attestationObject;\n\n    // Parse client data\n    const clientData = parseClientDataJSON(new Uint8Array(credential.response.clientDataJSON));\n\n    // Verify challenge - convert Uint8Array to base64url for comparison\n    const receivedChallenge = encodeBase64url(new Uint8Array(clientData.challenge));\n    if (receivedChallenge !== expectedChallenge) {\n      return err('Invalid challenge', {\n        field: 'challenge',\n        code: WebAuthnErrorCode.INVALID_CHALLENGE,\n      });\n    }\n\n    // Verify origin\n    if (clientData.origin !== expectedOrigin) {\n      return err('Invalid origin', {\n        field: 'origin',\n        code: WebAuthnErrorCode.INVALID_ORIGIN,\n      });\n    }\n\n    // Verify type\n    if (clientData.type !== ClientDataType.Create) {\n      return err('Invalid request type', {\n        field: 'type',\n        code: WebAuthnErrorCode.INVALID_CREDENTIAL,\n      });\n    }\n\n    // Verify RP ID hash\n    if (!authenticatorData.verifyRelyingPartyIdHash(expectedRPID)) {\n      return err('Invalid relying party', {\n        field: 'rpId',\n        code: WebAuthnErrorCode.INVALID_RPID,\n      });\n    }\n\n    // Verify user presence\n    if (!authenticatorData.userPresent) {\n      return err('User presence required', {\n        field: 'userPresence',\n        code: WebAuthnErrorCode.USER_NOT_PRESENT,\n      });\n    }\n\n    // Extract credential\n    const attestedCredential = authenticatorData.credential;\n    if (!attestedCredential) {\n      return err('No credential found', {\n        field: 'credential',\n        code: WebAuthnErrorCode.INVALID_CREDENTIAL,\n      });\n    }\n\n    // Verify supported algorithm - we only support ES256 (ECDSA with P-256)\n    const publicKey = attestedCredential.publicKey;\n    if (publicKey.type() !== COSEKeyType.EC2) {\n      return err('Only ES256 algorithm is supported', {\n        field: 'keyType',\n        code: WebAuthnErrorCode.UNSUPPORTED_ALGORITHM,\n      });\n    }\n\n    // Verify it's using ES256 algorithm\n    const publicKeyAlgorithm = publicKey.algorithm();\n    if (publicKeyAlgorithm !== WEBAUTHN_ALGORITHMS.ES256) {\n      return err('Only ES256 algorithm is supported', {\n        field: 'algorithm',\n        code: WebAuthnErrorCode.UNSUPPORTED_ALGORITHM,\n      });\n    }\n\n    // Store the public key's decoded object as JSON (we'll reconstruct it during verification)\n    // This approach maintains the complete COSE key structure\n    const credentialPublicKey = encodeBase64url(new TextEncoder().encode(JSON.stringify(attestedCredential.publicKey.decoded)));\n\n    // Use actual transports from the credential if available, otherwise fall back to device info\n    let transports: string[] = [];\n    if (credential.response.transports && credential.response.transports.length > 0) {\n      // Use the actual transports reported by the authenticator\n      transports = credential.response.transports;\n      logger.debug('webauthn_using_actual_transports', { transports });\n    } else {\n      // Fall back to device info based on AAGUID\n      const deviceInfo = await getDeviceInfoByAAGUID(attestedCredential.authenticatorAAGUID, metadataKV);\n      transports = extractTransportMethods(deviceInfo);\n      logger.debug('webauthn_using_fallback_transports', { transports, source: 'deviceInfo' });\n    }\n\n    // Determine device type from authenticatorAttachment if available\n    let credentialDeviceType: 'platform' | 'cross-platform' = 'cross-platform';\n    if (credential.authenticatorAttachment) {\n      credentialDeviceType = credential.authenticatorAttachment === 'platform' ? 'platform' : 'cross-platform';\n      logger.debug('webauthn_device_type_from_attachment', {\n        authenticatorAttachment: credential.authenticatorAttachment,\n        credentialDeviceType,\n      });\n    } else {\n      // Fall back to AAGUID-based detection\n      const deviceInfo = await getDeviceInfoByAAGUID(attestedCredential.authenticatorAAGUID, metadataKV);\n      credentialDeviceType = deviceInfo.type;\n      logger.debug('webauthn_device_type_from_aaguid', {\n        aaguid: encodeBase64url(attestedCredential.authenticatorAAGUID),\n        credentialDeviceType,\n      });\n    }\n\n    // Get device info for generating a friendly name\n    const deviceInfo = await getDeviceInfoByAAGUID(attestedCredential.authenticatorAAGUID, metadataKV);\n\n    // Extract backup state from authenticator flags\n    const backupState = extractBackupState(authenticatorData);\n\n    // Get algorithm from public key\n    const keyAlgorithm = attestedCredential.publicKey.algorithm();\n\n    // Extract attestation type from attestation object\n    const attestationType = extractAttestationType(attestationObject);\n\n    // Generate a default friendly name based on device info\n    const defaultName = generateDefaultAuthenticatorName(deviceInfo);\n\n    return {\n      id: encodeBase64url(attestedCredential.id),\n      credentialPublicKey,\n      counter: authenticatorData.signatureCounter,\n      credentialDeviceType,\n      credentialBackedUp: backupState.isBackedUp,\n      transports,\n      aaguid: encodeBase64url(attestedCredential.authenticatorAAGUID),\n      name: defaultName,\n      lastUsedAt: null,\n      attestationType,\n      rpId: expectedRPID,\n      algorithm: keyAlgorithm,\n    };\n  } catch (error) {\n    logger.error('webauthn_registration_error', {\n      error: error instanceof Error ? error.message : 'Unknown error',\n    });\n    return err('Registration verification failed', { field: 'general' });\n  }\n}\n\n/**\n * Verify authentication response using Oslo WebAuthn\n */\nexport async function verifyAuthentication(\n  credential: WebAuthnAuthenticationData,\n  expectedChallenge: string,\n  expectedOrigin: string,\n  expectedRPID: string,\n  storedCredential: AuthenticatorModel\n): Promise<Result<{ verified: boolean; newCounter: number }>> {\n  try {\n    // Parse authenticator data\n    const authenticatorData = parseAuthenticatorData(new Uint8Array(credential.response.authenticatorData));\n\n    // Parse client data\n    const clientData = parseClientDataJSON(new Uint8Array(credential.response.clientDataJSON));\n\n    // Verify challenge - convert Uint8Array to base64url for comparison\n    const receivedChallenge = encodeBase64url(new Uint8Array(clientData.challenge));\n    if (receivedChallenge !== expectedChallenge) {\n      return err('Invalid challenge', {\n        field: 'challenge',\n        code: WebAuthnErrorCode.INVALID_CHALLENGE,\n      });\n    }\n\n    // Verify origin\n    if (clientData.origin !== expectedOrigin) {\n      return err('Invalid origin', {\n        field: 'origin',\n        code: WebAuthnErrorCode.INVALID_ORIGIN,\n      });\n    }\n\n    // Verify type\n    if (clientData.type !== ClientDataType.Get) {\n      return err('Invalid request type', {\n        field: 'type',\n        code: WebAuthnErrorCode.INVALID_CREDENTIAL,\n      });\n    }\n\n    // Verify RP ID hash\n    if (!authenticatorData.verifyRelyingPartyIdHash(expectedRPID)) {\n      return err('Invalid relying party', {\n        field: 'rpId',\n        code: WebAuthnErrorCode.INVALID_RPID,\n      });\n    }\n\n    // Verify user presence\n    if (!authenticatorData.userPresent) {\n      return err('User presence required', {\n        field: 'userPresence',\n        code: WebAuthnErrorCode.USER_NOT_PRESENT,\n      });\n    }\n\n    // Verify counter BEFORE signature verification (prevent replay attacks)\n    // If counter is greater than 0, it must be strictly greater than stored counter\n    if (storedCredential.counter > 0 || authenticatorData.signatureCounter > 0) {\n      if (authenticatorData.signatureCounter <= storedCredential.counter) {\n        logger.critical('webauthn_authentication_counter_rollback_detected', {\n          stored: storedCredential.counter,\n          received: authenticatorData.signatureCounter,\n          credentialId: credential.id,\n          userId: storedCredential.userId,\n        });\n        return err('Security violation: Counter rollback detected', {\n          field: 'counter',\n          code: WebAuthnErrorCode.INVALID_COUNTER,\n        });\n      }\n    }\n\n    // Create assertion message for signature verification using Oslo.js utility\n    const signatureMessage = createAssertionSignatureMessage(new Uint8Array(credential.response.authenticatorData), new Uint8Array(credential.response.clientDataJSON));\n\n    // Reconstruct the COSE key from stored JSON\n    let publicKeyData: any;\n    try {\n      // Decode the stored COSE key JSON\n      const storedKeyJson = new TextDecoder().decode(decodeBase64url(storedCredential.credentialPublicKey));\n      publicKeyData = JSON.parse(storedKeyJson);\n\n      if (!publicKeyData) {\n        return err('Invalid stored public key', {\n          field: 'publicKey',\n          code: WebAuthnErrorCode.INVALID_KEY_FORMAT,\n        });\n      }\n    } catch (error) {\n      logger.error('webauthn_authentication_key_parse_error', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      return err('Failed to parse stored public key', {\n        field: 'publicKey',\n        code: WebAuthnErrorCode.INVALID_KEY_FORMAT,\n      });\n    }\n\n    // Verify the signature using ECDSA with P-256\n    try {\n      const signatureBytes = new Uint8Array(credential.response.signature);\n\n      // Extract EC2 key components for ES256 (algorithm -7)\n      // COSE key type 2 (EC2) with curve P-256 (1)\n      // Note: COSE uses negative integers as key labels: -2 for x, -3 for y\n\n      // Parse COSE key structure\n\n      const xCoordinate = publicKeyData[-2]; // x coordinate in COSE key\n      const yCoordinate = publicKeyData[-3]; // y coordinate in COSE key\n\n      if (!xCoordinate || !yCoordinate) {\n        return err('Invalid public key structure', {\n          field: 'publicKey',\n          code: WebAuthnErrorCode.INVALID_KEY_FORMAT,\n        });\n      }\n\n      // Convert coordinates to Uint8Array\n      let xBytes: Uint8Array;\n      let yBytes: Uint8Array;\n\n      try {\n        if (typeof xCoordinate === 'string') {\n          xBytes = decodeBase64url(xCoordinate);\n        } else if (Array.isArray(xCoordinate)) {\n          xBytes = new Uint8Array(xCoordinate);\n        } else if (typeof xCoordinate === 'object' && xCoordinate !== null) {\n          // Handle object format like {\"0\":179,\"1\":124,...}\n          const values = Object.values(xCoordinate) as number[];\n          xBytes = new Uint8Array(values);\n        } else {\n          xBytes = new Uint8Array(xCoordinate);\n        }\n\n        if (typeof yCoordinate === 'string') {\n          yBytes = decodeBase64url(yCoordinate);\n        } else if (Array.isArray(yCoordinate)) {\n          yBytes = new Uint8Array(yCoordinate);\n        } else if (typeof yCoordinate === 'object' && yCoordinate !== null) {\n          // Handle object format like {\"0\":179,\"1\":124,...}\n          const values = Object.values(yCoordinate) as number[];\n          yBytes = new Uint8Array(values);\n        } else {\n          yBytes = new Uint8Array(yCoordinate);\n        }\n      } catch (error) {\n        logger.error('webauthn_authentication_coordinate_decode_error', {\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n        return err('Failed to decode key coordinates', {\n          field: 'publicKey',\n          code: WebAuthnErrorCode.INVALID_KEY_FORMAT,\n        });\n      }\n\n      // Validate coordinate lengths (P-256 coordinates should be 32 bytes each)\n      if (xBytes.length !== WEBAUTHN_CONFIG.COORDINATE_LENGTH || yBytes.length !== WEBAUTHN_CONFIG.COORDINATE_LENGTH) {\n        return err('Invalid coordinate length for P-256 key', {\n          field: 'publicKey',\n          code: WebAuthnErrorCode.INVALID_KEY_FORMAT,\n        });\n      }\n\n      // Convert bytes to bigint for ECDSAPublicKey constructor\n      const xHex = Array.from(xBytes)\n        .map(b => b.toString(16).padStart(2, '0'))\n        .join('');\n      const yHex = Array.from(yBytes)\n        .map(b => b.toString(16).padStart(2, '0'))\n        .join('');\n\n      if (xHex.length === 0 || yHex.length === 0) {\n        return err('Empty coordinate data', {\n          field: 'publicKey',\n          code: WebAuthnErrorCode.INVALID_KEY_FORMAT,\n        });\n      }\n\n      // Ensure coordinates are exactly 64 hex characters (32 bytes)\n      const xHexPadded = xHex.padStart(WEBAUTHN_CONFIG.HEX_COORDINATE_LENGTH, '0');\n      const yHexPadded = yHex.padStart(WEBAUTHN_CONFIG.HEX_COORDINATE_LENGTH, '0');\n\n      const xBigInt = BigInt(`0x${xHexPadded}`);\n      const yBigInt = BigInt(`0x${yHexPadded}`);\n\n      // Convert coordinates for ECDSAPublicKey constructor\n\n      // Create public key using ECDSAPublicKey constructor with P-256 curve\n      const publicKey = new ECDSAPublicKey(p256, xBigInt, yBigInt);\n\n      // Validate that the public key is on the P-256 curve\n      if (!publicKey.isCurve(p256)) {\n        return err('Public key not on P-256 curve', {\n          field: 'publicKey',\n          code: WebAuthnErrorCode.INVALID_KEY_FORMAT,\n        });\n      }\n\n      // Additional validation: try encoding the public key to SEC1 format to verify it's valid\n      try {\n        publicKey.encodeSEC1Uncompressed();\n      } catch (error) {\n        logger.error('webauthn_authentication_public_key_encoding_error', {\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n        return err('Invalid public key encoding', {\n          field: 'publicKey',\n          code: WebAuthnErrorCode.INVALID_KEY_FORMAT,\n        });\n      }\n\n      const messageHash = sha256(signatureMessage);\n\n      // WebAuthn signatures are DER-encoded, we need to decode them first\n      const signature = decodePKIXECDSASignature(signatureBytes);\n      const isValid = verifyECDSASignature(publicKey, messageHash, signature);\n\n      if (!isValid) {\n        return err('Invalid signature', {\n          field: 'signature',\n          code: WebAuthnErrorCode.SIGNATURE_FAILED,\n        });\n      }\n\n    } catch (error) {\n      logger.error('webauthn_authentication_signature_verification_error', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n        credentialId: credential.id,\n      });\n      return err('Signature verification failed', {\n        field: 'signature',\n        code: WebAuthnErrorCode.SIGNATURE_FAILED,\n      });\n    }\n\n    return {\n      verified: true,\n      newCounter: authenticatorData.signatureCounter,\n    };\n  } catch (error) {\n    logger.error('webauthn_authentication_error', {\n      error: error instanceof Error ? error.message : 'Unknown error',\n    });\n    return err('Authentication verification failed', { field: 'general' });\n  }\n}\n",
    "import type { DeviceInfo } from './@types/auth.types';\n\n// WebAuthn Algorithm Constants\nexport const WEBAUTHN_ALGORITHMS = {\n  ES256: -7,\n  RS256: -257,\n} as const;\n\n// WebAuthn Configuration Constants\nexport const WEBAUTHN_CONFIG = {\n  CHALLENGE_TIMEOUT: 60000, // 60 seconds\n  CHALLENGE_SIZE: 32, // 32 bytes\n  USER_ID_SIZE: 16, // 16 bytes\n  COORDINATE_LENGTH: 32, // P-256 coordinates should be 32 bytes each\n  HEX_COORDINATE_LENGTH: 64, // 32 bytes = 64 hex characters\n} as const;\n\n// Transport Methods\nexport const TRANSPORT_METHODS = {\n  INTERNAL: 'internal',\n  HYBRID: 'hybrid',\n  USB: 'usb',\n  NFC: 'nfc',\n  BLE: 'ble',\n  SMART_CARD: 'smart-card',\n} as const;\n\n// Attestation Types\nexport const ATTESTATION_TYPES = {\n  NONE: 'none',\n  BASIC: 'basic',\n  SELF: 'self',\n  ATTCA: 'attca',\n  ECDAA: 'ecdaa',\n} as const;\n\n// Device Types\nexport const DEVICE_TYPES = {\n  PLATFORM: 'platform',\n  CROSS_PLATFORM: 'cross-platform',\n} as const;\n\n// Authenticator Flags (WebAuthn spec bit positions)\nexport const AUTHENTICATOR_FLAGS = {\n  BACKUP_ELIGIBLE: 0x08, // BE flag (bit 3)\n  BACKUP_STATE: 0x10, // BS flag (bit 4)\n} as const;\n\n// Legacy device registry removed - replaced with KV-based MDS lookup with fallback to DEFAULT_DEVICE_INFO\n\n// Default Device Info for Unknown Devices\nexport const DEFAULT_DEVICE_INFO: Record<'platform' | 'cross-platform', DeviceInfo> = {\n  platform: {\n    type: DEVICE_TYPES.PLATFORM,\n    vendor: 'Unknown',\n    model: 'Platform Authenticator',\n    certified: false,\n    transports: [TRANSPORT_METHODS.INTERNAL, TRANSPORT_METHODS.HYBRID],\n  },\n  'cross-platform': {\n    type: DEVICE_TYPES.CROSS_PLATFORM,\n    vendor: 'Unknown',\n    model: 'Security Key',\n    certified: false,\n    transports: [TRANSPORT_METHODS.USB, TRANSPORT_METHODS.NFC, TRANSPORT_METHODS.HYBRID],\n  },\n} as const;\n\n// Attestation Format to Type Mapping using Command Pattern\ntype AttestationFormatHandler = (attStmt: any) => string;\n\nexport const ATTESTATION_FORMAT_HANDLERS = new Map<string, AttestationFormatHandler>([\n  ['none', () => ATTESTATION_TYPES.NONE],\n  [\n    'packed',\n    attStmt => {\n      if (attStmt.x5c && attStmt.x5c.length > 0) {\n        return ATTESTATION_TYPES.BASIC;\n      }\n      if (attStmt.sig && !attStmt.x5c) {\n        return ATTESTATION_TYPES.SELF;\n      }\n      return ATTESTATION_TYPES.NONE;\n    },\n  ],\n  [\n    'fido-u2f',\n    attStmt => {\n      if (attStmt.x5c && attStmt.x5c.length > 0) {\n        return ATTESTATION_TYPES.BASIC;\n      }\n      return ATTESTATION_TYPES.SELF;\n    },\n  ],\n  ['android-key', () => ATTESTATION_TYPES.BASIC],\n  ['android-safetynet', () => ATTESTATION_TYPES.ATTCA],\n  ['tpm', () => ATTESTATION_TYPES.BASIC],\n  ['apple', () => ATTESTATION_TYPES.BASIC],\n]);\n\nexport enum WebAuthnErrorCode {\n  INVALID_CHALLENGE = 'INVALID_CHALLENGE',\n  INVALID_ORIGIN = 'INVALID_ORIGIN',\n  INVALID_RPID = 'INVALID_RPID',\n  USER_NOT_PRESENT = 'USER_NOT_PRESENT',\n  INVALID_COUNTER = 'INVALID_COUNTER',\n  SIGNATURE_FAILED = 'SIGNATURE_FAILED',\n  UNSUPPORTED_ALGORITHM = 'UNSUPPORTED_ALGORITHM',\n  INVALID_CREDENTIAL = 'INVALID_CREDENTIAL',\n  CHALLENGE_EXPIRED = 'CHALLENGE_EXPIRED',\n  INVALID_KEY_FORMAT = 'INVALID_KEY_FORMAT',\n  DEFAULT = 'DEFAULT',\n}\n\n// Error Message Resolver Type\ntype ErrorMessageResolver = (operation: 'registration' | 'authentication') => string;\n\n// WebAuthn Error Messages using Command Pattern\nexport const WEBAUTHN_ERROR_MESSAGES = new Map<WebAuthnErrorCode, ErrorMessageResolver>([\n  [WebAuthnErrorCode.CHALLENGE_EXPIRED, () => 'Session expired. Please refresh the page and try again.'],\n  [WebAuthnErrorCode.INVALID_CHALLENGE, () => 'Security check failed. Please refresh the page and try again.'],\n  [WebAuthnErrorCode.INVALID_COUNTER, () => 'Security violation detected. Your authenticator may be compromised. Please contact support immediately.'],\n  [WebAuthnErrorCode.INVALID_KEY_FORMAT, () => 'Invalid security key format. Please re-register your device.'],\n  [WebAuthnErrorCode.INVALID_ORIGIN, () => 'Request origin not recognized. Please ensure you are on the correct website.'],\n  [WebAuthnErrorCode.INVALID_RPID, () => 'Security configuration error. Please contact support.'],\n  [WebAuthnErrorCode.UNSUPPORTED_ALGORITHM, () => 'Your authenticator uses an unsupported security algorithm. Please use a different device.'],\n  [WebAuthnErrorCode.USER_NOT_PRESENT, () => 'User presence verification failed. Please interact with your authenticator when prompted.'],\n  [WebAuthnErrorCode.INVALID_CREDENTIAL, operation => (operation === 'registration' ? 'Failed to create credential. Please try again.' : 'Authenticator not recognized. Please use the device you registered with.')],\n  [\n    WebAuthnErrorCode.SIGNATURE_FAILED,\n    operation => (operation === 'registration' ? 'Failed to verify authenticator. Please try a different device.' : 'Authentication failed. Please verify you are using the correct authenticator.'),\n  ],\n  [WebAuthnErrorCode.DEFAULT, operation => (operation === 'registration' ? 'Registration failed. Please try again.' : 'Authentication failed. Please try again.')],\n]);\n\n// Utility Functions\nexport function convertAAGUIDToUUID(aaguid: Uint8Array): string {\n  const aaguidString = Array.from(aaguid)\n    .map(b => b.toString(16).padStart(2, '0'))\n    .join('');\n\n  return [aaguidString.slice(0, 8), aaguidString.slice(8, 12), aaguidString.slice(12, 16), aaguidString.slice(16, 20), aaguidString.slice(20, 32)].join('-');\n}\n\nexport function isAAGUIDAllZeros(aaguid: Uint8Array): boolean {\n  return Array.from(aaguid).every(byte => byte === 0);\n}\n",
    "import { getOrigin, getOriginDomain, isDevelopment } from '@ycore/forge/services';\nimport type { RouterContextProvider } from 'react-router';\n\n/**\n * Detect if the request is for localhost or 127.0.0.1\n */\nfunction isLocalhostDomain(domain: string): boolean {\n  return domain === 'localhost' || domain === '127.0.0.1' || domain === '[::1]';\n}\n\n/**\n * Resolve WebAuthn rpID from context and request\n */\nexport function resolveRpId(context: Readonly<RouterContextProvider>, request: Request): string {\n  const originDomain = getOriginDomain(context, request);\n\n  // WebAuthn spec requires exactly 'localhost' for localhost requests\n  if (isLocalhostDomain(originDomain)) {\n    return 'localhost';\n  }\n\n  return originDomain;\n}\n\n/**\n * Resolve WebAuthn origins from context and request\n *\n * Security model:\n * - Production: Strict - only allows configured origin (from SITE_URL env or request origin)\n * - Development: Permissive - allows both configured origin and request origin\n *\n * This ensures production deployments validate against the configured origin while\n * development environments automatically work with localhost on any port.\n */\nexport function resolveOrigins(context: Readonly<RouterContextProvider>, request: Request): string[] {\n  const originUrl = getOrigin(context, request);\n  const requestOrigin = new URL(request.url).origin;\n  const isDevMode = isDevelopment(context);\n\n  // Development: Allow both configured origin and request origin for flexibility\n  if (isDevMode) {\n    return [...new Set([originUrl, requestOrigin])];\n  }\n\n  // Production: Strict - only configured origin\n  return [originUrl];\n}\n\n/**\n * Validate that a client origin is in the list of allowed origins\n */\nexport function validateOrigin(clientOrigin: string, allowedOrigins: string[]): boolean {\n  return allowedOrigins.includes(clientOrigin);\n}\n",
    "import type { Result } from '@ycore/forge/result';\nimport { isError, ok } from '@ycore/forge/result';\nimport type { RouterContextProvider } from 'react-router';\n\nimport type { Authenticator, User } from '../schema';\nimport { requireAuthUser } from './auth-context';\nimport { getAuthRepository } from './repository';\n\nexport interface ProfileLoaderArgs {\n  context: Readonly<RouterContextProvider>;\n}\n\nexport async function profileLoader({ context }: ProfileLoaderArgs): Promise<Result<{ user: User }>> {\n  // User is guaranteed to be authenticated due to middleware\n  const user = requireAuthUser(context);\n  return ok({ user });\n}\n\n/**\n * Get user with authenticators - combines user and authenticator data\n */\nexport async function getUserWithAuthenticators(context: Readonly<RouterContextProvider>, userId: string): Promise<Result<{ user: User; authenticators: Authenticator[] }>> {\n  const repository = getAuthRepository(context);\n\n  const userResult = await repository.getUserById(userId);\n\n  // Check for error (including not found)\n  if (isError(userResult)) {\n    return userResult;\n  }\n\n  const authenticatorsResult = await repository.getAuthenticatorsByUserId(userId);\n\n  // Check for error\n  if (isError(authenticatorsResult)) {\n    return authenticatorsResult;\n  }\n\n  return {\n    user: userResult,\n    authenticators: authenticatorsResult,\n  };\n}\n",
    "import { decodeBase64url } from '@oslojs/encoding';\nimport { getContext } from '@ycore/forge/context';\nimport type { IntentHandlers } from '@ycore/forge/intent/server';\nimport { handleIntent } from '@ycore/forge/intent/server';\nimport { logger } from '@ycore/forge/logger';\nimport { err, flattenError, isError, ok, respondError, respondOk, transformError, validateFormData } from '@ycore/forge/result';\nimport { requireCSRFToken } from '@ycore/foundry/secure/server';\nimport { redirect } from 'react-router';\n\nimport type { SignInActionArgs, SignInLoaderArgs } from '../@types/auth.types';\nimport type { WebAuthnErrorCode } from '../auth.constants';\nimport { authConfigContext } from '../auth.context';\nimport type { Authenticator } from '../schema';\nimport { signinFormSchema } from './auth.validation';\nimport { getAuthRepository } from './repository';\nimport { createChallengeSession, destroyChallengeSession, getChallengeFromSession } from './session';\nimport { generateChallenge, getWebAuthnErrorMessage, verifyAuthentication } from './webauthn';\nimport { createAuthenticatedSession, createAuthSuccessResponse, parseWebAuthnCredential } from './webauthn-utils';\nimport { validateWebAuthnRequest } from './webauthn-validation';\n\nexport async function signinLoader({ context }: SignInLoaderArgs) {\n  const token = requireCSRFToken(context);\n  const challenge = generateChallenge();\n\n  const cookieResult = await createChallengeSession(context, challenge);\n  if (isError(cookieResult)) {\n    logger.error('signin_loader_session_creation_failed', { error: cookieResult.message });\n    return respondError(cookieResult);\n  }\n\n  return respondOk({ token, challenge }, { headers: { 'Set-Cookie': cookieResult } });\n}\n\nexport async function signinAction({ request, context }: SignInActionArgs) {\n  const repository = getAuthRepository(context);\n  const authConfig = getContext(context, authConfigContext);\n\n  if (!authConfig) {\n    logger.warning('signin_action_no_config');\n    return respondError(err('Auth configuration not found', { field: 'general' }));\n  }\n\n  const formData = await request.formData();\n\n  const handlers: IntentHandlers = {\n    signin: async (formData: FormData) => {\n      try {\n        const validationResult = await validateFormData(signinFormSchema, formData);\n        if (isError(validationResult)) {\n          logger.warning('signin_validation_failed', { error: flattenError(validationResult) });\n          return validationResult;\n        }\n\n        const email = validationResult.email;\n\n        // Timing-safe user lookup - always perform the same operations; prevents user enumeration attacks\n        const userResult = await repository.getUserByEmail(email);\n        const userExists = !isError(userResult);\n        const user = userExists ? userResult : null;\n\n        // Get user's authenticators - empty if user doesn't exist\n        const authenticatorsResult = user ? await repository.getAuthenticatorsByUserId(user.id) : ([] as any);\n        const hasAuthenticators = !isError(authenticatorsResult) && authenticatorsResult.length > 0;\n\n        // Timing-safe fail after all lookups complete\n        if (!userExists || !hasAuthenticators) {\n          logger.warning('signin_invalid_credentials', { email });\n          return err('The credentials are incorrect', { email: 'The credentials are incorrect' });\n        }\n\n        // At this point we know authenticatorsResult is an array of Authenticator\n        const authenticators = authenticatorsResult;\n\n        // Get stored challenge from session\n        const sessionResult = await getChallengeFromSession(request, context);\n        if (isError(sessionResult)) {\n          logger.warning('signin_invalid_session', { email, error: flattenError(sessionResult) });\n          return sessionResult;\n        }\n\n        const { challenge: storedChallenge, challengeCreatedAt, session } = sessionResult;\n\n        // Get WebAuthn response from form\n        const credentialResult = parseWebAuthnCredential(formData, 'signin');\n        if (isError(credentialResult)) {\n          return credentialResult;\n        }\n\n        const credential = credentialResult;\n\n        // Verify credential ownership BEFORE signature verification\n        const authenticator = authenticators.find((auth: Authenticator) => auth.id === credential.rawId);\n\n        if (!authenticator) {\n          logger.warning('signin_authenticator_not_found', { email, credentialId: credential.rawId });\n          return err('The credentials are incorrect', { email: 'The credentials are incorrect' });\n        }\n\n        // Verify the authenticator belongs to this user (defense in depth)\n        if (authenticator.userId !== user!.id) {\n          logger.critical('signin_authenticator_user_mismatch', {\n            authenticatorUserId: authenticator.userId,\n            requestUserId: user!.id,\n            email,\n            credentialId: credential.rawId,\n          });\n          return err('The credentials are incorrect', { email: 'The credentials are incorrect' });\n        }\n\n        // Validate challenge and origin using shared utility\n        const webauthnValidationResult = await validateWebAuthnRequest(\n          request,\n          {\n            storedChallenge,\n            challengeCreatedAt,\n            clientDataJSON: credential.response.clientDataJSON,\n            operation: 'signin',\n            logContext: { email },\n          },\n          context\n        );\n\n        if (isError(webauthnValidationResult)) {\n          logger.warning('signin_webauthn_validation_failed', { email, error: flattenError(webauthnValidationResult) });\n          return webauthnValidationResult;\n        }\n\n        const { challenge, origin, rpId } = webauthnValidationResult;\n\n        // Convert base64url strings back to ArrayBuffers for verification\n        const authenticationData = {\n          id: credential.id,\n          rawId: decodeBase64url(credential.rawId).buffer,\n          response: {\n            authenticatorData: decodeBase64url(credential.response.authenticatorData).buffer,\n            clientDataJSON: decodeBase64url(credential.response.clientDataJSON).buffer,\n            signature: decodeBase64url(credential.response.signature).buffer,\n            userHandle: credential.response.userHandle ? decodeBase64url(credential.response.userHandle).buffer : undefined,\n          },\n          type: 'public-key' as const,\n        };\n\n        // Verify authentication using the validated challenge, origin, and rpId\n        const verificationResult = await verifyAuthentication(authenticationData, challenge, origin, rpId, authenticator);\n\n        if (isError(verificationResult)) {\n          logger.error('signin_verification_failed', {\n            email,\n            error: verificationResult.message,\n            code: verificationResult.code,\n            details: verificationResult.details,\n          });\n\n          // Provide user-friendly error messages based on error code\n          const errorMessage = getWebAuthnErrorMessage(verificationResult.code as WebAuthnErrorCode, 'authentication');\n          return err(errorMessage, { field: 'general', code: verificationResult.code });\n        }\n\n        // Update authenticator counter and last used timestamp\n        const updateResult = await repository.updateAuthenticatorUsage(authenticator.id, verificationResult.newCounter, new Date());\n\n        if (isError(updateResult)) {\n          logger.warning('signin_authenticator_update_failed', { authenticatorId: authenticator.id, error: updateResult.message });\n          // Continue with signin even if update fails\n        }\n\n        // Clear challenge from session\n        const cleanupResult = await destroyChallengeSession(session, context);\n        if (isError(cleanupResult)) {\n          logger.warning('signin_challenge_cleanup_failed', { error: cleanupResult.message });\n          // Continue with signin even if cleanup fails\n        }\n\n        // Create authenticated session\n        const authSessionResult = await createAuthenticatedSession(context, user!, email, 'signin');\n        if (isError(authSessionResult)) {\n          return authSessionResult;\n        }\n\n        // Return success - redirect will be handled by route\n        return ok(createAuthSuccessResponse(context, authSessionResult));\n      } catch (error) {\n        if (error instanceof Response) {\n          throw error;\n        }\n\n        logger.error('signin_error', { error: transformError(error) });\n        return err('Authentication failed', { field: 'general' });\n      }\n    },\n  };\n\n  const result = await handleIntent(formData, handlers);\n\n  if (isError(result)) {\n    logger.warning('signin_action_failed', { error: flattenError(result) });\n    return respondError(result);\n  }\n\n  // Handle successful signin with redirect\n  const successData = result as { redirectTo: string; cookie: string };\n  throw redirect(successData.redirectTo, { headers: { 'Set-Cookie': successData.cookie } });\n}\n",
    "import { email, maxLength, minLength, nonEmpty, object, pipe, string } from 'valibot';\n\n// Base email validation - reused across all auth forms\nconst emailField = pipe(string(), nonEmpty('Please enter your email.'), email('Please enter a valid email.'), maxLength(32, 'Email is too long'));\n\n// Base display name validation\nconst displayNameField = pipe(string(), nonEmpty('Display name is required'), minLength(1, 'Display name is required'));\n\nexport const authFormSchema = object({ email: emailField });\n\nexport const signupFormSchema = object({ email: emailField, displayName: displayNameField });\n\nexport const signinFormSchema = object({ email: emailField });\n",
    "import { getContext } from '@ycore/forge/context';\nimport { logger } from '@ycore/forge/logger';\nimport { err, isError, ok, type Result } from '@ycore/forge/result';\nimport type { RouterContextProvider } from 'react-router';\n\nimport { defaultAuthRoutes } from '../auth.config';\nimport { authConfigContext } from '../auth.context';\nimport type { User } from '../schema';\nimport { createAuthSession } from './session';\n\n/**\n * Parse WebAuthn credential from FormData\n *\n * @param formData - The form data containing webauthn_response\n * @param operation - The operation being performed (for error messages)\n * @returns Result with parsed credential or error\n *\n * @example\n * ```ts\n * const result = parseWebAuthnCredential(formData, 'signin');\n * if (isError(result)) {\n *   return respondError(result);\n * }\n * const credential = result;\n * ```\n */\nexport function parseWebAuthnCredential(formData: FormData, operation: 'signin' | 'signup' | 'add-passkey'): Result<any> {\n  const webauthnResponse = formData.get('webauthn_response')?.toString();\n\n  if (!webauthnResponse) {\n    const errorMessage = operation === 'signin' ? 'Authentication failed. Please try again.' : 'Registration failed. Please try again.';\n    logger.warning(`${operation}_missing_webauthn_response`);\n    return err(errorMessage, { field: 'general' });\n  }\n\n  try {\n    const credential = JSON.parse(webauthnResponse);\n    return ok(credential);\n  } catch (error) {\n    logger.error(`${operation}_webauthn_parse_error`, {\n      error: error instanceof Error ? error.message : 'Unknown error',\n    });\n    return err('Invalid authentication data. Please try again.', { field: 'general' });\n  }\n}\n\n/**\n * Create authenticated session with standardized error handling\n *\n * @param context - Router context provider\n * @param user - The authenticated user\n * @param email - User's email for logging\n * @param operation - The operation being performed (for logging)\n * @returns Result with cookie string or error\n *\n * @example\n * ```ts\n * const result = await createAuthenticatedSession(context, user, user.email, 'signin');\n * if (isError(result)) {\n *   return respondError(result);\n * }\n * const cookie = result;\n * ```\n */\nexport async function createAuthenticatedSession(context: Readonly<RouterContextProvider>, user: User, email: string, operation: 'signin' | 'signup'): Promise<Result<string>> {\n  const sessionResult = await createAuthSession(context, { user });\n\n  if (isError(sessionResult)) {\n    logger.error(`${operation}_session_creation_failed`, {\n      email,\n      userId: user.id,\n      error: sessionResult.message,\n    });\n    return err('Failed to create session', { field: 'general' });\n  }\n\n  return ok(sessionResult);\n}\n\n/**\n * Create auth success response with redirect\n *\n * @param context - Router context provider\n * @param cookie - The Set-Cookie header value\n * @returns Object with redirectTo and cookie for redirect response\n *\n * @example\n * ```ts\n * const response = createAuthSuccessResponse(context, cookie);\n * return ok(response);\n * ```\n */\nexport function createAuthSuccessResponse(context: Readonly<RouterContextProvider>, cookie: string): { redirectTo: string; cookie: string } {\n  const authConfig = getContext(context, authConfigContext);\n  const redirectTo = authConfig?.routes.signedin || defaultAuthRoutes.signedin;\n\n  return { redirectTo, cookie };\n}\n",
    "import { decodeBase64url } from '@oslojs/encoding';\nimport { logger } from '@ycore/forge/logger';\nimport { err, isError, ok, type Result } from '@ycore/forge/result';\nimport type { RouterContextProvider } from 'react-router';\nimport { WebAuthnErrorCode } from '../auth.constants';\nimport { verifyChallengeUniqueness } from './session';\nimport { resolveOrigins, resolveRpId, validateOrigin } from './webauthn-config';\n\n/**\n * Result of WebAuthn validation containing validated challenge, origin, and rpId\n */\nexport interface WebAuthnValidationResult {\n  challenge: string;\n  origin: string;\n  rpId: string;\n}\n\n/**\n * Options for challenge validation\n */\nexport interface ChallengeValidationOptions {\n  /**\n   * The stored challenge from session\n   */\n  storedChallenge: string;\n\n  /**\n   * When the challenge was created (timestamp)\n   */\n  challengeCreatedAt: number;\n\n  /**\n   * Maximum age of challenge in milliseconds (default: 5 minutes)\n   */\n  maxAge?: number;\n}\n\n/**\n * Options for origin validation\n */\nexport interface OriginValidationOptions {\n  /**\n   * The client data JSON from WebAuthn credential\n   */\n  clientDataJSON: string;\n\n  /**\n   * Additional context for logging (e.g., email, userId)\n   */\n  logContext?: Record<string, unknown>;\n\n  /**\n   * The operation being performed (for logging)\n   */\n  operation: 'signin' | 'signup' | 'add-passkey';\n}\n\n/**\n * Validates a WebAuthn challenge for expiration and uniqueness\n *\n * This function performs three critical security checks:\n * 1. Verifies challenge exists in session\n * 2. Checks challenge hasn't expired (default 5 minutes)\n * 3. Verifies challenge uniqueness to prevent replay attacks\n *\n * @param options - Challenge validation options\n * @param context - Router context for KV access\n * @returns Result with success or error details\n *\n * @example\n * ```ts\n * const result = await validateChallenge({\n *   storedChallenge: session.get('challenge'),\n *   challengeCreatedAt: session.get('challengeCreatedAt'),\n * }, context);\n *\n * if (isError(result)) {\n *   return respondError(result);\n * }\n * ```\n */\nexport async function validateChallenge(options: ChallengeValidationOptions, context: Readonly<RouterContextProvider>): Promise<Result<void>> {\n  const { storedChallenge, challengeCreatedAt, maxAge = 5 * 60 * 1000 } = options;\n\n  // Check challenge expiration\n  if (Date.now() - challengeCreatedAt > maxAge) {\n    return err('Session expired. Please refresh and try again.', {\n      field: 'general',\n      code: WebAuthnErrorCode.CHALLENGE_EXPIRED,\n    });\n  }\n\n  // Verify challenge uniqueness (prevents replay attacks)\n  const uniquenessResult = await verifyChallengeUniqueness(storedChallenge, context);\n  if (!uniquenessResult) {\n    return err('Invalid challenge. Please refresh and try again.', {\n      field: 'general',\n      code: WebAuthnErrorCode.INVALID_CHALLENGE,\n    });\n  }\n\n  // Return success (void)\n  return ok(undefined);\n}\n\n/**\n * Validates WebAuthn origin using server-determined origin (not client-provided)\n *\n * This function implements critical security measures:\n * 1. Uses server-determined origin from request URL (NOT client data)\n * 2. Validates server origin is in allowed origins list\n * 3. Parses client data and verifies origin matches server origin\n * 4. Prevents origin confusion attacks\n *\n * @param request - The incoming request\n * @param options - Origin validation options\n * @param context - Router context\n * @returns Result with validated origin or error\n *\n * @example\n * ```ts\n * const result = await validateOrigin(request, {\n *   clientDataJSON: credential.response.clientDataJSON,\n *   operation: 'signin',\n *   logContext: { email: user.email }\n * }, context);\n *\n * if (isError(result)) {\n *   return respondError(result);\n * }\n *\n * const { origin } = result;\n * ```\n */\nexport async function validateWebAuthnOrigin(request: Request, options: OriginValidationOptions, context: Readonly<RouterContextProvider>): Promise<Result<string>> {\n  const { clientDataJSON, logContext = {}, operation } = options;\n\n  // Resolve allowed origins from configuration\n  const allowedOrigins = resolveOrigins(context, request);\n\n  // SECURITY: Use server-determined origin, not client-provided\n  // The server determines the origin from the request URL\n  const serverOrigin = new URL(request.url).origin;\n\n  // Verify the server origin is in our allowed origins (sanity check)\n  if (!validateOrigin(serverOrigin, allowedOrigins)) {\n    logger.error(`${operation}_server_origin_not_allowed`, {\n      serverOrigin,\n      allowedOrigins,\n      ...logContext,\n    });\n\n    return err('Server configuration error', { field: 'general' });\n  }\n\n  // Parse client data to verify origin matches server-determined origin\n  const clientData = JSON.parse(new TextDecoder().decode(decodeBase64url(clientDataJSON))) as { origin: string };\n  const clientOrigin = clientData.origin;\n\n  // SECURITY: Verify client-provided origin matches server-determined origin\n  // This prevents origin confusion attacks\n  if (clientOrigin !== serverOrigin) {\n    return err('Origin mismatch', { field: 'general' });\n  }\n\n  return ok(serverOrigin);\n}\n\n/**\n * Validates a complete WebAuthn request including challenge and origin\n *\n * This is a convenience function that combines challenge and origin validation\n * in a single call. Use this when you need both validations.\n *\n * @param request - The incoming request\n * @param options - Combined validation options\n * @param context - Router context\n * @returns Result with validation data or error\n *\n * @example\n * ```ts\n * const result = await validateWebAuthnRequest(request, {\n *   storedChallenge: session.get('challenge'),\n *   challengeCreatedAt: session.get('challengeCreatedAt'),\n *   clientDataJSON: credential.response.clientDataJSON,\n *   operation: 'signin',\n *   logContext: { email: user.email }\n * }, context);\n *\n * if (isError(result)) {\n *   return respondError(result);\n * }\n *\n * const { challenge, origin, rpId } = result;\n * ```\n */\nexport async function validateWebAuthnRequest(request: Request, options: ChallengeValidationOptions & OriginValidationOptions, context: Readonly<RouterContextProvider>): Promise<Result<WebAuthnValidationResult>> {\n  const { storedChallenge, challengeCreatedAt, clientDataJSON, logContext, operation, maxAge } = options;\n\n  // Validate challenge\n  const challengeResult = await validateChallenge({ storedChallenge, challengeCreatedAt, maxAge }, context);\n\n  if (isError(challengeResult)) {\n    return challengeResult;\n  }\n\n  // Validate origin\n  const originResult = await validateWebAuthnOrigin(request, { clientDataJSON, logContext, operation }, context);\n\n  if (isError(originResult)) {\n    return originResult;\n  }\n\n  // Resolve RP ID\n  const rpId = resolveRpId(context, request);\n\n  return ok({ challenge: storedChallenge, origin: originResult, rpId });\n}\n",
    "import { getContext } from '@ycore/forge/context';\nimport { logger } from '@ycore/forge/logger';\nimport { isError } from '@ycore/forge/result';\nimport type { RouterContextProvider } from 'react-router';\nimport { redirect } from 'react-router';\n\nimport { defaultAuthRoutes } from '../auth.config';\nimport { authConfigContext } from '../auth.context';\nimport { destroyAuthSession } from './session';\n\nexport interface SignOutActionArgs {\n  request: Request;\n  context: Readonly<RouterContextProvider>;\n}\n\nexport async function signoutAction({ request, context }: SignOutActionArgs) {\n  const destroyResult = await destroyAuthSession(request, context);\n\n  if (isError(destroyResult)) {\n    logger.error('Failed to destroy session:', destroyResult.message);\n  }\n\n  const authConfig = getContext(context, authConfigContext);\n  const redirectTo = authConfig?.routes.signedout || defaultAuthRoutes.signedout;\n\n  return redirect(redirectTo, { headers: { 'Set-Cookie': !isError(destroyResult) ? destroyResult : '' } });\n}\n\nexport async function signoutLoader({ context }: { context: Readonly<RouterContextProvider> }) {\n  const authConfig = getContext(context, authConfigContext);\n  const redirectTo = authConfig?.routes.signedout || defaultAuthRoutes.signedout;\n\n  return redirect(redirectTo);\n}\n",
    "import { decodeBase64url } from '@oslojs/encoding';\nimport { getContext } from '@ycore/forge/context';\nimport type { IntentHandlers } from '@ycore/forge/intent/server';\nimport { handleIntent } from '@ycore/forge/intent/server';\nimport { logger } from '@ycore/forge/logger';\nimport { err, flattenError, isError, ok, respondError, respondOk, transformError, validateFormData } from '@ycore/forge/result';\nimport { getKVStore } from '@ycore/forge/services';\nimport { requireCSRFToken } from '@ycore/foundry/secure/server';\nimport { redirect } from 'react-router';\n\nimport type { SignUpActionArgs, SignUpLoaderArgs } from '../@types/auth.types';\nimport type { WebAuthnErrorCode } from '../auth.constants';\nimport { authConfigContext } from '../auth.context';\nimport { signupFormSchema } from './auth.validation';\nimport { getAuthRepository } from './repository';\nimport { createChallengeSession, destroyChallengeSession, getChallengeFromSession } from './session';\nimport { generateChallenge, getWebAuthnErrorMessage, verifyRegistration } from './webauthn';\nimport { createAuthenticatedSession, createAuthSuccessResponse, parseWebAuthnCredential } from './webauthn-utils';\nimport { validateWebAuthnRequest } from './webauthn-validation';\n\nexport async function signupLoader({ context }: SignUpLoaderArgs) {\n  const token = requireCSRFToken(context);\n  const challenge = generateChallenge();\n\n  const cookieResult = await createChallengeSession(context, challenge);\n  if (isError(cookieResult)) {\n    logger.error('signup_loader_session_creation_failed', { error: cookieResult.message });\n    return respondError(cookieResult);\n  }\n\n  return respondOk({ token, challenge }, { headers: { 'Set-Cookie': cookieResult } });\n}\n\nexport async function signupAction({ request, context }: SignUpActionArgs) {\n  const repository = getAuthRepository(context);\n  const authConfig = getContext(context, authConfigContext);\n\n  if (!authConfig) {\n    return respondError(err('Auth configuration not found', { field: 'general' }));\n  }\n\n  const formData = await request.formData();\n\n  const handlers: IntentHandlers = {\n    signup: async (formData: FormData) => {\n      try {\n        // Validate form data\n        const validationResult = await validateFormData(signupFormSchema, formData);\n        if (isError(validationResult)) {\n          return validationResult;\n        }\n\n        const { email, displayName } = validationResult;\n\n        // Check if user already exists\n        const existingUserResult = await repository.getUserByEmail(email);\n        if (!isError(existingUserResult)) {\n          return err('An account already exists with this email', { email: 'An account already exists with this email' });\n        }\n\n        // Get stored challenge from session\n        const sessionResult = await getChallengeFromSession(request, context);\n        if (isError(sessionResult)) {\n          logger.warning('signup_invalid_session', { email, error: flattenError(sessionResult) });\n          return sessionResult;\n        }\n\n        const { challenge: storedChallenge, challengeCreatedAt, session } = sessionResult;\n\n        // Get WebAuthn response from form\n        const credentialResult = parseWebAuthnCredential(formData, 'signup');\n        if (isError(credentialResult)) {\n          return credentialResult;\n        }\n\n        const credential = credentialResult;\n\n        // Validate challenge and origin using shared utility\n        const webauthnValidationResult = await validateWebAuthnRequest(\n          request,\n          {\n            storedChallenge,\n            challengeCreatedAt,\n            clientDataJSON: credential.response.clientDataJSON,\n            operation: 'signup',\n            logContext: { email },\n          },\n          context\n        );\n\n        if (isError(webauthnValidationResult)) {\n          return webauthnValidationResult;\n        }\n\n        const { challenge, origin, rpId } = webauthnValidationResult;\n\n        // Convert base64url strings back to ArrayBuffers for verification\n        const registrationData = {\n          id: credential.id,\n          rawId: decodeBase64url(credential.rawId).buffer,\n          response: {\n            attestationObject: decodeBase64url(credential.response.attestationObject).buffer,\n            clientDataJSON: decodeBase64url(credential.response.clientDataJSON).buffer,\n            transports: credential.response?.transports || [],\n          },\n          type: 'public-key' as const,\n          authenticatorAttachment: credential.authenticatorAttachment || null,\n        };\n\n        // Get metadata KV from config (follows CSRF pattern)\n        const metadataKV = authConfig.webauthn.kvBinding ? getKVStore(context, authConfig.webauthn.kvBinding) : undefined;\n\n        // Verify registration using the validated challenge, origin, and rpId\n        const verificationResult = await verifyRegistration(registrationData, challenge, origin, rpId, metadataKV);\n\n        if (isError(verificationResult)) {\n          logger.error('signup_verification_failed', {\n            email,\n            error: verificationResult.message,\n            code: verificationResult.code,\n            details: verificationResult.details,\n          });\n\n          // Provide user-friendly error messages based on error code\n          const errorMessage = getWebAuthnErrorMessage(verificationResult.code as WebAuthnErrorCode, 'registration');\n          return err(errorMessage, { field: 'general', code: verificationResult.code });\n        }\n\n        // Create new user\n        const createUserResult = await repository.createUser(email, displayName);\n        if (isError(createUserResult)) {\n          logger.error('signup_create_user_failed', { email, error: createUserResult.message });\n          return err('Failed to create account', { field: 'general' });\n        }\n\n        const user = createUserResult;\n\n        // Create authenticator for the user\n        const createAuthResult = await repository.createAuthenticator({ ...verificationResult, userId: user.id });\n\n        if (isError(createAuthResult)) {\n          logger.error('signup_create_authenticator_failed', { email, userId: user.id, error: createAuthResult.message });\n          // Attempt to clean up the created user\n          await repository.deleteUser(user.id);\n          return err('Failed to register authenticator', { field: 'general' });\n        }\n\n        // Clear challenge from session\n        const cleanupResult = await destroyChallengeSession(session, context);\n        if (isError(cleanupResult)) {\n          logger.warning('signup_challenge_cleanup_failed', { error: cleanupResult.message });\n          // Continue with signup even if cleanup fails\n        }\n\n        // Create authenticated session\n        const authSessionResult = await createAuthenticatedSession(context, user, email, 'signup');\n        if (isError(authSessionResult)) {\n          return authSessionResult;\n        }\n\n        // Return success - redirect will be handled by route\n        return ok(createAuthSuccessResponse(context, authSessionResult));\n      } catch (error) {\n        if (error instanceof Response) {\n          throw error;\n        }\n\n        logger.error('signup_error', { error: transformError(error) });\n        return err('Registration failed', { field: 'general' });\n      }\n    },\n  };\n\n  const result = await handleIntent(formData, handlers);\n\n  if (isError(result)) {\n    logger.warning('signup_action_failed', { error: flattenError(result) });\n    return respondError(result);\n  }\n\n  // Handle successful signup with redirect\n  const successResult = result as { redirectTo: string; cookie: string };\n  throw redirect(successResult.redirectTo, { headers: { 'Set-Cookie': successResult.cookie } });\n}\n",
    "import { getContext } from '@ycore/forge/context';\nimport type { IntentHandlers } from '@ycore/forge/intent/server';\nimport { handleIntent } from '@ycore/forge/intent/server';\nimport { logger } from '@ycore/forge/logger';\nimport { err, flattenError, isError, ok, respondError, respondOk, validateFormData } from '@ycore/forge/result';\nimport { requireCSRFToken } from '@ycore/foundry/secure/server';\nimport type { RouterContextProvider } from 'react-router';\nimport { redirect } from 'react-router';\nimport { minLength, object, pipe, string } from 'valibot';\n\nimport type { EmailConfig } from '../../email/@types/email.types';\nimport { authConfigContext } from '../auth.context';\nimport { getAuthRepository } from './repository';\nimport { getAuthSession } from './session';\nimport { type VerificationPurpose, verifyCode } from './totp-service';\nimport { sendVerificationEmail } from './verification-service';\n\nconst verifyFormSchema = object({\n  email: pipe(string(), minLength(1, 'Email is required')),\n  code: pipe(string(), minLength(6, 'Code must be 6 digits')),\n});\n\nexport interface VerifyLoaderArgs {\n  request: Request;\n  context: Readonly<RouterContextProvider>;\n}\n\nexport interface VerifyActionArgs {\n  request: Request;\n  context: Readonly<RouterContextProvider>;\n  emailConfig: EmailConfig;\n}\n\n/**\n * Verify page loader\n * Returns user email and CSRF token\n */\nexport async function verifyLoader({ request, context }: VerifyLoaderArgs) {\n  const token = requireCSRFToken(context);\n  const sessionResult = await getAuthSession(request, context);\n\n  if (isError(sessionResult)) {\n    logger.warning('verify_loader_no_session');\n    return respondError(err('Failed to get session'));\n  }\n\n  const session = sessionResult;\n  if (!session || !session.user) {\n    const authConfig = getContext(context, authConfigContext);\n    logger.warning('verify_loader_no_user');\n    throw redirect(authConfig?.routes.signin || '/auth/signin');\n  }\n\n  return respondOk({\n    token,\n    email: session.user.email,\n    emailVerified: session.user.emailVerified,\n  });\n}\n\n/**\n * Verify page action\n * Handles code verification and resend using intent-based routing\n */\nexport async function verifyAction({ request, context, emailConfig }: VerifyActionArgs) {\n  const repository = getAuthRepository(context);\n  const authConfig = getContext(context, authConfigContext);\n\n  if (!authConfig) {\n    logger.error('verify_action_no_config');\n    return respondError(err('Auth configuration not found'));\n  }\n\n  const formData = await request.formData();\n  const purpose = (formData.get('purpose')?.toString() as VerificationPurpose) || 'signup';\n\n  // Get session once for all handlers\n  const sessionResult = await getAuthSession(request, context);\n\n  if (isError(sessionResult)) {\n    logger.warning('verify_action_no_session');\n    return respondError(err('Failed to get session'));\n  }\n\n  const session = sessionResult;\n  if (!session || !session.user) {\n    logger.warning('verify_action_no_user');\n    return respondError(err('No active session found'));\n  }\n\n  // Define intent handlers\n  const handlers: IntentHandlers = {\n    /**\n     * Resend verification code\n     */\n    resend: async () => {\n      logger.info('verify_resend_requested', { email: session.user.email, purpose });\n\n      // Send the verification email (this handles code generation internally)\n      const sendResult = await sendVerificationEmail({\n        email: session.user.email,\n        purpose,\n        context,\n        emailConfig,\n      });\n\n      if (isError(sendResult)) {\n        logger.error('verify_resend_email_failed', {\n          email: session.user.email,\n          purpose,\n          error: flattenError(sendResult),\n        });\n        return sendResult;\n      }\n\n      logger.info('verify_code_resent', { email: session.user.email, purpose });\n\n      // Return success to trigger cooldown in UI\n      return ok({ resent: true });\n    },\n\n    /**\n     * Unverify email (set emailVerified to false)\n     */\n    unverify: async () => {\n      logger.info('verify_unverify_requested', { email: session.user.email });\n\n      // Update email verified status to false\n      const updateResult = await repository.updateEmailVerified(session.user.id, false);\n\n      if (isError(updateResult)) {\n        logger.error('verify_unverify_failed', {\n          userId: session.user.id,\n          error: flattenError(updateResult),\n        });\n        return updateResult;\n      }\n\n      logger.info('email_unverified', { email: session.user.email });\n\n      return ok({ unverified: true });\n    },\n\n    /**\n     * Verify the code\n     */\n    verify: async (formData: FormData) => {\n      // Validate form data\n      const validationResult = await validateFormData(verifyFormSchema, formData);\n      if (isError(validationResult)) {\n        logger.warning('verify_validation_failed', {\n          error: flattenError(validationResult),\n        });\n        return validationResult;\n      }\n\n      const { email, code } = validationResult;\n\n      // Check session email matches\n      if (session.user.email !== email) {\n        logger.warning('verify_session_mismatch', {\n          sessionEmail: session.user.email,\n          requestEmail: email,\n        });\n        return err('Session mismatch', { email: 'Email does not match session' });\n      }\n\n      // Verify the code\n      const verifyResult = await verifyCode(email, code, purpose, context);\n\n      if (isError(verifyResult)) {\n        logger.warning('verify_code_invalid', {\n          email,\n          purpose,\n          error: flattenError(verifyResult),\n        });\n        return err(verifyResult.message, { code: verifyResult.message });\n      }\n\n      const verification = verifyResult;\n\n      // Get user from database\n      const userResult = await repository.getUserByEmail(email);\n\n      if (isError(userResult)) {\n        logger.error('verify_user_not_found', { email });\n        return err('User not found');\n      }\n\n      const user = userResult;\n\n      // Handle different verification purposes\n      switch (purpose) {\n        case 'signup':\n        case 'email-change': {\n          // Update email verified status\n          const updateResult = await repository.updateEmailVerified(user.id, true);\n\n          if (isError(updateResult)) {\n            logger.error('verify_update_failed', { userId: user.id, purpose });\n            return err('Failed to update verification status');\n          }\n\n          logger.info('email_verified', { email, purpose });\n          throw redirect(authConfig.routes.signedin);\n        }\n\n        case 'passkey-add':\n        case 'passkey-delete':\n        case 'account-delete': {\n          // These will be handled by their respective action handlers\n          // Return success with metadata for further processing\n          logger.info('verification_completed', { email, purpose });\n          return ok({\n            verified: true,\n            purpose,\n            metadata: verification.metadata,\n          });\n        }\n\n        default: {\n          logger.warning('verify_unknown_purpose', { purpose });\n          return err('Unknown verification purpose');\n        }\n      }\n    },\n  };\n\n  // Handle intent\n  const result = await handleIntent(formData, handlers);\n\n  if (isError(result)) {\n    logger.warning('verify_intent_failed', {\n      error: flattenError(result),\n      email: session.user.email,\n    });\n    return respondError(result);\n  }\n\n  return respondOk(result);\n}\n",
    "import { getContext } from '@ycore/forge/context';\nimport { logger } from '@ycore/forge/logger';\nimport { err, ok, type Result } from '@ycore/forge/result';\nimport { getBindings } from '@ycore/forge/services';\nimport type { RouterContextProvider } from 'react-router';\n\nimport { authConfigContext } from '../auth.context';\n\nexport type VerificationPurpose = 'signup' | 'passkey-add' | 'passkey-delete' | 'email-change' | 'account-delete' | 'recovery';\n\ninterface TOTPOptions {\n  secret: string | Uint8Array;\n  timestamp?: number;\n  period?: number;\n  digits?: number;\n  algorithm?: 'SHA-1' | 'SHA-256' | 'SHA-512';\n}\n\ninterface VerifyTOTPOptions extends TOTPOptions {\n  token: string;\n  window?: number;\n}\n\ninterface StoredVerification {\n  secret: string;\n  expireAt: number;\n  attempts: number;\n  purpose: VerificationPurpose;\n  metadata?: Record<string, unknown>;\n}\n\nfunction base32Decode(input: string): Uint8Array {\n  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';\n  const cleanInput = input.replace(/[^A-Z2-7]/gi, '').toUpperCase();\n\n  let bits = '';\n  for (const char of cleanInput) {\n    const value = alphabet.indexOf(char);\n    if (value === -1) throw new Error(`Invalid base32 character: ${char}`);\n    bits += value.toString(2).padStart(5, '0');\n  }\n\n  const bytes = new Uint8Array(Math.floor(bits.length / 8));\n  for (let i = 0; i < bytes.length; i++) {\n    bytes[i] = Number.parseInt(bits.slice(i * 8, (i + 1) * 8), 2);\n  }\n\n  return bytes;\n}\n\nfunction normalizeSecret(secret: string | Uint8Array): Uint8Array {\n  if (secret instanceof Uint8Array) return secret;\n\n  try {\n    return base32Decode(secret);\n  } catch {\n    return new TextEncoder().encode(secret);\n  }\n}\n\nfunction uint64ToBytes(num: number): Uint8Array {\n  const bytes = new Uint8Array(8);\n  const high = Math.floor(num / 0x100000000);\n  const low = num & 0xffffffff;\n\n  bytes[0] = (high >>> 24) & 0xff;\n  bytes[1] = (high >>> 16) & 0xff;\n  bytes[2] = (high >>> 8) & 0xff;\n  bytes[3] = high & 0xff;\n  bytes[4] = (low >>> 24) & 0xff;\n  bytes[5] = (low >>> 16) & 0xff;\n  bytes[6] = (low >>> 8) & 0xff;\n  bytes[7] = low & 0xff;\n\n  return bytes;\n}\n\nasync function hmac(algorithm: string, key: Uint8Array, data: Uint8Array): Promise<Uint8Array> {\n  // Convert to ArrayBuffer for Web Crypto API\n  const keyBuffer = new ArrayBuffer(key.length);\n  new Uint8Array(keyBuffer).set(key);\n\n  const dataBuffer = new ArrayBuffer(data.length);\n  new Uint8Array(dataBuffer).set(data);\n\n  const cryptoKey = await crypto.subtle.importKey('raw', keyBuffer, { name: 'HMAC', hash: algorithm }, false, ['sign']);\n  const signature = await crypto.subtle.sign('HMAC', cryptoKey, dataBuffer);\n  return new Uint8Array(signature);\n}\n\nfunction dynamicTruncation(hash: Uint8Array, digits: number): string {\n  const offset = hash[hash.length - 1] & 0x0f;\n  const code = ((hash[offset] & 0x7f) << 24) | ((hash[offset + 1] & 0xff) << 16) | ((hash[offset + 2] & 0xff) << 8) | (hash[offset + 3] & 0xff);\n\n  return (code % 10 ** digits).toString().padStart(digits, '0');\n}\n\nexport function generateSecret(length = 32): Uint8Array {\n  if (length <= 0) throw new Error('Length must be positive');\n  return crypto.getRandomValues(new Uint8Array(length));\n}\n\nexport function base32Encode(bytes: Uint8Array): string {\n  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';\n  let bits = '';\n\n  for (const byte of bytes) {\n    bits += byte.toString(2).padStart(8, '0');\n  }\n\n  let result = '';\n  for (let i = 0; i < bits.length; i += 5) {\n    const chunk = bits.slice(i, i + 5).padEnd(5, '0');\n    result += alphabet[Number.parseInt(chunk, 2)];\n  }\n\n  return result;\n}\n\nexport async function generateTOTP(options: TOTPOptions): Promise<string> {\n  const { secret, timestamp = Date.now(), period = 30, digits = 6, algorithm = 'SHA-1' } = options;\n\n  if (period <= 0) throw new Error('Period must be positive');\n\n  const counter = Math.floor(timestamp / 1000 / period);\n  const secretBytes = normalizeSecret(secret);\n  const counterBytes = uint64ToBytes(counter);\n  const algoName = algorithm === 'SHA-1' ? 'SHA-1' : algorithm === 'SHA-256' ? 'SHA-256' : 'SHA-512';\n\n  const hash = await hmac(algoName, secretBytes, counterBytes);\n  return dynamicTruncation(hash, digits);\n}\n\nexport async function verifyTOTP(options: VerifyTOTPOptions): Promise<{ valid: boolean; timestamp?: number }> {\n  const { token, window = 1, timestamp = Date.now(), period = 30, ...totpOptions } = options;\n\n  if (!/^\\d+$/.test(token)) {\n    return { valid: false };\n  }\n\n  const currentPeriod = Math.floor(timestamp / 1000 / period);\n\n  for (let i = -window; i <= window; i++) {\n    const testPeriod = currentPeriod + i;\n    const testTimestamp = testPeriod * period * 1000;\n    const expectedToken = await generateTOTP({\n      ...totpOptions,\n      timestamp: testTimestamp,\n      period,\n    });\n\n    if (token === expectedToken) {\n      return { valid: true, timestamp: testTimestamp };\n    }\n  }\n\n  return { valid: false };\n}\n\nconst kvKeyTemplate = (purpose: VerificationPurpose, email: string) => `totp:${purpose}:${email}`;\n\nexport async function createVerificationCode(email: string, purpose: VerificationPurpose, context: Readonly<RouterContextProvider>, metadata?: Record<string, unknown>): Promise<Result<string>> {\n  try {\n    const authConfig = getContext(context, authConfigContext);\n    if (!authConfig) {\n      return err('Auth configuration not found');\n    }\n\n    const env = getBindings(context);\n    const kv = env[authConfig.session.kvBinding as keyof typeof env] as KVNamespace;\n    if (!kv) {\n      return err(`KV binding '${authConfig.session.kvBinding}' not found`);\n    }\n\n    const secret = base32Encode(generateSecret());\n    const period = authConfig.verification.period;\n    const digits = authConfig.verification.digits;\n\n    const code = await generateTOTP({ secret, period, digits });\n\n    const verificationData: StoredVerification = {\n      secret,\n      expireAt: Date.now() + period * 1000,\n      attempts: 0,\n      purpose,\n      metadata,\n    };\n\n    await kv.put(kvKeyTemplate(purpose, email), JSON.stringify(verificationData), { expirationTtl: period });\n\n    logger.info('verification_code_created', { email, purpose });\n\n    return ok(code);\n  } catch (error) {\n    logger.error('verification_code_creation_failed', {\n      email,\n      purpose,\n      error: error instanceof Error ? error.message : String(error),\n      stack: error instanceof Error ? error.stack : undefined,\n    });\n    return err('Failed to create verification code', { error });\n  }\n}\n\nexport async function verifyCode(email: string, code: string, purpose: VerificationPurpose, context: Readonly<RouterContextProvider>): Promise<Result<StoredVerification>> {\n  try {\n    const authConfig = getContext(context, authConfigContext);\n    if (!authConfig) {\n      return err('Auth configuration not found');\n    }\n\n    const env = getBindings(context);\n    const kv = env[authConfig.session.kvBinding as keyof typeof env] as KVNamespace;\n    if (!kv) {\n      return err(`KV binding '${authConfig.session.kvBinding}' not found`);\n    }\n\n    const kvKey = kvKeyTemplate(purpose, email);\n    const storedData = await kv.get(kvKey);\n\n    if (!storedData) {\n      logger.warning('verification_code_not_found', { email, purpose });\n      return err('Verification code expired or not found');\n    }\n\n    const verification: StoredVerification = JSON.parse(storedData);\n\n    // Check purpose match\n    if (verification.purpose !== purpose) {\n      logger.warning('verification_purpose_mismatch', {\n        email,\n        expected: purpose,\n        actual: verification.purpose,\n      });\n      return err('Invalid verification code');\n    }\n\n    // Check max attempts\n    if (verification.attempts >= authConfig.verification.maxAttempts) {\n      await kv.delete(kvKey);\n      logger.warning('verification_max_attempts', { email, purpose });\n      return err('Maximum verification attempts reached');\n    }\n\n    // Check expiration\n    if (Date.now() > verification.expireAt) {\n      await kv.delete(kvKey);\n      logger.warning('verification_expired', { email, purpose });\n      return err('Verification code has expired');\n    }\n\n    // Verify the code\n    const result = await verifyTOTP({\n      secret: verification.secret,\n      token: code,\n      period: authConfig.verification.period,\n      digits: authConfig.verification.digits,\n      window: authConfig.verification.window,\n    });\n\n    if (!result.valid) {\n      // Increment attempts\n      await kv.put(kvKey, JSON.stringify({ ...verification, attempts: verification.attempts + 1 }), { expirationTtl: authConfig.verification.period });\n      logger.warning('verification_code_invalid', { email, purpose, attempts: verification.attempts + 1 });\n      return err('Invalid verification code');\n    }\n\n    // Success - delete the verification data\n    await kv.delete(kvKey);\n    logger.info('verification_code_verified', { email, purpose });\n\n    return ok(verification);\n  } catch (error) {\n    logger.error('verification_code_verification_failed', {\n      email,\n      purpose,\n      error: error instanceof Error ? error.message : String(error),\n    });\n    return err('Failed to verify code', { error });\n  }\n}\n",
    "import { logger } from '@ycore/forge/logger';\nimport { err, flattenError, isError, ok, type Result } from '@ycore/forge/result';\nimport { getBindings } from '@ycore/forge/services';\nimport type { RouterContextProvider } from 'react-router';\n\nimport type { EmailConfig } from '../../email/@types/email.types';\nimport { createEmailProvider, getProviderConfig } from '../../email/email-provider';\nimport { createTotpTemplate } from '../../email/templates/auth-totp';\nimport { createVerificationCode, type VerificationPurpose } from './totp-service';\n\nexport interface SendVerificationOptions {\n  email: string;\n  purpose: VerificationPurpose;\n  metadata?: Record<string, unknown>;\n  context: Readonly<RouterContextProvider>;\n  emailConfig: EmailConfig;\n}\n\n/**\n * Send verification email with TOTP code\n * Orchestrates code generation and email sending\n */\nexport async function sendVerificationEmail(options: SendVerificationOptions): Promise<Result<void>> {\n  const { email, purpose, metadata, context, emailConfig } = options;\n\n  try {\n    // Generate TOTP code\n    const codeResult = await createVerificationCode(email, purpose, context, metadata);\n\n    if (isError(codeResult)) {\n      logger.error('verification_email_code_generation_failed', {\n        email,\n        purpose,\n        error: flattenError(codeResult),\n      });\n      return codeResult;\n    }\n\n    const code = codeResult;\n\n    // Create email content\n    const emailContent = createTotpTemplate({ code, purpose });\n\n    // Get active email provider\n    const activeProvider = emailConfig.active;\n\n    if (!activeProvider) {\n      logger.error('verification_email_no_provider', { email, purpose });\n      return err('No active email provider configured');\n    }\n\n    const providerConfig = getProviderConfig(emailConfig, activeProvider);\n    if (!providerConfig) {\n      logger.error('verification_email_provider_config_missing', {\n        email,\n        purpose,\n        provider: activeProvider,\n      });\n      return err(`Provider configuration not found for: ${activeProvider}`);\n    }\n\n    // Create email provider instance\n    const emailProviderResult = createEmailProvider(activeProvider);\n    if (isError(emailProviderResult)) {\n      logger.error('verification_email_provider_creation_failed', {\n        email,\n        purpose,\n        provider: activeProvider,\n        error: flattenError(emailProviderResult),\n      });\n      return emailProviderResult;\n    }\n\n    // Get API key from environment using the configured secret key\n    const bindings = getBindings(context);\n    const apiKey = providerConfig.apiKey\n      ? bindings[providerConfig.apiKey as keyof typeof bindings] as string | undefined\n      : undefined;\n\n    // Send email\n    const sendResult = await emailProviderResult.sendEmail({\n      apiKey: apiKey || '',\n      to: email,\n      from: providerConfig.sendFrom,\n      template: {\n        subject: emailContent.subject,\n        text: emailContent.text,\n        html: emailContent.html,\n      },\n    });\n\n    if (isError(sendResult)) {\n      logger.error('verification_email_send_failed', {\n        email,\n        purpose,\n        error: flattenError(sendResult),\n      });\n      return sendResult;\n    }\n\n    logger.info('verification_email_sent', { email, purpose });\n    return ok(undefined);\n  } catch (error) {\n    logger.error('verification_email_unexpected_error', {\n      email,\n      purpose,\n      error: error instanceof Error ? error.message : 'Unknown error',\n      stack: error instanceof Error ? error.stack : undefined,\n    });\n    return err('Failed to send verification email', { error });\n  }\n}\n",
    "import type { Result } from '@ycore/forge/result';\nimport { err } from '@ycore/forge/result';\nimport type { EmailConfig, EmailProvider, EmailProviderConfig, EmailProviders } from './@types/email.types';\nimport { MockEmailProvider } from './providers/local-dev';\nimport { MailChannelsEmailProvider } from './providers/mailchannels';\nimport { ResendEmailProvider } from './providers/resend';\nimport { TestMockEmailProvider } from './providers/test-mock';\n\nconst providerRegistry: Record<EmailProviders, () => EmailProvider> = {\n  'local-dev': () => new MockEmailProvider(),\n  mailchannels: () => new MailChannelsEmailProvider(),\n  resend: () => new ResendEmailProvider(),\n  'test-mock': () => new TestMockEmailProvider(),\n};\n\nexport function createEmailProvider(providerName: string): Result<EmailProvider> {\n  if (!isValidProvider(providerName)) {\n    return err(`Unsupported email provider: ${providerName}`);\n  }\n\n  try {\n    const factory = providerRegistry[providerName];\n    return factory();\n  } catch (error) {\n    return err(`Failed to create email provider: ${providerName}`, undefined, { cause: error });\n  }\n}\n\nexport function isValidProvider(providerName: string): providerName is EmailProviders {\n  return providerName in providerRegistry;\n}\n\nexport function getSupportedProviders(): EmailProviders[] {\n  return Object.keys(providerRegistry) as EmailProviders[];\n}\n\nexport function getEmailProviderNames(emailConfig: EmailConfig): string[] {\n  return emailConfig.providers.map(provider => provider.name);\n}\n\nexport function getProviderConfig(emailConfig: EmailConfig, providerName: string): EmailProviderConfig | undefined {\n  return emailConfig.providers.find(provider => provider.name === providerName);\n}\n",
    "import { logger } from '@ycore/forge/logger';\nimport type { Result } from '@ycore/forge/result';\nimport { err, tryCatch } from '@ycore/forge/result';\nimport type { EmailProvider, SendEmailOptions } from '../@types/email.types';\n\n/**\n * Local dev Email Provider - Development provider that logs emails instead of sending\n */\nexport class MockEmailProvider implements EmailProvider {\n  async sendEmail(options: SendEmailOptions): Promise<Result<void>> {\n    const { to, from, template } = options;\n\n    if (!from) {\n      return err('From address is required');\n    }\n\n    return tryCatch(async () => {\n      // Simulate a slight delay like a real email service\n      await new Promise(resolve => setTimeout(resolve, 100));\n\n      logger.info({\n        event: 'local_dev_email_sent',\n        provider: 'local-dev',\n        from,\n        to,\n        subject: template.subject,\n        // htmlLength: template.html.length,\n        text: template.text,\n      });\n\n      return; // Success - void return\n    }, 'Failed to send mock email');\n  }\n}\n",
    "import { logger } from '@ycore/forge/logger';\nimport type { Result } from '@ycore/forge/result';\nimport { err, tryCatch } from '@ycore/forge/result';\nimport type { EmailProvider, SendEmailOptions } from '../@types/email.types';\n\n/**\n * MailChannels Email Provider\n * Implementation for MailChannels email service\n *\n * Requires DNS record for authorization:\n * Type: TXT, Name: _mailchannels, Content: \"v=mc1 auth=<AccountId>\"\n */\nexport class MailChannelsEmailProvider implements EmailProvider {\n  private readonly apiUrl = 'https://api.mailchannels.net/tx/v1/send';\n\n  async sendEmail(options: SendEmailOptions): Promise<Result<void>> {\n    const { apiKey, to, from, template } = options;\n\n    if (!from) {\n      return err('From address is required');\n    }\n\n    return tryCatch(async () => {\n      const payload = {\n        personalizations: [\n          {\n            to: [{ email: to }],\n          },\n        ],\n        from: { email: from },\n        subject: template.subject,\n        content: [\n          { type: 'text/plain', value: template.text },\n          { type: 'text/html', value: template.html },\n        ],\n      };\n\n      const response = await fetch(this.apiUrl, {\n        method: 'POST',\n        headers: {\n          'X-Api-Key': apiKey,\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        },\n        body: JSON.stringify(payload),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`MailChannels API error: ${response.status} ${errorText}`);\n      }\n\n      logger.debug({\n        event: 'email_sent_success',\n        provider: 'mailchannels',\n        to,\n        subject: template.subject,\n      });\n\n      return; // Success - void return\n    }, 'Failed to send email via MailChannels');\n  }\n}\n",
    "import { logger } from '@ycore/forge/logger';\nimport type { Result } from '@ycore/forge/result';\nimport { err, tryCatch } from '@ycore/forge/result';\nimport type { EmailProvider, SendEmailOptions } from '../@types/email.types';\n\n/**\n * Resend Email Provider\n * Implementation for Resend email service\n */\nexport class ResendEmailProvider implements EmailProvider {\n  async sendEmail(options: SendEmailOptions): Promise<Result<void>> {\n    const { apiKey, to, from, template } = options;\n\n    if (!from) {\n      return err('From address is required');\n    }\n\n    return tryCatch(async () => {\n      const response = await fetch('https://api.resend.com/emails', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${apiKey}`,\n        },\n        body: JSON.stringify({\n          from,\n          to,\n          subject: template.subject,\n          html: template.html,\n          text: template.text,\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(`Resend API error: ${response.status} ${error}`);\n      }\n\n      logger.debug({\n        event: 'email_sent_success',\n        provider: 'resend',\n        to,\n      });\n\n      return; // Success - void return\n    }, 'Failed to send email via Resend');\n  }\n}\n",
    "import { logger } from '@ycore/forge/logger';\nimport type { Result } from '@ycore/forge/result';\nimport { err, tryCatch } from '@ycore/forge/result';\nimport type { EmailProvider, SendEmailOptions } from '../@types/email.types';\n\n/**\n * Test Mock Email Provider\n * Enhanced mock provider for testing that tracks sent emails and allows failure simulation\n */\nexport class TestMockEmailProvider implements EmailProvider {\n  private static sentEmails: SendEmailOptions[] = [];\n  private static shouldFail = false;\n  private static failureReason = 'Simulated email failure';\n\n  async sendEmail(options: SendEmailOptions): Promise<Result<void>> {\n    const { to, from, template } = options;\n\n    if (!from) {\n      return err('From address is required');\n    }\n\n    // Store email for test verification (deep copy to prevent mutation)\n    TestMockEmailProvider.sentEmails.push({\n      apiKey: options.apiKey,\n      to,\n      from,\n      template: {\n        subject: template.subject,\n        html: template.html,\n        text: template.text,\n      },\n    });\n\n    // Simulate failure if configured\n    if (TestMockEmailProvider.shouldFail) {\n      return err(TestMockEmailProvider.failureReason);\n    }\n\n    return tryCatch(async () => {\n      // Faster delay for tests (10ms vs 100ms)\n      await new Promise(resolve => setTimeout(resolve, 10));\n\n      logger.debug({\n        event: 'email_test_mock_sent',\n        provider: 'test-mock',\n        from,\n        to,\n        subject: template.subject,\n        textLength: template.text.length,\n        htmlLength: template.html.length,\n      });\n\n      return; // Success - void return\n    }, 'Failed to send test mock email');\n  }\n\n  // Test utility methods\n  static getSentEmails(): SendEmailOptions[] {\n    return [...TestMockEmailProvider.sentEmails]; // Return copy to prevent mutation\n  }\n\n  static getLastSentEmail(): SendEmailOptions | undefined {\n    const lastEmail = TestMockEmailProvider.sentEmails[TestMockEmailProvider.sentEmails.length - 1];\n    if (!lastEmail) {\n      return undefined;\n    }\n    // Return deep copy to prevent mutation\n    return {\n      apiKey: lastEmail.apiKey,\n      to: lastEmail.to,\n      from: lastEmail.from,\n      template: {\n        subject: lastEmail.template.subject,\n        html: lastEmail.template.html,\n        text: lastEmail.template.text,\n      },\n    };\n  }\n\n  static getEmailCount(): number {\n    return TestMockEmailProvider.sentEmails.length;\n  }\n\n  static findEmailByTo(to: string): SendEmailOptions | undefined {\n    return TestMockEmailProvider.sentEmails.find(email => email.to === to);\n  }\n\n  static findEmailsBySubject(subject: string): SendEmailOptions[] {\n    return TestMockEmailProvider.sentEmails.filter(email => email.template.subject.includes(subject));\n  }\n\n  static clearSentEmails(): void {\n    TestMockEmailProvider.sentEmails = [];\n  }\n\n  static simulateFailure(reason = 'Simulated email failure'): void {\n    TestMockEmailProvider.shouldFail = true;\n    TestMockEmailProvider.failureReason = reason;\n  }\n\n  static resetToSuccess(): void {\n    TestMockEmailProvider.shouldFail = false;\n    TestMockEmailProvider.failureReason = 'Simulated email failure';\n  }\n\n  static reset(): void {\n    TestMockEmailProvider.clearSentEmails();\n    TestMockEmailProvider.resetToSuccess();\n  }\n\n  static getFailureState(): { shouldFail: boolean; reason: string } {\n    return {\n      shouldFail: TestMockEmailProvider.shouldFail,\n      reason: TestMockEmailProvider.failureReason,\n    };\n  }\n\n  // Assertion helpers for tests\n  static assertEmailSent(to: string): SendEmailOptions {\n    const email = TestMockEmailProvider.findEmailByTo(to);\n    if (!email) {\n      throw new Error(`Expected email to be sent to ${to}, but no email was found`);\n    }\n    return email;\n  }\n\n  static assertEmailCount(expectedCount: number): void {\n    const actualCount = TestMockEmailProvider.getEmailCount();\n    if (actualCount !== expectedCount) {\n      throw new Error(`Expected ${expectedCount} emails to be sent, but ${actualCount} were sent`);\n    }\n  }\n\n  static assertNoEmailsSent(): void {\n    TestMockEmailProvider.assertEmailCount(0);\n  }\n}\n",
    "import type { EmailTemplate, TotpEmailData } from '../@types/email.types';\n\nexport type VerificationPurpose = 'signup' | 'passkey-add' | 'passkey-delete' | 'email-change' | 'account-delete' | 'recovery';\n\ninterface TotpTemplateData extends TotpEmailData {\n  purpose: VerificationPurpose;\n}\n\nconst purposeContent = {\n  signup: {\n    title: 'Verify Your Email',\n    message: 'Thank you for signing up! Please verify your email address to complete your registration.',\n    action: 'verify your email',\n  },\n  'passkey-add': {\n    title: 'Confirm Adding Passkey',\n    message: 'You are about to add a new passkey to your account. Please verify this action.',\n    action: 'confirm adding the passkey',\n  },\n  'passkey-delete': {\n    title: 'Confirm Passkey Removal',\n    message: 'You are about to remove a passkey from your account. Please verify this action.',\n    action: 'confirm removing the passkey',\n  },\n  'email-change': {\n    title: 'Verify New Email Address',\n    message: 'You requested to change your email address. Please verify your new email.',\n    action: 'verify your new email address',\n  },\n  'account-delete': {\n    title: 'Confirm Account Deletion',\n    message: 'You requested to delete your account. This action cannot be undone. Please confirm.',\n    action: 'confirm account deletion',\n  },\n  recovery: {\n    title: 'Account Recovery',\n    message: 'You requested account recovery. Use this code to regain access to your account.',\n    action: 'recover your account',\n  },\n};\n\n/**\n * Authentication TOTP Email Template\n * Email template for TOTP verification codes with purpose-specific content\n */\nexport function createTotpTemplate(data: TotpTemplateData): EmailTemplate {\n  const { code, purpose } = data;\n  const content = purposeContent[purpose];\n\n  const subject = content.title;\n\n  const html = `\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <title>${content.title}</title>\n        <style>\n          .container {\n            max-width: 600px;\n            margin: 0 auto;\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            line-height: 1.5;\n            color: #333;\n          }\n          .header {\n            text-align: center;\n            padding: 40px 20px 20px;\n          }\n          .message {\n            text-align: center;\n            padding: 0 20px 20px;\n            color: #666;\n          }\n          .code {\n            background: #f8f9fa;\n            border: 2px solid #e9ecef;\n            border-radius: 8px;\n            font-size: 32px;\n            font-weight: bold;\n            letter-spacing: 8px;\n            text-align: center;\n            padding: 20px;\n            margin: 20px;\n            color: #495057;\n          }\n          .footer {\n            text-align: center;\n            padding: 20px;\n            color: #6c757d;\n            font-size: 14px;\n          }\n          ${purpose === 'account-delete' ? '.container { background: #fff3cd; padding: 20px; border-radius: 8px; border: 2px solid #ffc107; }' : ''}\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1>${content.title}</h1>\n          </div>\n          <div class=\"message\">\n            <p>${content.message}</p>\n          </div>\n\n          <div class=\"code\">${code}</div>\n\n          <div class=\"footer\">\n            <p>This code will expire in <strong>8 minutes</strong>.</p>\n            <p>If you didn't request this code, please ignore this email${purpose === 'account-delete' || purpose === 'passkey-delete' ? ' and consider securing your account' : ''}.</p>\n          </div>\n        </div>\n      </body>\n    </html>\n  `;\n\n  const text = `\n${content.title}\n\n${content.message}\n\nYour verification code: ${code}\n\nUse this code to ${content.action}.\nThis code will expire in 8 minutes.\n\nIf you didn't request this code, please ignore this email${purpose === 'account-delete' || purpose === 'passkey-delete' ? ' and consider securing your account' : ''}.\n  `.trim();\n\n  return {\n    subject,\n    html,\n    text,\n  };\n}\n",
    "import { decodeBase64url } from '@oslojs/encoding';\n\n/**\n * Helper function to convert serialized ArrayBuffer back to ArrayBuffer\n *\n * Handles multiple input formats:\n * - Native ArrayBuffer (passthrough)\n * - Serialized object format: {\"0\": byte, \"1\": byte, ...}\n * - Base64url encoded string\n */\nexport function arrayBufferFromObject(obj: any): ArrayBuffer {\n  if (obj instanceof ArrayBuffer) {\n    return obj;\n  }\n\n  // Handle serialized ArrayBuffer format: {\"0\": byte, \"1\": byte, ...}\n  if (typeof obj === 'object' && obj !== null) {\n    const keys = Object.keys(obj);\n    // Check if it looks like a serialized ArrayBuffer (numeric keys)\n    if (keys.length > 0 && keys.every(key => /^\\d+$/.test(key))) {\n      const bytes = Object.values(obj) as number[];\n      const uint8Array = new Uint8Array(bytes);\n      // Create a new ArrayBuffer and copy the data to ensure it's an ArrayBuffer, not SharedArrayBuffer\n      const buffer = new ArrayBuffer(uint8Array.length);\n      new Uint8Array(buffer).set(uint8Array);\n      return buffer;\n    }\n  }\n\n  // If it's a string, assume it's base64url encoded\n  if (typeof obj === 'string') {\n    const uint8Array = decodeBase64url(obj);\n    const buffer = new ArrayBuffer(uint8Array.length);\n    new Uint8Array(buffer).set(uint8Array);\n    return buffer;\n  }\n\n  // If conversion fails, create empty buffer (will handle below)\n  return new ArrayBuffer(0);\n}\n\n/**\n * Convert server-generated WebAuthn options to browser-compatible format\n *\n * Key transformations:\n * - Reconstructs ArrayBuffer from base64url challenge string\n * - Converts user.id from serialized to ArrayBuffer\n * - Processes excludeCredentials with proper ArrayBuffer IDs\n */\nexport function convertServerOptionsToWebAuthn(serverOptions: any, challengeString: string): PublicKeyCredentialCreationOptions {\n  // Use the challenge string from the response root, not from options\n  const challengeUint8Array = decodeBase64url(challengeString);\n  const challengeBuffer = new ArrayBuffer(challengeUint8Array.length);\n  new Uint8Array(challengeBuffer).set(challengeUint8Array);\n\n  return {\n    ...serverOptions,\n    challenge: challengeBuffer,\n    user: {\n      ...serverOptions.user,\n      id: arrayBufferFromObject(serverOptions.user.id),\n    },\n    excludeCredentials:\n      serverOptions.excludeCredentials?.map((cred: any) => ({\n        ...cred,\n        id: arrayBufferFromObject(cred.id),\n      })) || [],\n  };\n}\n\n/**\n * Convert WebAuthn credential from browser to server-compatible format\n *\n * Transforms credential data from browser's binary ArrayBuffer format\n * into a JSON-serializable format suitable for server processing and\n * database storage.\n */\nexport function convertWebAuthnCredentialToStorage(credential: {\n  id: string;\n  rawId: string;\n  response: {\n    attestationObject: string;\n    clientDataJSON: string;\n    transports?: string[];\n  };\n  authenticatorAttachment?: string | null;\n}): {\n  id: string;\n  rawId: ArrayBufferLike;\n  response: {\n    attestationObject: ArrayBufferLike;\n    clientDataJSON: ArrayBufferLike;\n    transports?: AuthenticatorTransport[];\n  };\n  type: 'public-key';\n  authenticatorAttachment?: AuthenticatorAttachment | null;\n} {\n  // Convert base64url strings to ArrayBuffers\n  const rawIdUint8Array = decodeBase64url(credential.rawId);\n  const rawIdBuffer = new ArrayBuffer(rawIdUint8Array.length);\n  new Uint8Array(rawIdBuffer).set(rawIdUint8Array);\n\n  const attestationUint8Array = decodeBase64url(credential.response.attestationObject);\n  const attestationBuffer = new ArrayBuffer(attestationUint8Array.length);\n  new Uint8Array(attestationBuffer).set(attestationUint8Array);\n\n  const clientDataUint8Array = decodeBase64url(credential.response.clientDataJSON);\n  const clientDataBuffer = new ArrayBuffer(clientDataUint8Array.length);\n  new Uint8Array(clientDataBuffer).set(clientDataUint8Array);\n\n  return {\n    id: credential.id,\n    rawId: rawIdBuffer as ArrayBufferLike,\n    response: {\n      attestationObject: attestationBuffer as ArrayBufferLike,\n      clientDataJSON: clientDataBuffer as ArrayBufferLike,\n      transports: credential.response?.transports as AuthenticatorTransport[] | undefined,\n    },\n    type: 'public-key' as const,\n    authenticatorAttachment: credential.authenticatorAttachment as AuthenticatorAttachment | null | undefined,\n  };\n}\n"
  ],
  "mappings": "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",
  "debugId": "6CB44DDD338F092664756E2164756E21",
  "names": []
}
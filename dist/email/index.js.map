{
  "version": 3,
  "sources": ["../../src/email/providers/resend.ts", "../../src/email/email.ts", "../../src/email/email.config.ts", "../../src/email/email.context.ts", "../../src/email/email-provider.ts", "../../src/email/providers/local-dev.ts", "../../src/email/providers/mailchannels.ts", "../../src/email/providers/test-mock.ts", "../../src/email/email-validator.ts", "../../src/email/templates/auth-totp.ts", "../../src/email/templates/minimal-template.ts", "../../src/email/templates/mock-template.ts"],
  "sourcesContent": [
    "import { logger } from '@ycore/forge/logger';\nimport type { Result } from '@ycore/forge/result';\nimport { err, tryCatch } from '@ycore/forge/result';\nimport type { EmailProvider, SendEmailOptions } from '../@types/email.types';\n\n/**\n * Resend Email Provider\n * Implementation for Resend email service\n */\nexport class ResendEmailProvider implements EmailProvider {\n  async sendEmail(options: SendEmailOptions): Promise<Result<void>> {\n    const { apiKey, to, from, template } = options;\n\n    if (!from) {\n      return err('From address is required');\n    }\n\n    return tryCatch(async () => {\n      const response = await fetch('https://api.resend.com/emails', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${apiKey}`,\n        },\n        body: JSON.stringify({\n          from,\n          to,\n          subject: template.subject,\n          html: template.html,\n          text: template.text,\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(`Resend API error: ${response.status} ${error}`);\n      }\n\n      logger.debug({\n        event: 'email_sent_success',\n        provider: 'resend',\n        to,\n      });\n\n      return; // Success - void return\n    }, 'Failed to send email via Resend');\n  }\n}\n",
    "import type { Result } from '@ycore/forge/result';\nimport type { SendEmailOptions } from './@types/email.types';\nimport { ResendEmailProvider } from './providers/resend';\n\nconst emailProvider = new ResendEmailProvider();\n\n/**\n * Send email using configured provider\n */\nexport async function sendEmail(options: SendEmailOptions): Promise<Result<void>> {\n  return emailProvider.sendEmail(options);\n}\n",
    "import type { EmailConfig } from './@types/email.types';\n\nexport const defaultEmailConfig: EmailConfig = {\n  active: 'local-dev', // Default to local-dev (dev)\n  providers: [\n    {\n      name: 'resend',\n      sendFrom: 'noreply@example.com',\n    },\n    {\n      name: 'mailchannels',\n      sendFrom: 'noreply@example.com',\n    },\n    {\n      name: 'local-dev',\n      sendFrom: 'dev@localhost',\n    },\n  ],\n};\n",
    "import { createContext, type RouterContextProvider } from 'react-router';\nimport type { EmailConfig } from './@types/email.types';\n\n// Context key for email configuration\nexport const emailContext = createContext<EmailConfig | null>(null);\n\n/**\n * Set email configuration in React Router context\n */\nexport function setEmailConfig(context: RouterContextProvider, emailConfig: EmailConfig): void {\n  context.set(emailContext, emailConfig);\n}\n\n/**\n * Get email configuration from React Router context\n */\nexport function getEmailConfig(context: Readonly<RouterContextProvider>): EmailConfig | null {\n  return context.get(emailContext) || null;\n}\n",
    "import type { Result } from '@ycore/forge/result';\nimport { err } from '@ycore/forge/result';\nimport type { EmailConfig, EmailProvider, EmailProviderConfig, EmailProviders } from './@types/email.types';\nimport { MockEmailProvider } from './providers/local-dev';\nimport { MailChannelsEmailProvider } from './providers/mailchannels';\nimport { ResendEmailProvider } from './providers/resend';\nimport { TestMockEmailProvider } from './providers/test-mock';\n\nconst providerRegistry: Record<EmailProviders, () => EmailProvider> = {\n  'local-dev': () => new MockEmailProvider(),\n  mailchannels: () => new MailChannelsEmailProvider(),\n  resend: () => new ResendEmailProvider(),\n  'test-mock': () => new TestMockEmailProvider(),\n};\n\nexport function createEmailProvider(providerName: string): Result<EmailProvider> {\n  if (!isValidProvider(providerName)) {\n    return err(`Unsupported email provider: ${providerName}`);\n  }\n\n  try {\n    const factory = providerRegistry[providerName];\n    return factory();\n  } catch (error) {\n    return err(`Failed to create email provider: ${providerName}`, undefined, { cause: error });\n  }\n}\n\nexport function isValidProvider(providerName: string): providerName is EmailProviders {\n  return providerName in providerRegistry;\n}\n\nexport function getSupportedProviders(): EmailProviders[] {\n  return Object.keys(providerRegistry) as EmailProviders[];\n}\n\nexport function getEmailProviderNames(emailConfig: EmailConfig): string[] {\n  return emailConfig.providers.map(provider => provider.name);\n}\n\nexport function getProviderConfig(emailConfig: EmailConfig, providerName: string): EmailProviderConfig | undefined {\n  return emailConfig.providers.find(provider => provider.name === providerName);\n}\n",
    "import { logger } from '@ycore/forge/logger';\nimport type { Result } from '@ycore/forge/result';\nimport { err, tryCatch } from '@ycore/forge/result';\nimport type { EmailProvider, SendEmailOptions } from '../@types/email.types';\n\n/**\n * Local dev Email Provider - Development provider that logs emails instead of sending\n */\nexport class MockEmailProvider implements EmailProvider {\n  async sendEmail(options: SendEmailOptions): Promise<Result<void>> {\n    const { to, from, template } = options;\n\n    if (!from) {\n      return err('From address is required');\n    }\n\n    return tryCatch(async () => {\n      // Simulate a slight delay like a real email service\n      await new Promise(resolve => setTimeout(resolve, 100));\n\n      logger.info({\n        event: 'local_dev_email_sent',\n        provider: 'local-dev',\n        from,\n        to,\n        subject: template.subject,\n        // htmlLength: template.html.length,\n        text: template.text,\n      });\n\n      return; // Success - void return\n    }, 'Failed to send mock email');\n  }\n}\n",
    "import { logger } from '@ycore/forge/logger';\nimport type { Result } from '@ycore/forge/result';\nimport { err, tryCatch } from '@ycore/forge/result';\nimport type { EmailProvider, SendEmailOptions } from '../@types/email.types';\n\n/**\n * MailChannels Email Provider\n * Implementation for MailChannels email service\n *\n * Requires DNS record for authorization:\n * Type: TXT, Name: _mailchannels, Content: \"v=mc1 auth=<AccountId>\"\n */\nexport class MailChannelsEmailProvider implements EmailProvider {\n  private readonly apiUrl = 'https://api.mailchannels.net/tx/v1/send';\n\n  async sendEmail(options: SendEmailOptions): Promise<Result<void>> {\n    const { apiKey, to, from, template } = options;\n\n    if (!from) {\n      return err('From address is required');\n    }\n\n    return tryCatch(async () => {\n      const payload = {\n        personalizations: [\n          {\n            to: [{ email: to }],\n          },\n        ],\n        from: { email: from },\n        subject: template.subject,\n        content: [\n          { type: 'text/plain', value: template.text },\n          { type: 'text/html', value: template.html },\n        ],\n      };\n\n      const response = await fetch(this.apiUrl, {\n        method: 'POST',\n        headers: {\n          'X-Api-Key': apiKey,\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        },\n        body: JSON.stringify(payload),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`MailChannels API error: ${response.status} ${errorText}`);\n      }\n\n      logger.debug({\n        event: 'email_sent_success',\n        provider: 'mailchannels',\n        to,\n        subject: template.subject,\n      });\n\n      return; // Success - void return\n    }, 'Failed to send email via MailChannels');\n  }\n}\n",
    "import { logger } from '@ycore/forge/logger';\nimport type { Result } from '@ycore/forge/result';\nimport { err, tryCatch } from '@ycore/forge/result';\nimport type { EmailProvider, SendEmailOptions } from '../@types/email.types';\n\n/**\n * Test Mock Email Provider\n * Enhanced mock provider for testing that tracks sent emails and allows failure simulation\n */\nexport class TestMockEmailProvider implements EmailProvider {\n  private static sentEmails: SendEmailOptions[] = [];\n  private static shouldFail = false;\n  private static failureReason = 'Simulated email failure';\n\n  async sendEmail(options: SendEmailOptions): Promise<Result<void>> {\n    const { to, from, template } = options;\n\n    if (!from) {\n      return err('From address is required');\n    }\n\n    // Store email for test verification (deep copy to prevent mutation)\n    TestMockEmailProvider.sentEmails.push({\n      apiKey: options.apiKey,\n      to,\n      from,\n      template: {\n        subject: template.subject,\n        html: template.html,\n        text: template.text,\n      },\n    });\n\n    // Simulate failure if configured\n    if (TestMockEmailProvider.shouldFail) {\n      return err(TestMockEmailProvider.failureReason);\n    }\n\n    return tryCatch(async () => {\n      // Faster delay for tests (10ms vs 100ms)\n      await new Promise(resolve => setTimeout(resolve, 10));\n\n      logger.debug({\n        event: 'email_test_mock_sent',\n        provider: 'test-mock',\n        from,\n        to,\n        subject: template.subject,\n        textLength: template.text.length,\n        htmlLength: template.html.length,\n      });\n\n      return; // Success - void return\n    }, 'Failed to send test mock email');\n  }\n\n  // Test utility methods\n  static getSentEmails(): SendEmailOptions[] {\n    return [...TestMockEmailProvider.sentEmails]; // Return copy to prevent mutation\n  }\n\n  static getLastSentEmail(): SendEmailOptions | undefined {\n    return TestMockEmailProvider.sentEmails.length > 0 ? { ...TestMockEmailProvider.sentEmails[TestMockEmailProvider.sentEmails.length - 1] } : undefined;\n  }\n\n  static getEmailCount(): number {\n    return TestMockEmailProvider.sentEmails.length;\n  }\n\n  static findEmailByTo(to: string): SendEmailOptions | undefined {\n    return TestMockEmailProvider.sentEmails.find(email => email.to === to);\n  }\n\n  static findEmailsBySubject(subject: string): SendEmailOptions[] {\n    return TestMockEmailProvider.sentEmails.filter(email => email.template.subject.includes(subject));\n  }\n\n  static clearSentEmails(): void {\n    TestMockEmailProvider.sentEmails = [];\n  }\n\n  static simulateFailure(reason = 'Simulated email failure'): void {\n    TestMockEmailProvider.shouldFail = true;\n    TestMockEmailProvider.failureReason = reason;\n  }\n\n  static resetToSuccess(): void {\n    TestMockEmailProvider.shouldFail = false;\n    TestMockEmailProvider.failureReason = 'Simulated email failure';\n  }\n\n  static reset(): void {\n    TestMockEmailProvider.clearSentEmails();\n    TestMockEmailProvider.resetToSuccess();\n  }\n\n  static getFailureState(): { shouldFail: boolean; reason: string } {\n    return {\n      shouldFail: TestMockEmailProvider.shouldFail,\n      reason: TestMockEmailProvider.failureReason,\n    };\n  }\n\n  // Assertion helpers for tests\n  static assertEmailSent(to: string): SendEmailOptions {\n    const email = TestMockEmailProvider.findEmailByTo(to);\n    if (!email) {\n      throw new Error(`Expected email to be sent to ${to}, but no email was found`);\n    }\n    return email;\n  }\n\n  static assertEmailCount(expectedCount: number): void {\n    const actualCount = TestMockEmailProvider.getEmailCount();\n    if (actualCount !== expectedCount) {\n      throw new Error(`Expected ${expectedCount} emails to be sent, but ${actualCount} were sent`);\n    }\n  }\n\n  static assertNoEmailsSent(): void {\n    TestMockEmailProvider.assertEmailCount(0);\n  }\n}\n",
    "import * as v from 'valibot';\n\nexport const EmailSchema = v.pipe(v.string(), v.trim(), v.toLowerCase(), v.email(), v.maxLength(254));\n\nexport type ValidEmail = v.InferOutput<typeof EmailSchema>;\n",
    "import type { EmailTemplate, TotpEmailData } from '../@types/email.types';\n\nexport type VerificationPurpose = 'signup' | 'passkey-add' | 'passkey-delete' | 'email-change' | 'account-delete' | 'recovery';\n\ninterface TotpTemplateData extends TotpEmailData {\n  purpose: VerificationPurpose;\n}\n\nconst purposeContent = {\n  signup: {\n    title: 'Verify Your Email',\n    message: 'Thank you for signing up! Please verify your email address to complete your registration.',\n    action: 'verify your email',\n  },\n  'passkey-add': {\n    title: 'Confirm Adding Passkey',\n    message: 'You are about to add a new passkey to your account. Please verify this action.',\n    action: 'confirm adding the passkey',\n  },\n  'passkey-delete': {\n    title: 'Confirm Passkey Removal',\n    message: 'You are about to remove a passkey from your account. Please verify this action.',\n    action: 'confirm removing the passkey',\n  },\n  'email-change': {\n    title: 'Verify New Email Address',\n    message: 'You requested to change your email address. Please verify your new email.',\n    action: 'verify your new email address',\n  },\n  'account-delete': {\n    title: 'Confirm Account Deletion',\n    message: 'You requested to delete your account. This action cannot be undone. Please confirm.',\n    action: 'confirm account deletion',\n  },\n  recovery: {\n    title: 'Account Recovery',\n    message: 'You requested account recovery. Use this code to regain access to your account.',\n    action: 'recover your account',\n  },\n};\n\n/**\n * Authentication TOTP Email Template\n * Email template for TOTP verification codes with purpose-specific content\n */\nexport function createTotpTemplate(data: TotpTemplateData): EmailTemplate {\n  const { code, purpose } = data;\n  const content = purposeContent[purpose];\n\n  const subject = content.title;\n\n  const html = `\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <title>${content.title}</title>\n        <style>\n          .container {\n            max-width: 600px;\n            margin: 0 auto;\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            line-height: 1.5;\n            color: #333;\n          }\n          .header {\n            text-align: center;\n            padding: 40px 20px 20px;\n          }\n          .message {\n            text-align: center;\n            padding: 0 20px 20px;\n            color: #666;\n          }\n          .code {\n            background: #f8f9fa;\n            border: 2px solid #e9ecef;\n            border-radius: 8px;\n            font-size: 32px;\n            font-weight: bold;\n            letter-spacing: 8px;\n            text-align: center;\n            padding: 20px;\n            margin: 20px;\n            color: #495057;\n          }\n          .footer {\n            text-align: center;\n            padding: 20px;\n            color: #6c757d;\n            font-size: 14px;\n          }\n          ${purpose === 'account-delete' ? '.container { background: #fff3cd; padding: 20px; border-radius: 8px; border: 2px solid #ffc107; }' : ''}\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1>${content.title}</h1>\n          </div>\n          <div class=\"message\">\n            <p>${content.message}</p>\n          </div>\n\n          <div class=\"code\">${code}</div>\n\n          <div class=\"footer\">\n            <p>This code will expire in <strong>8 minutes</strong>.</p>\n            <p>If you didn't request this code, please ignore this email${purpose === 'account-delete' || purpose === 'passkey-delete' ? ' and consider securing your account' : ''}.</p>\n          </div>\n        </div>\n      </body>\n    </html>\n  `;\n\n  const text = `\n${content.title}\n\n${content.message}\n\nYour verification code: ${code}\n\nUse this code to ${content.action}.\nThis code will expire in 8 minutes.\n\nIf you didn't request this code, please ignore this email${purpose === 'account-delete' || purpose === 'passkey-delete' ? ' and consider securing your account' : ''}.\n  `.trim();\n\n  return {\n    subject,\n    html,\n    text,\n  };\n}\n",
    "import type { EmailTemplate } from '../@types/email.types';\n\nexport interface SimpleEmailData {\n  subject: string;\n  message: string;\n}\n\n/**\n * Minimal Email Template\n */\nexport function createMinimalTemplate(data: SimpleEmailData): EmailTemplate {\n  const { subject, message } = data;\n  const html = `<p>${message}</p>`;\n  const text = `${message}`.trim();\n\n  return { subject, html, text };\n}\n",
    "import type { EmailTemplate } from '../@types/email.types';\n\nexport interface MockEmailData {\n  subject: string;\n  message: string;\n  recipientName?: string;\n}\n\n/**\n * Mock Email Template\n * Generic template for demonstration and testing purposes\n */\nexport function createMockTemplate(data: MockEmailData): EmailTemplate {\n  const { subject, message, recipientName = 'there' } = data;\n\n  const html = `\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <title>${subject}</title>\n        <style>\n          .container {\n            max-width: 600px;\n            margin: 0 auto;\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            line-height: 1.5;\n            color: #333;\n          }\n          .header {\n            text-align: center;\n            padding: 40px 20px 20px;\n            border-bottom: 1px solid #e9ecef;\n          }\n          .content {\n            padding: 30px 20px;\n          }\n          .message {\n            background: #f8f9fa;\n            border-left: 4px solid #007bff;\n            border-radius: 4px;\n            padding: 20px;\n            margin: 20px 0;\n            color: #495057;\n          }\n          .footer {\n            text-align: center;\n            padding: 20px;\n            border-top: 1px solid #e9ecef;\n            color: #6c757d;\n            font-size: 14px;\n          }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1>${subject}</h1>\n          </div>\n\n          <div class=\"content\">\n            <p>Hello ${recipientName},</p>\n            \n            <div class=\"message\">\n              ${message}\n            </div>\n            \n            <p>Thank you for testing the Foundry email system!</p>\n          </div>\n\n          <div class=\"footer\">\n            <p>This is a test email sent from the Foundry system.</p>\n            <p>If you received this email by mistake, please ignore it.</p>\n          </div>\n        </div>\n      </body>\n    </html>\n  `;\n\n  const text = `\n${subject}\n\nHello ${recipientName},\n\n${message}\n\nThank you for testing the Foundry email system!\n\n---\nThis is a test email sent from the Foundry system.\nIf you received this email by mistake, please ignore it.\n  `.trim();\n\n  return {\n    subject,\n    html,\n    text,\n  };\n}\n"
  ],
  "mappings": "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",
  "debugId": "87E782DF51EFA3E064756E2164756E21",
  "names": []
}
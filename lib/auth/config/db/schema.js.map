{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../../src/auth/config/db/schema.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,aAAa,CAAC;AAClC,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,yBAAyB,CAAC;AAE5E,MAAM,IAAI,GAAG,CAAC,IAAY,EAAE,EAAE,CAC5B,IAAI,CAAC,IAAI,CAAC;KACP,MAAM,EAAE;KACR,OAAO,EAAE;KACT,UAAU,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC;AAE3C,MAAM,CAAC,MAAM,KAAK,GAAG,WAAW,CAC9B,OAAO,EACP;IACE,EAAE,EAAE,OAAO,EAAE,CAAC,UAAU,EAAE;IAC1B,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC;IAClB,KAAK,EAAE,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE;IAChC,aAAa,EAAE,OAAO,CAAC,gBAAgB,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;SAC1D,OAAO,EAAE;SACT,OAAO,CAAC,GAAG,CAAA,OAAO,CAAC;IACtB,SAAS,EAAE,OAAO,CAAC,YAAY,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC;SACpD,OAAO,EAAE;SACT,OAAO,CAAC,GAAG,CAAA,eAAe,CAAC;CAC/B;AACD,6EAA6E;AAC7E,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CACX,CAAC;AAEF,MAAM,CAAC,MAAM,SAAS,GAAG,WAAW,CAClC,WAAW,EACX;IACE,EAAE,EAAE,OAAO,EAAE,CAAC,UAAU,EAAE;IAC1B,MAAM,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC;IACrD,QAAQ,EAAE,IAAI,EAAE,CAAC,OAAO,EAAE;IAC1B,SAAS,EAAE,OAAO,CAAC,YAAY,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC;SACpD,OAAO,EAAE;SACT,OAAO,CAAC,GAAG,CAAA,eAAe,CAAC;CAC/B,EACD,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CACxD,CAAC;AAMF,IAAI;AACJ,aAAa;AACb,oEAAoE;AACpE,OAAO;AACP,IAAI","sourcesContent":["import { sql } from 'drizzle-orm';\nimport { index, integer, sqliteTable, text } from 'drizzle-orm/sqlite-core';\n\nconst uuid = (name: string) =>\n  text(name)\n    .unique()\n    .notNull()\n    .$defaultFn(() => crypto.randomUUID());\n\nexport const users = sqliteTable(\n  'users',\n  {\n    id: integer().primaryKey(),\n    uuid: uuid('uuid'),\n    email: text().notNull().unique(),\n    emailVerified: integer('email_verified', { mode: 'boolean' })\n      .notNull()\n      .default(sql`false`),\n    createdAt: integer('created_at', { mode: 'timestamp' })\n      .notNull()\n      .default(sql`(unixepoch())`),\n  },\n  // eslint-disable-next-line no-unused-vars, @typescript-eslint/no-unused-vars\n  (_t) => [],\n);\n\nexport const passwords = sqliteTable(\n  'passwords',\n  {\n    id: integer().primaryKey(),\n    userId: integer('user_id').references(() => users.id),\n    password: text().notNull(),\n    createdAt: integer('created_at', { mode: 'timestamp' })\n      .notNull()\n      .default(sql`(unixepoch())`),\n  },\n  (t) => [index('created_idx').on(t.userId, t.createdAt)],\n);\n\nexport type User = typeof users.$inferSelect;\nexport type UserPassword = typeof passwords.$inferSelect;\nexport type ProtectedUser = Pick<User, 'id' | 'email' | 'emailVerified'>;\n\n// {\n//   return {\n//     createdIndex: index('created_idx').on(t.userId, t.createdAt),\n//   };\n// }\n"]}
{"version":3,"file":"valid-auth.js","sourceRoot":"","sources":["../../../../src/auth/utils/valid-auth.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,SAAS,CAAC;AAE7B,MAAM,QAAQ,GAAG;IACf,OAAO,EAAE;QACP,YAAY,EAAE,CAAC;QACf,OAAO,EAAE,CAAC;KACX;IACD,OAAO,EAAE;QACP,KAAK,EAAE,oCAAoC;QAC3C,QAAQ,EAAE,+BAA+B;KAC1C;CACF,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,CAAC,MAAM,CAAC;IACvC,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;IAC/I,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,EAAE,0BAA0B,QAAQ,CAAC,OAAO,CAAC,YAAY,sBAAsB,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;CAClO,CAAC,CAAC;AAGH,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,CAAC,MAAM,CAAC;IACzC,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;IAC/I,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,UAAU,EAAE,4BAA4B,CAAC,CAAC;CAC5E,CAAC,CAAC","sourcesContent":["import * as v from 'valibot';\n\nconst DEFAULTS = {\n  REQUIRE: {\n    PASSWORD_MIN: 8,\n    OTP_MIN: 6,\n  },\n  MESSAGE: {\n    EMAIL: 'Please enter a valid email address',\n    PASSWORD: 'Please enter a valid password',\n  },\n};\n\nexport const CredentialSchema = v.object({\n  email: v.pipe(v.string(DEFAULTS.MESSAGE.EMAIL), v.nonEmpty(DEFAULTS.MESSAGE.EMAIL), v.email(DEFAULTS.MESSAGE.EMAIL), v.trim(), v.toLowerCase()),\n  password: v.pipe(v.string(DEFAULTS.MESSAGE.PASSWORD), v.nonEmpty(DEFAULTS.MESSAGE.PASSWORD), v.minLength(DEFAULTS.REQUIRE.PASSWORD_MIN, `The password must have ${DEFAULTS.REQUIRE.PASSWORD_MIN} characters or more.`), v.trim()),\n});\nexport type Credentials = v.InferOutput<typeof CredentialSchema>;\n\nexport const VerificationSchema = v.object({\n  email: v.pipe(v.string(DEFAULTS.MESSAGE.EMAIL), v.nonEmpty(DEFAULTS.MESSAGE.EMAIL), v.email(DEFAULTS.MESSAGE.EMAIL), v.trim(), v.toLowerCase()),\n  code: v.pipe(v.string(), v.regex(/^\\d{6}$/u, 'OTP code format is invalid')),\n});\nexport type Verification = v.InferOutput<typeof VerificationSchema>;\n"]}
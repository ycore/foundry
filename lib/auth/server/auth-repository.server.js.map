{"version":3,"file":"auth-repository.server.js","sourceRoot":"","sources":["../../../../src/auth/server/auth-repository.server.ts"],"names":[],"mappings":"AAAA,+FAA+F;AAC/F,mDAAmD;AACnD,+IAA+I;AAE/I,iDAAiD;AACjD,uLAAuL;AACvL,iLAAiL;AAEjL,+EAA+E;AAC/E,6EAA6E;AAE7E,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,MAAM,aAAa,CAAC;AAEvC,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,wBAAwB,CAAC;AAE1D,OAAO,EAAE,eAAe,EAAE,YAAY,EAAE,MAAM,uBAAuB,CAAC;AACtE,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AAKnD,MAAM,CAAC,MAAM,cAAc,GAAG;IAC5B,YAAY,EAAE,KAAK,EAAE,OAAuB,EAAE,WAAwB,EAAE,QAAQ,GAAG,KAAK,EAAuB,EAAE;QAC/G,MAAM,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;QAEtB,6EAA6E;QAC7E,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,MAAM,cAAc,CAAC,YAAY,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;QAE9E,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YACtB,OAAO,CAAC,IAAI,SAAS,CAAC,EAAE,IAAI,EAAE,gBAAgB,EAAE,OAAO,EAAE,aAAa,WAAW,CAAC,KAAK,UAAU,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;QACnH,CAAC;QAED,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,IAAI,CAAC;gBACH,uHAAuH;gBACvH,8BAA8B;gBAC9B,CAAC,IAAI,CAAC,GAAG,MAAM,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,aAAa,EAAE,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;gBACzJ,IAAI,CAAC,IAAI,EAAE,CAAC;oBACV,OAAO,CAAC,IAAI,SAAS,CAAC,EAAE,IAAI,EAAE,uBAAuB,EAAE,OAAO,EAAE,oBAAoB,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;gBACtG,CAAC;gBACD,MAAM,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,QAAQ,EAAE,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC;gBACvF,gCAAgC;gBAChC,kCAAkC;gBAClC,QAAQ;gBACR,2KAA2K;gBAC3K,iBAAiB;gBACjB,2BAA2B;gBAC3B,2GAA2G;gBAC3G,MAAM;gBACN,mGAAmG;gBACnG,yBAAyB;gBACzB,oBAAoB;gBACpB,yBAAyB;gBACzB,mGAAmG;gBACnG,IAAI;gBACJ,2BAA2B;gBAC3B,uCAAuC;gBACvC,8JAA8J;gBAC9J,iBAAiB;gBACjB,qBAAqB;gBACrB,MAAM;gBACN,4FAA4F;gBAC5F,MAAM;gBACN,sBAAsB;gBACtB,gFAAgF;gBAChF,8JAA8J;gBAC9J,iBAAiB;gBACjB,2BAA2B;gBAC3B,qGAAqG;gBACrG,MAAM;gBACN,4GAA4G;gBAC5G,uBAAuB;gBACvB,yBAAyB;gBACzB,MAAM;YACR,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,IAAI,SAAS,CAAC,EAAE,IAAI,EAAE,uBAAuB,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;YAChG,CAAC;QACH,CAAC;QAED,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACtB,CAAC;IACD,kBAAkB,EAAE,KAAK,EAAE,OAAuB,EAAE,WAAwB,EAAE,QAAkB,EAAuB,EAAE;QACvH,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,MAAM,cAAc,CAAC,YAAY,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;QAE7J,IAAI,KAAK;YAAE,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;QAErC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACtB,CAAC;IACD,YAAY,EAAE,KAAK,EAAE,OAAuB,EAAE,KAA6B,EAAuB,EAAE;QAClG,MAAM,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;QAEtB,IAAI,CAAC;YACH,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,EAAE,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,aAAa,EAAE,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC5J,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,OAAO,CAAC,IAAI,SAAS,CAAC,EAAE,IAAI,EAAE,qBAAqB,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;YAC9F,CAAC;YACD,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACtB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,IAAI,SAAS,CAAC,EAAE,IAAI,EAAE,qBAAqB,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;QAC9F,CAAC;IACH,CAAC;IACD,SAAS,EAAE,KAAK,EAAE,OAAuB,EAAE,EAAuB,EAAuB,EAAE;QACzF,MAAM,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;QAEtB,IAAI,CAAC;YACH,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,EAAE,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,aAAa,EAAE,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtJ,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACtB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,IAAI,SAAS,CAAC,EAAE,IAAI,EAAE,qBAAqB,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;QAC9F,CAAC;IACH,CAAC;IACD,aAAa,EAAE,KAAK,EAAE,OAAuB,EAAE,WAAwB,EAAuB,EAAE;QAC9F,MAAM,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;QACtB,IAAI,UAAyE,CAAC;QAE9E,IAAI,CAAC;YACH,CAAC,UAAU,CAAC,GAAG,MAAM,EAAE;iBACpB,MAAM,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,aAAa,EAAE,KAAK,CAAC,aAAa,EAAE,QAAQ,EAAE,SAAS,CAAC,QAAQ,EAAE,CAAC;iBAC9G,IAAI,CAAC,KAAK,CAAC;iBACX,QAAQ,CAAC,SAAS,EAAE,EAAE,CAAC,KAAK,CAAC,EAAE,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;iBACnD,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;iBACzC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;iBAClC,KAAK,CAAC,CAAC,CAAC,CAAC;QACd,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,IAAI,SAAS,CAAC,EAAE,IAAI,EAAE,qBAAqB,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;QAC9F,CAAC;QAED,IAAI,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,QAAQ;YAAE,OAAO,CAAC,IAAI,SAAS,CAAC,EAAE,IAAI,EAAE,qBAAqB,EAAE,OAAO,EAAE,sDAAsD,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;QAE7K,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,EAAE,GAAG,UAAU,CAAC;QACzC,IAAI,CAAC,CAAC,MAAM,eAAe,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,EAAE,CAAC;YAC7D,OAAO,CAAC,IAAI,SAAS,CAAC,EAAE,IAAI,EAAE,qBAAqB,EAAE,OAAO,EAAE,sDAAsD,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;QACtI,CAAC;QACD,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACtB,CAAC;IACD,MAAM,EAAE,KAAK,EAAE,OAAuB,EAAE,EAAuB,EAAqD,EAAE;QACpH,MAAM,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;QAEtB,MAAM,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;QAC3D,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;QAEnG,IAAI,MAAM,CAAC,SAAS,KAAK,EAAE,EAAE,CAAC;YAC5B,OAAO,CAAC,IAAI,SAAS,CAAC,EAAE,IAAI,EAAE,uBAAuB,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;QAChG,CAAC;QAED,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACtB,CAAC;IACD,kBAAkB,EAAE,KAAK,EAAE,OAAuB,EAAE,KAA6B,EAAE,QAAiB,EAAuB,EAAE;QAC3H,MAAM,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;QAEtB,IAAI,CAAC;YACH,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE,aAAa,EAAE,QAAQ,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,aAAa,EAAE,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;YACzL,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACtB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,IAAI,SAAS,CAAC,EAAE,IAAI,EAAE,uBAAuB,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;QAChG,CAAC;IACH,CAAC;IACD,oBAAoB,EAAE,KAAK,EAAE,OAAuB,EAAE,KAA6B,EAAE,QAAgB,EAAuB,EAAE;QAC5H,MAAM,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;QAEtB,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,MAAM,cAAc,CAAC,kBAAkB,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;YACrF,IAAI,KAAK;gBAAE,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAEhC,MAAM,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAC/F,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACtB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,IAAI,SAAS,CAAC,EAAE,IAAI,EAAE,gCAAgC,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;QACzG,CAAC;IACH,CAAC;CACF,CAAC","sourcesContent":["// https://github.com/Sairyss/domain-driven-hexagon/blob/master/src/libs/ddd/repository.port.ts\n// https://github.com/Sairyss/domain-driven-hexagon\n// https://medium.com/@joaojbs199/transactions-with-ddd-and-repository-pattern-in-typescript-a-guide-to-good-implementation-part-3-3a7d7c984eca\n\n// https://blog.cloudflare.com/whats-new-with-d1/\n// D1_ERROR: To execute a transaction, please use the state.storage.transaction() or state.storage.transactionSync() APIs instead of the SQL BEGIN TRANSACTION or SAVEPOINT statements.\n// The JavaScript API is safer because it will automatically roll back on exceptions, and because it interacts correctly with Durable Objects' automatic atomic write coalescing.\n\n// https://everythingcs.dev/blog/cloudflare-d1-workers-rest-api-crud-operation/\n// https://developers.cloudflare.com/d1/tutorials/import-to-d1-with-rest-api/\n\nimport { desc, eq } from 'drizzle-orm';\nimport type { AppLoadContext } from 'react-router';\nimport { passwords, users } from '../config/db/schema.js';\nimport type { ProtectedUser, UserPassword } from '../config/db/schema.js';\nimport { comparePassword, hashPassword } from '../utils/auth-hash.js';\nimport { AuthError } from '../utils/error-auth.js';\nimport type { Credentials } from '../utils/valid-auth.js';\n\ntype Error_ProtectedUser = Promise<[AuthError, undefined] | [null, ProtectedUser]>;\n\nexport const authRepository = {\n  findOrCreate: async (context: AppLoadContext, credentials: Credentials, canExist = false): Error_ProtectedUser => {\n    const db = context.db;\n\n    // eslint-disable-next-line no-unused-vars, @typescript-eslint/no-unused-vars\n    let [_, user] = await authRepository.findOneEmail(context, credentials.email);\n\n    if (user && !canExist) {\n      return [new AuthError({ kind: 'DB USER EXISTS', message: `User with ${credentials.email} exists.` }), undefined];\n    }\n\n    if (!user) {\n      try {\n        // on initial create, users.emailVerified determines verification status, password.verified is therefore initially true\n        // **** NON-transaction create\n        [user] = await db.insert(users).values({ email: credentials.email }).returning({ id: users.id, email: users.email, emailVerified: users.emailVerified });\n        if (!user) {\n          return [new AuthError({ kind: 'DB USER CREATE FAILED', message: 'User create failed' }), undefined];\n        }\n        await db.insert(passwords).values({ userId: user.id, password: credentials.password });\n        // **** Transaction class create\n        // const tx = new Transaction(db);\n        // try {\n        //   const [user] = await tx.client.insert(users).values({ email: credentials.email }).returning({ id: users.id, email: users.email, emailVerified: users.emailVerified });\n        //   if (!user) {\n        //     await tx.rollback();\n        //     return [new AuthError({ kind: 'DB USER CREATE FAILED', message: 'User create failed' }), undefined];\n        //   }\n        //   await tx.client.insert(passwords).values({ userId: user.id, password: credentials.password });\n        //   return [null, user];\n        // } catch (error) {\n        //   await tx.rollback();\n        //   return [new AuthError({ kind: 'DB USER CREATE FAILED', message: error?.message }), undefined];\n        // }\n        // **** Drizzle Transaction\n        // await db.transaction(async (tx) => {\n        //   [user] = await tx.insert(users).values({ email: credentials.email }).returning({ id: users.id, email: users.email, emailVerified: users.emailVerified });\n        //   if (!user) {\n        //     tx.rollback();\n        //   }\n        //   await tx.insert(passwords).values({ userId: user.id, password: credentials.password });\n        // });\n        // **** D1 Transaction\n        // [error, user] = await contextEnv(context).MAIN_D1.transaction(async (tx) => {\n        //   [user] = await db.insert(users).values({ email: credentials.email }).returning({ id: users.id, email: users.email, emailVerified: users.emailVerified });\n        //   if (!user) {\n        //     await tx.rollback();\n        //     return [new AuthError({ kind: 'DB USER CREATE FAILED', message: error?.message }), undefined];\n        //   }\n        //   await db.insert(passwords).values({ userId: user.id, password: credentials.password, verified: true });\n        //   await tx.commit();\n        //   return [null, user];\n        // });\n      } catch (error) {\n        return [new AuthError({ kind: 'DB USER CREATE FAILED', message: error?.message }), undefined];\n      }\n    }\n\n    return [null, user];\n  },\n  findOrCreateHashed: async (context: AppLoadContext, credentials: Credentials, canExist?: boolean): Error_ProtectedUser => {\n    const [error, user] = await authRepository.findOrCreate(context, { email: credentials.email, password: await hashPassword(credentials.password) }, canExist);\n\n    if (error) return [error, undefined];\n\n    return [null, user];\n  },\n  findOneEmail: async (context: AppLoadContext, email: ProtectedUser['email']): Error_ProtectedUser => {\n    const db = context.db;\n\n    try {\n      const [user] = await db.select({ id: users.id, email: users.email, emailVerified: users.emailVerified }).from(users).where(eq(users.email, email)).limit(1);\n      if (!user) {\n        return [new AuthError({ kind: 'DB USER FIND FAILED', message: error?.message }), undefined];\n      }\n      return [null, user];\n    } catch (error) {\n      return [new AuthError({ kind: 'DB USER FIND FAILED', message: error?.message }), undefined];\n    }\n  },\n  findOneId: async (context: AppLoadContext, id: ProtectedUser['id']): Error_ProtectedUser => {\n    const db = context.db;\n\n    try {\n      const [user] = await db.select({ id: users.id, email: users.email, emailVerified: users.emailVerified }).from(users).where(eq(users.id, id)).limit(1);\n      return [null, user];\n    } catch (error) {\n      return [new AuthError({ kind: 'DB USER FIND FAILED', message: error?.message }), undefined];\n    }\n  },\n  findOneHashed: async (context: AppLoadContext, credentials: Credentials): Error_ProtectedUser => {\n    const db = context.db;\n    let vulnerable: ProtectedUser & { password: UserPassword['password'] | null };\n\n    try {\n      [vulnerable] = await db\n        .select({ id: users.id, email: users.email, emailVerified: users.emailVerified, password: passwords.password })\n        .from(users)\n        .leftJoin(passwords, eq(users.id, passwords.userId))\n        .where(eq(users.email, credentials.email))\n        .orderBy(desc(passwords.createdAt))\n        .limit(1);\n    } catch (error) {\n      return [new AuthError({ kind: 'DB USER FIND FAILED', message: error?.message }), undefined];\n    }\n\n    if (!vulnerable || !vulnerable.password) return [new AuthError({ kind: 'DB USER FIND FAILED', message: `The provided credentials don't match an active user.` }), undefined];\n\n    const { password, ...user } = vulnerable;\n    if (!(await comparePassword(credentials.password, password))) {\n      return [new AuthError({ kind: 'DB USER CREDENTIALS', message: `The provided credentials don't match an active user.` }), undefined];\n    }\n    return [null, user];\n  },\n  delete: async (context: AppLoadContext, id: ProtectedUser['id']): Promise<[AuthError, undefined] | [null, boolean]> => {\n    const db = context.db;\n\n    await db.delete(passwords).where(eq(passwords.userId, id));\n    const [result] = await db.delete(users).where(eq(users.id, id)).returning({ deletedId: users.id });\n\n    if (result.deletedId !== id) {\n      return [new AuthError({ kind: 'DB USER DELETE FAILED', message: error?.message }), undefined];\n    }\n\n    return [null, true];\n  },\n  updateUserVerified: async (context: AppLoadContext, email: ProtectedUser['email'], verified: boolean): Error_ProtectedUser => {\n    const db = context.db;\n\n    try {\n      const [user] = await db.update(users).set({ emailVerified: verified }).where(eq(users.email, email)).returning({ id: users.id, email: users.email, emailVerified: users.emailVerified });\n      return [null, user];\n    } catch (error) {\n      return [new AuthError({ kind: 'DB USER UPDATE FAILED', message: error?.message }), undefined];\n    }\n  },\n  updateStoredPassword: async (context: AppLoadContext, email: ProtectedUser['email'], password: string): Error_ProtectedUser => {\n    const db = context.db;\n\n    try {\n      const [error, user] = await authRepository.updateUserVerified(context, email, false);\n      if (error) return [error, user];\n\n      await db.insert(passwords).values({ userId: user.id, password: await hashPassword(password) });\n      return [null, user];\n    } catch (error) {\n      return [new AuthError({ kind: 'DB USER PASSWORD UPDATE FAILED', message: error?.message }), undefined];\n    }\n  },\n};\n"]}
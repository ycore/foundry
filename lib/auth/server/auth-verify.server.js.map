{"version":3,"file":"auth-verify.server.js","sourceRoot":"","sources":["../../../../src/auth/server/auth-verify.server.ts"],"names":[],"mappings":"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","sourcesContent":["import type { KVNamespace } from '@cloudflare/workers-types';\nimport { generateTOTP, verifyTOTP } from '@oslojs/otp';\nimport { CompactEncrypt, compactDecrypt } from 'jose';\nimport type { AppLoadContext } from 'react-router';\n\nimport { contextEnv, isDev } from '../../common/services/env.js';\nimport { base64Encode, random64, toJweKey } from '../../common/utils/crypto.js';\nimport { AUTH_ERRORS, AuthError } from '../utils/error-auth.js';\n\n// Types\nexport interface TOTPConfig {\n  secret?: string;\n  kv?: KVNamespace;\n  digits?: number;\n  period?: number;\n  maxAttempts?: number;\n}\nexport type TOTPConfigReq = Required<TOTPConfig>;\n\ninterface TOTPData {\n  secret: string;\n  expireAt: number;\n}\n\ninterface StoredVerification {\n  jwe: string;\n  attempts: number;\n  passwordHash?: string;\n}\n\nexport type VerifyActions = 'validate' | 'resend' | 'forgot';\nexport interface VerifyLinkOptions {\n  action: VerifyActions;\n  code: string;\n  email: string;\n}\n\nconst KVVerifyTemplate = (email: string) => `totp:${email}`;\n\nexport const assignConfig = async (context: AppLoadContext, config?: TOTPConfig) => {\n  const authConfig = await context.di.authConfig();\n\n  const options: TOTPConfigReq = {\n    secret: config?.secret ?? contextEnv(context).TOTP_SECRET_KEY,\n    kv: config?.kv ?? contextEnv(context).ADMIN_KV,\n    digits: config?.digits ?? authConfig.totp.digits,\n    period: config?.period ?? authConfig.totp.period,\n    maxAttempts: config?.maxAttempts ?? authConfig.totp.maxAttempts,\n  };\n\n  if (!options?.secret || !options?.kv) {\n    throw new Error(AUTH_ERRORS.TOTP_SECRET);\n  }\n\n  return options;\n};\n\nexport const authTOTP = {\n  create: async (email: string, context: AppLoadContext, options?: TOTPConfigReq): Promise<string> => {\n    const config = await assignConfig(context, options);\n    const randomKey = random64();\n    const jweKey = await toJweKey(randomKey);\n    const code = generateTOTP(jweKey, config.period, config.digits);\n\n    // Create and encrypt TOTP data\n    const totpData: TOTPData = { secret: randomKey, expireAt: Date.now() + config.period * 1000 };\n    const jwe = await jwEncrypt<TOTPData>(totpData, config.secret);\n    const verificationData: StoredVerification = { jwe, attempts: 0 };\n\n    await config.kv.put(KVVerifyTemplate(email), JSON.stringify(verificationData), { expirationTtl: config.period });\n\n    if (isDev(context)) {\n      console.info(`[DEV] Verification TOTP Code for ${email}: ${code}`);\n    }\n\n    return code;\n  },\n  verify: async (email: string, code: string, context: AppLoadContext, options?: TOTPConfigReq): Promise<[AuthError, undefined] | [null, boolean]> => {\n    const config = await assignConfig(context, options);\n    const kvKey = KVVerifyTemplate(email);\n    const storedData = await config.kv.get(kvKey);\n\n    if (!storedData) {\n      return [new AuthError({ kind: 'TOTP EXPIRED', message: AUTH_ERRORS.TOTP_EXPIRED }), undefined];\n    }\n\n    const verification: StoredVerification = JSON.parse(storedData);\n\n    if (verification.attempts >= config.maxAttempts) {\n      await config.kv.delete(kvKey);\n      return [new AuthError({ kind: 'TOTP ATTEMPTS', message: AUTH_ERRORS.TOTP_ATTEMPTS }), undefined];\n    }\n\n    const totpData = await jwDecrypt<TOTPData>(verification.jwe, config.secret);\n\n    if (Date.now() > totpData.expireAt) {\n      await config.kv.delete(kvKey);\n      return [new AuthError({ kind: 'TOTP EXPIRED', message: AUTH_ERRORS.TOTP_EXPIRED }), undefined];\n    }\n\n    const key = await toJweKey(totpData.secret);\n    const isValidCode = verifyTOTP(key, config.period, config.digits, code);\n\n    if (!isValidCode) {\n      await config.kv.put(kvKey, JSON.stringify({ ...verification, attempts: verification.attempts + 1 }), { expirationTtl: config.period });\n      return [new AuthError({ kind: 'TOTP INVALID', message: AUTH_ERRORS.TOTP_INVALID }), undefined];\n    }\n\n    await config.kv.delete(kvKey);\n\n    return [null, true];\n  },\n  link: async (linkPath: string, linkRef: VerifyLinkOptions, context: AppLoadContext, request: Request) => {\n    const url = new URL(linkPath ?? '/', new URL(request.url).origin);\n    const token = base64Encode(JSON.stringify(linkRef));\n\n    url.pathname = [url.pathname.replace(/\\/$/, ''), token].join('/');\n\n    if (isDev(context)) {\n      console.info(`[DEV] verify link: ${url.toString()}`);\n    }\n\n    return url.toString();\n  },\n};\n\nconst jwEncrypt = async <T extends object>(data: T, secret: string): Promise<string> => {\n  const key = await toJweKey(secret);\n  return await new CompactEncrypt(new TextEncoder().encode(JSON.stringify(data))).setProtectedHeader({ alg: 'dir', enc: 'A256GCM' }).encrypt(key);\n};\n\nconst jwDecrypt = async <T extends object>(jwe: string, secret: string): Promise<T> => {\n  const key = await toJweKey(secret);\n  const { plaintext } = await compactDecrypt(jwe, key);\n\n  return JSON.parse(new TextDecoder().decode(plaintext));\n};\n"]}
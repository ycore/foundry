{"version":3,"file":"go-safe.js","sourceRoot":"","sources":["../../../../src/common/utils/go-safe.ts"],"names":[],"mappings":"AAAA,gGAAgG;AAChG,6DAA6D;AAC7D,wCAAwC;AAExC,MAAM,iBAAiB,GAAG,CAAC,SAAS,EAAE,UAAU,EAAE,cAAc,EAAE,WAAW,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;AAQpG,iBAAiB;AACjB,MAAM,UAAU,EAAE,CAAI,aAAqC,EAAE,cAAuB,KAAK;IACvF,OAAO,aAAa,YAAY,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;AACrH,CAAC;AAED,KAAK,UAAU,OAAO,CAAI,OAAmB,EAAE,WAAoB;IACjE,IAAI,CAAC;QACH,OAAO,CAAC,MAAM,OAAO,EAAE,IAAI,CAAC,CAAC;IAC/B,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,OAAO,eAAe,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;IACzC,CAAC;AACH,CAAC;AAED,SAAS,MAAM,CAAI,IAAa,EAAE,WAAoB;IACpD,IAAI,CAAC;QACH,uBAAuB;QACvB,MAAM,MAAM,GAAG,IAAI,EAAE,CAAC;QACtB,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACxB,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,OAAO,eAAe,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;IACzC,CAAC;AACH,CAAC;AAED,SAAS,eAAe,CAAC,CAAU,EAAE,WAAoB;IACvD,IAAI,WAAW,IAAI,iBAAiB,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,YAAY,SAAS,CAAC,EAAE,CAAC;QACjF,MAAM,CAAC,CAAC;IACV,CAAC;IACD,OAAO,CAAC,SAAS,EAAE,CAAU,CAAC,CAAC;AACjC,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAgCE","sourcesContent":["// https://betterprogramming.pub/typescript-with-go-rust-errors-no-try-catch-heresy-da0e43ce5f78\n// https://github.com/mpiorowski/rusve/server/src/lib/safe.js\n// https://github.com/scopsy/await-to-js\n\nconst NATIVE_EXCEPTIONS = [EvalError, RangeError, ReferenceError, SyntaxError, TypeError, URIError];\n\nexport type SafeResponse<D, E = Error> = [undefined, E] | [D, null];\n// Overloads\n// eslint-disable-next-line no-unused-vars\nexport function go<D>(promise: Promise<D>, throwNative?: boolean): Promise<SafeResponse<D>>;\n// eslint-disable-next-line no-unused-vars\nexport function go<D>(fn: () => D, throwNative?: boolean): SafeResponse<D>;\n// Implementation\nexport function go<D>(promiseOrFunc: Promise<D> | (() => D), throwNative: boolean = false): Promise<SafeResponse<D>> | SafeResponse<D> {\n  return promiseOrFunc instanceof Promise ? goAsync(promiseOrFunc, throwNative) : goSync(promiseOrFunc, throwNative);\n}\n\nasync function goAsync<D>(promise: Promise<D>, throwNative: boolean): Promise<SafeResponse<D>> {\n  try {\n    return [await promise, null];\n  } catch (e) {\n    return returnException(e, throwNative);\n  }\n}\n\nfunction goSync<D>(func: () => D, throwNative: boolean): SafeResponse<D> {\n  try {\n    // return [fn(), null];\n    const result = func();\n    return [result, null];\n  } catch (e) {\n    return returnException(e, throwNative);\n  }\n}\n\nfunction returnException(e: unknown, throwNative: boolean): [undefined, Error] {\n  if (throwNative && NATIVE_EXCEPTIONS.some((Exception) => e instanceof Exception)) {\n    throw e;\n  }\n  return [undefined, e as Error];\n}\n\n/*\nconst NATIVE_EXCEPTIONS = [EvalError, RangeError, ReferenceError, SyntaxError, TypeError, URIError];\n\nexport type SafeResponse<D, E = Error> = [undefined, E] | [D, null];\nexport function go<D>(promise: Promise<D>): Promise<SafeResponse<D>>;\nexport function go<D>(fn: () => D): SafeResponse<D>;\nexport function go<D>(promiseOrFunc: Promise<D> | (() => D)): Promise<SafeResponse<D>> | SafeResponse<D> {\n  return promiseOrFunc instanceof Promise ? goAsync(promiseOrFunc) : goSync(promiseOrFunc);\n}\n\nasync function goAsync<D>(promise: Promise<D>): Promise<SafeResponse<D>> {\n  try {\n    return [await promise, null];\n  } catch (e) {\n    return returnException(e);\n  }\n}\n\nfunction goSync<D>(fn: () => D): SafeResponse<D> {\n  try {\n    return [fn(), null];\n  } catch (e) {\n    return returnException(e);\n  }\n}\n\nfunction returnException(e: unknown): [undefined, Error] {\n  if (NATIVE_EXCEPTIONS.some((Exception) => e instanceof Exception)) {\n    throw e;\n  }\n  return [undefined, e as Error];\n}\n*/\n"]}
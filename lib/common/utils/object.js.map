{"version":3,"file":"object.js","sourceRoot":"","sources":["../../../../src/common/utils/object.ts"],"names":[],"mappings":"AAMA,MAAM,UAAU,SAAS,CAAmB,QAAW,EAAE,SAA0B;IACjF,IAAI,CAAC,SAAS;QAAE,OAAO,EAAE,GAAG,QAAQ,EAAE,CAAC;IACvC,8CAA8C;IAC9C,MAAM,MAAM,GAAG,EAAE,GAAG,QAAQ,EAAyB,CAAC;IACtD,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC;QACrD,IAAI,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;YAChE,MAAM,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,KAAK,CAAC,CAAC;QACpD,CAAC;aAAM,CAAC;YACN,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC;QACrC,CAAC;IACH,CAAC;IAED,OAAO,MAAW,CAAC;AACrB,CAAC","sourcesContent":["export type DeepPartial<T> = T extends object ? { [P in keyof T]?: DeepPartial<T[P]> } : T;\n\nexport type FlexiblePartial<T> = { [K in keyof T]?: T[K] extends object ? FlexiblePartial<T[K]> : T[K] } & {\n  [key: string]: unknown;\n};\n\nexport function deepMerge<T extends object>(defaults: T, overrides?: DeepPartial<T>): T {\n  if (!overrides) return { ...defaults };\n  // biome-ignore lint/suspicious/noExplicitAny:\n  const result = { ...defaults } as Record<string, any>;\n  for (const [key, value] of Object.entries(overrides)) {\n    if (value && typeof value === 'object' && !Array.isArray(value)) {\n      result[key] = deepMerge(result[key] || {}, value);\n    } else {\n      result[key] = value ?? result[key];\n    }\n  }\n\n  return result as T;\n}\n"]}
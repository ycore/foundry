{"version":3,"file":"crypto.js","sourceRoot":"","sources":["../../../../src/common/utils/crypto.ts"],"names":[],"mappings":"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","sourcesContent":["import { base64url } from 'jose';\n\n/**\n * Generates a random 32-bit unsigned integer.\n * @returns {Promise<number>} A promise that resolves to a random 32-bit unsigned integer.\n */\nexport const random32 = async (): Promise<number> => {\n  return new Uint32Array(crypto.getRandomValues(new Uint8Array(4)).buffer)[0];\n};\n\n/**\n * Generates a random 64-character base64url encoded string.\n * @returns {string} A random 64-character base64url encoded string.\n */\nexport const random64 = (): string => {\n  return base64url.encode(crypto.getRandomValues(new Uint8Array(20)));\n};\n\n/**\n * Converts a secret string into a JWE key using SHA-256 hashing.\n * @param {string} secret - The secret string to be hashed.\n * @returns {Promise<Uint8Array>} A promise that resolves to a Uint8Array representing the JWE key.\n */\nexport const toJweKey = async (secret: string): Promise<Uint8Array> => {\n  const hash = await crypto.subtle.digest('SHA-256', new TextEncoder().encode(secret));\n\n  return new Uint8Array(hash);\n};\n\n/**\n * Shuffles an array of strings using a Fisher-Yates algorithm.\n * @param {string[]} arr - The array of strings to shuffle.\n * @returns {string[]} A new array containing the shuffled strings.\n */\nexport const shuffle = (arr: string[]): string[] => {\n  return arr\n    .map((a): [number, string] => [Math.random(), a])\n    .sort((a, b) => a[0] - b[0])\n    .map(a => a[1]);\n};\n\n/**\n * Generates a random salt of specified length.\n * @param {number} [length=16] - The length of the salt to generate. Defaults to 16.\n * @returns {Promise<string>} A promise that resolves to a hexadecimal string representing the random salt.\n */\nexport async function generateRandomSalt(length = 16): Promise<string> {\n  const randomBytes = crypto.getRandomValues(new Uint8Array(length));\n\n  return toHex(Array.from(randomBytes));\n}\n\n/**\n * Compares two strings in a timing-safe manner to prevent timing attacks.\n * @param {string} a - The first string to compare.\n * @param {string} b - The second string to compare.\n * @returns {boolean} True if the strings are equal, false otherwise.\n */\nexport function timingSafeCompare(a: string, b: string): boolean {\n  if (a.length !== b.length) return false;\n\n  // constant-time compare each character\n  let mismatch = 0;\n  for (let i = 0; i < a.length; i++) {\n    mismatch |= a.charCodeAt(i) ^ b.charCodeAt(i);\n  }\n\n  return mismatch === 0;\n}\n\n/**\n * Converts a buffer of numbers to a hexadecimal string.\n * @param {number[]} valueBuffer - An array of numbers representing the byte values.\n * @returns {string} A hexadecimal string representation of the input buffer.\n */\nexport const toHex = (valueBuffer: number[]): string => valueBuffer.map(byte => byte.toString(16).padStart(2, '0')).join('');\n\n/**\n * Encodes data into a base64url string.\n * @param {Uint8Array | string} data - The data to encode. Can be either a Uint8Array or a string.\n * @returns {string} The base64url encoded string.\n */\nexport const base64Encode = (data: Uint8Array | string) => base64url.encode(data);\n\n/**\n * Decodes a base64url string into a decoded string.\n * @param {Uint8Array | string} data - The base64url encoded data to decode.\n * @returns {string} The decoded string.\n */\nexport const base64Decode = (data: Uint8Array | string) => {\n  const decoder = new TextDecoder();\n  return decoder.decode(base64url.decode(data));\n};\n"]}
{"version":3,"file":"env.js","sourceRoot":"","sources":["../../../../src/common/services/env.ts"],"names":[],"mappings":"AAEA,MAAM,UAAU,mBAAmB,CAAC,OAAuB;IACzD,MAAM,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC;IACnC,MAAM,WAAW,GAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAsB,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,SAAS,IAAI,GAAG,CAAC,GAAG,CAAC,KAAK,IAAI,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC;IAE1I,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QAC3B,MAAM,YAAY,GAAG,kCAAkC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;QAEhF,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC;YACnB,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YAC5B,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;QAChC,CAAC;QACD,MAAM,IAAI,KAAK,CAAC,+EAA+E,CAAC,CAAC;IACnG,CAAC;AACH,CAAC;AAED,MAAM,UAAU,UAAU,CAAC,OAAuB;IAChD,MAAM,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC;IAEnC,OAAO,IAAI,KAAK,CAAC,GAAG,EAAE;QACpB,GAAG,CAAC,MAAM,EAAE,GAAc;YACxB,IAAI,CAAC,CAAC,GAAG,IAAI,MAAM,CAAC,EAAE,CAAC;gBACrB,MAAM,IAAI,KAAK,CAAC,yBAAyB,GAAG,mBAAmB,CAAC,CAAC;YACnE,CAAC;YACD,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;YAC1B,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC/E,MAAM,IAAI,KAAK,CAAC,yBAAyB,GAAG,0BAA0B,CAAC,CAAC;YAC1E,CAAC;YACD,OAAO,KAAK,CAAC;QACf,CAAC;KACF,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,MAAM,KAAK,GAAG,CAAC,OAAuB,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,WAAW,KAAK,aAAa,CAAC;AACpG,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,OAAuB,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,WAAW,KAAK,YAAY,CAAC;AAC1G,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,OAAuB,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,WAAW,KAAK,SAAS,CAAC;AAEpG,oFAAoF;AACpF,0EAA0E","sourcesContent":["import type { AppLoadContext } from 'react-router';\n\nexport function validateEnvironment(context: AppLoadContext) {\n  const env = context.cloudflare.env;\n  const missingKeys = (Object.keys(env) as Array<keyof Env>).filter(key => env[key] === undefined || env[key] === null || key.length === 0);\n\n  if (missingKeys.length > 0) {\n    const errorMessage = `Missing environment variables: ${missingKeys.join(', ')}`;\n\n    if (isDev(context)) {\n      console.error(errorMessage);\n      throw new Error(errorMessage);\n    }\n    throw new Error('Some environment settings are not defined. Please check the logs for details.');\n  }\n}\n\nexport function contextEnv(context: AppLoadContext): Env {\n  const env = context.cloudflare.env;\n\n  return new Proxy(env, {\n    get(target, key: keyof Env) {\n      if (!(key in target)) {\n        throw new Error(`Environment variable \"${key}\" is not defined.`);\n      }\n      const value = target[key];\n      if (value === undefined || value === null || String(value).trim().length === 0) {\n        throw new Error(`Environment variable \"${key}\" is missing or invalid.`);\n      }\n      return value;\n    },\n  });\n}\n\nexport const isDev = (context: AppLoadContext) => contextEnv(context).ENVIRONMENT === 'development';\nexport const isProduction = (context: AppLoadContext) => contextEnv(context).ENVIRONMENT === 'production';\nexport const isTesting = (context: AppLoadContext) => contextEnv(context).ENVIRONMENT === 'testing';\n\n/// <reference path=\"../../../../../@config/cloudflare/worker-configuration.d.ts\" />\n/// <reference path=\"../../../../../@config/cloudflare/load-context.ts\" />\n"]}
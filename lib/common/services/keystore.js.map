{"version":3,"file":"keystore.js","sourceRoot":"","sources":["../../../../src/common/services/keystore.ts"],"names":[],"mappings":"AACA,OAAO,EAAmB,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,8BAA8B,CAAC;AAarF,MAAM,GAAG,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;AAErC,MAAM,cAAc,GAAG,CAAC,KAAkB,EAAwB,EAAE;IAClE,OAAO,KAAK,IAAI,OAAO,KAAK,CAAC,GAAG,KAAK,UAAU,IAAI,OAAO,KAAK,CAAC,GAAG,KAAK,UAAU,IAAI,OAAO,KAAK,CAAC,MAAM,KAAK,UAAU,IAAI,OAAO,KAAK,CAAC,IAAI,KAAK,UAAU,CAAC;AAC/J,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,OAAO,GAAY;IAC9B,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE;QAC7B,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC;YAC3B,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO,MAAM,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACnC,CAAC;IACD,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;QACzC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC;YAC3B,OAAO,IAAI,CAAC;QACd,CAAC;QACD,IAAI,MAAM,EAAE,CAAC;YACX,8CAA8C;YAC9C,MAAM,cAAc,GAAG,MAAM,GAAG,CAAC,IAAI,CAAC,OAAc,EAAE,MAAM,CAAC,CAAC;YAC9D,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;YACrC,OAAO,cAAc,CAAC;QACxB,CAAC;QAED,wCAAwC;QACxC,MAAM,YAAY,GAAG,OAAO,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAErF,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;QACnC,OAAO,OAAO,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,YAAY,CAAC;IAC9D,CAAC;IACD,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE;QAChC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC;YAC3B,OAAO,IAAI,CAAC;QACd,CAAC;QACD,IAAI,MAAM,EAAE,CAAC;YACX,MAAM,aAAa,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC3C,IAAI,CAAC,aAAa;gBAAE,OAAO,IAAI,CAAC;YAEhC,MAAM,cAAc,GAAG,MAAM,MAAM,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;YAC3D,OAAO,cAAc,CAAC;QACxB,CAAC;QACD,MAAM,OAAO,GAAG,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC;QAC/C,OAAO,OAAO,CAAC;IACjB,CAAC;IACD,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;QAC3B,IAAI,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC1B,CAAC;IACH,CAAC;CACF,CAAC","sourcesContent":["import type { KVNamespace, KVNamespaceListOptions } from '@cloudflare/workers-types';\nimport { type JwtPayload, decode, sign, verify } from '@tsndr/cloudflare-worker-jwt';\n\ninterface KvStore {\n  // eslint-disable-next-line no-unused-vars\n  delete: (store: KVNamespace, key: string) => Promise<void>;\n  // eslint-disable-next-line no-unused-vars\n  get: (store: KVNamespace, key: string, secret?: string) => Promise<unknown>;\n  // eslint-disable-next-line no-unused-vars\n  list: (store: KVNamespace, options?: KVNamespaceListOptions) => Promise<unknown>;\n  // eslint-disable-next-line no-unused-vars\n  put: (store: KVNamespace, key: string, payload: JwtPayload<KVNamespace> | string, secret?: string) => Promise<string | null>;\n}\n\nconst jwt = { decode, sign, verify };\n\nconst isValidKVStore = (store: KVNamespace): store is KVNamespace => {\n  return store && typeof store.get === 'function' && typeof store.put === 'function' && typeof store.delete === 'function' && typeof store.list === 'function';\n};\n\nexport const kvStore: KvStore = {\n  list: async (store, options) => {\n    if (!isValidKVStore(store)) {\n      return null;\n    }\n    return await store.list(options);\n  },\n  put: async (store, key, payload, secret) => {\n    if (!isValidKVStore(store)) {\n      return null;\n    }\n    if (secret) {\n      // biome-ignore lint/suspicious/noExplicitAny:\n      const encodedPayload = await jwt.sign(payload as any, secret);\n      await store.put(key, encodedPayload);\n      return encodedPayload;\n    }\n\n    // Check the type and handle accordingly\n    const valueToStore = typeof payload === 'string' ? payload : JSON.stringify(payload);\n\n    await store.put(key, valueToStore);\n    return typeof payload === 'string' ? payload : valueToStore;\n  },\n  get: async (store, key, secret) => {\n    if (!isValidKVStore(store)) {\n      return null;\n    }\n    if (secret) {\n      const tokenToVerify = await store.get(key);\n      if (!tokenToVerify) return null;\n\n      const decodedPayload = await verify(tokenToVerify, secret);\n      return decodedPayload;\n    }\n    const payload = (await store.get(key)) || null;\n    return payload;\n  },\n  delete: async (store, key) => {\n    if (isValidKVStore(store)) {\n      await store.delete(key);\n    }\n  },\n};\n"]}
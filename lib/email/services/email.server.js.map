{"version":3,"file":"email.server.js","sourceRoot":"","sources":["../../../../src/email/services/email.server.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Source: https://github.com/epicweb-dev/epic-stack\n * Source code adapted for this template.\n */\n\nimport type { AppLoadContext } from 'react-router';\nimport { type InferOutput, array, object, optional, string, union } from 'valibot';\nimport { parse } from 'valibot';\n\nimport { contextEnv } from '../../common/services/env.js';\nimport { safeParse } from '../../form/validate.js';\n\nconst EmailMessageSchema = object({\n  subject: string(),\n  html: string(),\n  text: optional(string()),\n});\n\nconst EmailOptionsSchema = object({\n  from: string(),\n  to: union([string(), array(string())]),\n  apikey: string(),\n});\n\ntype EmailMessage = InferOutput<typeof EmailMessageSchema>;\ntype EmailOptions = InferOutput<typeof EmailOptionsSchema>;\n\ntype EmailBody = Omit<EmailOptions, 'apikey'> & EmailMessage;\n\nexport const sendMail = {\n  mailersend: async ({ message, options }: { message: EmailMessage; options: EmailOptions }) => {\n    const API_URL = 'https://api.mailersend.com/v1/email';\n\n    const emailBody: Omit<EmailBody, 'from' | 'to'> & { from: { email: string }; to: [{ email: string | string[] }] } = {\n      from: { email: options.from },\n      to: [{ email: options.to }],\n      subject: message.subject,\n      html: message.html || '',\n      text: message.text || '',\n    };\n\n    const response = await fetch(API_URL, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${options.apikey}`,\n        'Content-Type': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest',\n      },\n      body: JSON.stringify(emailBody),\n    });\n\n    const rawResponse = await response.text();\n    const data = rawResponse ? JSON.parse(rawResponse) : null;\n\n    if (!response.ok) {\n      console.error('Error Data:', data || rawResponse);\n      throw new Error('Unable to send email.');\n    }\n\n    return { status: 'success', data } as const;\n  },\n  resend: async ({ message, options }: { message: EmailMessage; options: Omit<EmailOptions, 'to' & { to: string }> }) => {\n    const API_URL = 'https://api.resend.com/emails';\n\n    const ResendOptionsSchema = object({\n      ...EmailOptionsSchema.entries,\n      to: string(),\n    });\n\n    const validatedMessage = safeParse(EmailMessageSchema, message);\n    const validatedOptions = safeParse(ResendOptionsSchema, options);\n\n    if (!validatedMessage.success) {\n      console.error(validatedMessage.errors);\n      return;\n    }\n    if (!validatedOptions.success) {\n      console.error(validatedOptions.errors);\n      return;\n    }\n\n    const emailBody: EmailBody = {\n      from: validatedOptions.data.from,\n      to: validatedOptions.data.to,\n      subject: validatedMessage.data.subject,\n      html: validatedMessage.data.html || '',\n      text: validatedMessage.data.text || '',\n    };\n\n    const response = await fetch(API_URL, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${validatedOptions.data.apikey}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(emailBody),\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      console.error('Error Data:', data);\n      throw new Error('Unable to send email.');\n    }\n\n    return { status: 'success', data } as const;\n  },\n  // https://github.com/sendgrid/sendgrid-nodejs\n  // sendgrid: async ({ message, options }: { message: EmailMessage; options: EmailOptions }) => {\n  //   sgMail.setApiKey(options.apikey);\n  //   const emailBody: EmailBody = {\n  //     from: options.from,\n  //     to: options.to,\n  //     subject: message.subject,\n  //     text: message.text,\n  //     html: message.html,\n  //   };\n  //   sgMail\n  //     .send(emailBody)\n  //     .then(() => {\n  //       console.log('Email sent');\n  //     })\n  //     .catch((error) => {\n  //       console.error(error);\n  //     });\n  // },\n\n  sendgridapi: async ({ message, options }: { message: EmailMessage; options: EmailOptions }) => {\n    const API_URL = 'https://api.sendgrid.com';\n\n    const emailBody = {\n      personalizations: [{ to: [{ email: options.to }], subject: message.subject }],\n      from: { email: options.from },\n      content: [\n        { type: 'text/plain', value: message.text || '' },\n        { type: 'text/html', value: message.html || '' },\n      ],\n    };\n\n    const response = await fetch(API_URL, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${options.apikey}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(emailBody),\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      console.error(data);\n      throw new Error('Unable to send email.');\n    }\n    return { status: 'success', data } as const;\n  },\n};\n\nexport const emailOptions = async (to: string, context: AppLoadContext): Promise<EmailOptions> => {\n  const emailApiKey = contextEnv(context).EMAIL_API_KEY;\n\n  if (!emailApiKey || !emailApiKey.includes('||')) {\n    throw new Error('Invalid EMAIL_API_KEY format. Expected format: \"from||apiKey\".');\n  }\n\n  const [from, apiKey] = emailApiKey.split('||');\n  const validatedOptions = safeParse(EmailOptionsSchema, { from, to, apikey: apiKey });\n\n  if (!validatedOptions.success) {\n    console.error(validatedOptions.errors);\n    throw new Error('Invalid Email Options format');\n  }\n\n  return validatedOptions.data;\n};\n"]}